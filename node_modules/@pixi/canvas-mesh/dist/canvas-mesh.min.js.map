{"version":3,"file":"canvas-mesh.min.js","sources":["../src/CanvasMeshRenderer.ts","../src/settings.ts","../src/MeshMaterial.ts","../src/NineSlicePlane.ts","../src/Mesh.ts","../src/SimpleMesh.ts","../src/SimpleRope.ts"],"sourcesContent":["import { DRAW_MODES } from '@pixi/constants';\nimport { canvasUtils } from '@pixi/canvas-renderer';\n\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { Mesh } from '@pixi/mesh';\n\n/**\n * Renderer dedicated to meshes.\n *\n * @class\n * @protected\n * @memberof PIXI\n */\nexport class CanvasMeshRenderer\n{\n    public renderer: CanvasRenderer;\n\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The renderer this downport works for\n     */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Renders the Mesh\n     *\n     * @param {PIXI.Mesh} mesh - the Mesh to render\n     */\n    public render(mesh: Mesh): void\n    {\n        const renderer = this.renderer;\n        const transform = mesh.worldTransform;\n\n        renderer.context.globalAlpha = mesh.worldAlpha;\n        renderer.setBlendMode(mesh.blendMode);\n        renderer.setContextTransform(transform, mesh.roundPixels);\n\n        if (mesh.drawMode !== DRAW_MODES.TRIANGLES)\n        {\n            this._renderTriangleMesh(mesh);\n        }\n        else\n        {\n            this._renderTriangles(mesh);\n        }\n    }\n\n    /**\n     * Draws the object in Triangle Mesh mode\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - the Mesh to render\n     */\n    private _renderTriangleMesh(mesh: Mesh): void\n    {\n        // draw triangles!!\n        const length = mesh.geometry.buffers[0].data.length;\n\n        for (let i = 0; i < length - 2; i++)\n        {\n            // draw some triangles!\n            const index = i * 2;\n\n            this._renderDrawTriangle(mesh, index, (index + 2), (index + 4));\n        }\n    }\n\n    /**\n     * Draws the object in triangle mode using canvas\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - the current mesh\n     */\n    private _renderTriangles(mesh: Mesh): void\n    {\n        // draw triangles!!\n        const indices = mesh.geometry.getIndex().data;\n        const length = indices.length;\n\n        for (let i = 0; i < length; i += 3)\n        {\n            // draw some triangles!\n            const index0 = indices[i] * 2;\n            const index1 = indices[i + 1] * 2;\n            const index2 = indices[i + 2] * 2;\n\n            this._renderDrawTriangle(mesh, index0, index1, index2);\n        }\n    }\n\n    /**\n     * Draws one of the triangles that from the Mesh\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - the current mesh\n     * @param {number} index0 - the index of the first vertex\n     * @param {number} index1 - the index of the second vertex\n     * @param {number} index2 - the index of the third vertex\n     */\n    private _renderDrawTriangle(mesh: Mesh, index0: number, index1: number, index2: number): void\n    {\n        const context = this.renderer.context;\n        const vertices = mesh.geometry.buffers[0].data;\n        const { uvs, texture } = mesh;\n\n        if (!texture.valid)\n        {\n            return;\n        }\n        const isTinted = mesh.tint !== 0xFFFFFF;\n        const base = texture.baseTexture;\n        const textureWidth = base.width;\n        const textureHeight = base.height;\n\n        if (isTinted)\n        {\n            if (mesh._cachedTint !== mesh.tint)\n            {\n                mesh._cachedTint = mesh.tint;\n                mesh._tintedCanvas = canvasUtils.getTintedCanvas(mesh, mesh.tint) as HTMLCanvasElement;\n            }\n        }\n\n        const textureSource = isTinted ? mesh._tintedCanvas : base.getDrawableSource();\n\n        const u0 = uvs[index0] * base.width;\n        const u1 = uvs[index1] * base.width;\n        const u2 = uvs[index2] * base.width;\n        const v0 = uvs[index0 + 1] * base.height;\n        const v1 = uvs[index1 + 1] * base.height;\n        const v2 = uvs[index2 + 1] * base.height;\n\n        let x0 = vertices[index0];\n        let x1 = vertices[index1];\n        let x2 = vertices[index2];\n        let y0 = vertices[index0 + 1];\n        let y1 = vertices[index1 + 1];\n        let y2 = vertices[index2 + 1];\n\n        const canvasPadding = mesh.canvasPadding / this.renderer.resolution;\n\n        if (canvasPadding > 0)\n        {\n            const paddingX = canvasPadding / Math.abs(mesh.worldTransform.a);\n            const paddingY = canvasPadding / Math.abs(mesh.worldTransform.d);\n            const centerX = (x0 + x1 + x2) / 3;\n            const centerY = (y0 + y1 + y2) / 3;\n\n            let normX = x0 - centerX;\n            let normY = y0 - centerY;\n\n            let dist = Math.sqrt((normX * normX) + (normY * normY));\n\n            x0 = centerX + ((normX / dist) * (dist + paddingX));\n            y0 = centerY + ((normY / dist) * (dist + paddingY));\n\n            //\n\n            normX = x1 - centerX;\n            normY = y1 - centerY;\n\n            dist = Math.sqrt((normX * normX) + (normY * normY));\n            x1 = centerX + ((normX / dist) * (dist + paddingX));\n            y1 = centerY + ((normY / dist) * (dist + paddingY));\n\n            normX = x2 - centerX;\n            normY = y2 - centerY;\n\n            dist = Math.sqrt((normX * normX) + (normY * normY));\n            x2 = centerX + ((normX / dist) * (dist + paddingX));\n            y2 = centerY + ((normY / dist) * (dist + paddingY));\n        }\n\n        context.save();\n        context.beginPath();\n\n        context.moveTo(x0, y0);\n        context.lineTo(x1, y1);\n        context.lineTo(x2, y2);\n\n        context.closePath();\n\n        context.clip();\n\n        // Compute matrix transform\n        const delta = (u0 * v1) + (v0 * u2) + (u1 * v2) - (v1 * u2) - (v0 * u1) - (u0 * v2);\n        const deltaA = (x0 * v1) + (v0 * x2) + (x1 * v2) - (v1 * x2) - (v0 * x1) - (x0 * v2);\n        const deltaB = (u0 * x1) + (x0 * u2) + (u1 * x2) - (x1 * u2) - (x0 * u1) - (u0 * x2);\n        const deltaC = (u0 * v1 * x2) + (v0 * x1 * u2) + (x0 * u1 * v2) - (x0 * v1 * u2) - (v0 * u1 * x2) - (u0 * x1 * v2);\n        const deltaD = (y0 * v1) + (v0 * y2) + (y1 * v2) - (v1 * y2) - (v0 * y1) - (y0 * v2);\n        const deltaE = (u0 * y1) + (y0 * u2) + (u1 * y2) - (y1 * u2) - (y0 * u1) - (u0 * y2);\n        const deltaF = (u0 * v1 * y2) + (v0 * y1 * u2) + (y0 * u1 * v2) - (y0 * v1 * u2) - (v0 * u1 * y2) - (u0 * y1 * v2);\n\n        context.transform(\n            deltaA / delta,\n            deltaD / delta,\n            deltaB / delta,\n            deltaE / delta,\n            deltaC / delta,\n            deltaF / delta\n        );\n\n        context.drawImage(\n            textureSource,\n            0,\n            0,\n            textureWidth * base.resolution,\n            textureHeight * base.resolution,\n            0,\n            0,\n            textureWidth,\n            textureHeight\n        );\n\n        context.restore();\n        this.renderer.invalidateBlendMode();\n    }\n\n    /**\n     * Renders a flat Mesh\n     *\n     * @private\n     * @param {PIXI.Mesh} mesh - The Mesh to render\n     */\n    renderMeshFlat(mesh: Mesh): void\n    {\n        const context = this.renderer.context;\n        const vertices = mesh.geometry.getBuffer('aVertexPosition').data;\n        const length = vertices.length / 2;\n\n        // this.count++;\n\n        context.beginPath();\n\n        for (let i = 1; i < length - 2; ++i)\n        {\n            // draw some triangles!\n            const index = i * 2;\n\n            const x0 = vertices[index];\n            const y0 = vertices[index + 1];\n\n            const x1 = vertices[index + 2];\n            const y1 = vertices[index + 3];\n\n            const x2 = vertices[index + 4];\n            const y2 = vertices[index + 5];\n\n            context.moveTo(x0, y0);\n            context.lineTo(x1, y1);\n            context.lineTo(x2, y2);\n        }\n\n        context.fillStyle = '#FF0000';\n        context.fill();\n        context.closePath();\n    }\n\n    /**\n     * destroy the the renderer.\n     *\n     */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n","import { settings } from '@pixi/settings';\n\n/**\n * Default `canvasPadding` for canvas-based Mesh rendering.\n *\n * @see PIXI.Mesh2d#canvasPadding\n * @static\n * @name MESH_CANVAS_PADDING\n * @memberof PIXI.settings\n * @type {number}\n * @default 0\n */\nsettings.MESH_CANVAS_PADDING = 0;\n\nexport { settings };\n","import { MeshMaterial } from '@pixi/mesh';\n\nimport type { Mesh } from '@pixi/mesh';\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\n\n/**\n * Renders the mesh using the Canvas renderer\n *\n * @protected\n * @method render\n * @memberof PIXI.MeshMaterial#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n * @param {PIXI.Mesh} mesh - Mesh to render.\n */\nMeshMaterial.prototype._renderCanvas = function _renderCanvas(renderer: CanvasRenderer, mesh: Mesh): void\n{\n    renderer.plugins.mesh.render(mesh);\n};\n","import { canvasUtils } from '@pixi/canvas-renderer';\nimport { NineSlicePlane } from '@pixi/mesh-extras';\n\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\n\n/**\n * Cached tint value so we can tell when the tint is changed.\n * @memberof PIXI.NineSlicePlane#\n * @member {number} _cachedTint\n * @protected\n */\nNineSlicePlane.prototype._cachedTint = 0xFFFFFF;\n\n/**\n * Cached tinted texture.\n * @memberof PIXI.NineSlicePlane#\n * @member {HTMLCanvasElement} _tintedCanvas\n * @protected\n */\nNineSlicePlane.prototype._tintedCanvas = null;\n\n/**\n * Temporary storage for canvas source coords\n * @memberof PIXI.NineSlicePlane#\n * @member {number[]} _canvasUvs\n * @private\n */\nNineSlicePlane.prototype._canvasUvs = null;\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @private\n * @method _renderCanvas\n * @memberof PIXI.NineSlicePlane#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer to render with.\n */\nNineSlicePlane.prototype._renderCanvas = function _renderCanvas(renderer: CanvasRenderer): void\n{\n    const context = renderer.context;\n    const transform = this.worldTransform;\n    const isTinted = this.tint !== 0xFFFFFF;\n    const texture = this.texture;\n\n    if (!texture.valid)\n    {\n        return;\n    }\n\n    // Work out tinting\n    if (isTinted)\n    {\n        if (this._cachedTint !== this.tint)\n        {\n            // Tint has changed, need to update the tinted texture and use that instead\n\n            this._cachedTint = this.tint;\n\n            this._tintedCanvas = canvasUtils.getTintedCanvas(this, this.tint) as HTMLCanvasElement;\n        }\n    }\n\n    const textureSource = !isTinted ? texture.baseTexture.getDrawableSource() : this._tintedCanvas;\n\n    if (!this._canvasUvs)\n    {\n        this._canvasUvs = [0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    const vertices = this.vertices;\n    const uvs = this._canvasUvs;\n    const u0 = isTinted ? 0 : texture.frame.x;\n    const v0 = isTinted ? 0 : texture.frame.y;\n    const u1 = u0 + texture.frame.width;\n    const v1 = v0 + texture.frame.height;\n\n    uvs[0] = u0;\n    uvs[1] = u0 + this._leftWidth;\n    uvs[2] = u1 - this._rightWidth;\n    uvs[3] = u1;\n    uvs[4] = v0;\n    uvs[5] = v0 + this._topHeight;\n    uvs[6] = v1 - this._bottomHeight;\n    uvs[7] = v1;\n\n    for (let i = 0; i < 8; i++)\n    {\n        uvs[i] *= texture.baseTexture.resolution;\n    }\n\n    context.globalAlpha = this.worldAlpha;\n    renderer.setBlendMode(this.blendMode);\n    renderer.setContextTransform(transform, this.roundPixels);\n\n    for (let row = 0; row < 3; row++)\n    {\n        for (let col = 0; col < 3; col++)\n        {\n            const ind = (col * 2) + (row * 8);\n            const sw = Math.max(1, uvs[col + 1] - uvs[col]);\n            const sh = Math.max(1, uvs[row + 5] - uvs[row + 4]);\n            const dw = Math.max(1, vertices[ind + 10] - vertices[ind]);\n            const dh = Math.max(1, vertices[ind + 11] - vertices[ind + 1]);\n\n            context.drawImage(textureSource, uvs[col], uvs[row + 4], sw, sh,\n                vertices[ind], vertices[ind + 1], dw, dh);\n        }\n    }\n};\n","import { Mesh } from '@pixi/mesh';\nimport { settings } from './settings';\n\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\n\nlet warned = false;\n\n/**\n * Cached tint value so we can tell when the tint is changed.\n * @memberof PIXI.Mesh#\n * @member {number} _cachedTint\n * @protected\n */\nMesh.prototype._cachedTint = 0xFFFFFF;\n\n/**\n * Cached tinted texture.\n * @memberof PIXI.Mesh#\n * @member {HTMLCanvasElement} _tintedCanvas\n * @protected\n */\nMesh.prototype._tintedCanvas = null;\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @private\n * @method _renderCanvas\n * @memberof PIXI.Mesh#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n */\nMesh.prototype._renderCanvas = function _renderCanvas(renderer: CanvasRenderer): void\n{\n    if (this.shader.uvMatrix)\n    {\n        this.shader.uvMatrix.update();\n        this.calculateUvs();\n    }\n\n    if (this.material._renderCanvas)\n    {\n        this.material._renderCanvas(renderer, this);\n    }\n    else if (!warned)\n    {\n        warned = true;\n        if (window.console)\n        {\n            console.warn('Mesh with custom shaders are not supported in CanvasRenderer.');\n        }\n    }\n};\n\n// IMPORTANT: Please do NOT use this as a precedent to use `settings` after the object is created\n// this was merely created to completely decouple canvas from the base Mesh class and we are\n// unable to add `canvasPadding` in the constructor anymore, as the case was for PixiJS v4.\n\n/**\n * Internal variable for `canvasPadding`.\n *\n * @private\n * @memberof PIXI.Mesh\n * @member {number}\n * @default null\n */\nMesh.prototype._canvasPadding = null;\n\n/**\n * Triangles in canvas mode are automatically antialiased, use this value to force triangles\n * to overlap a bit with each other. To set the global default, set {@link PIXI.settings.MESH_CANVAS_PADDING}\n *\n * @see PIXI.settings.MESH_CANVAS_PADDING\n * @member {number} canvasPadding\n * @memberof PIXI.SimpleMesh#\n * @default 0\n */\nObject.defineProperty(Mesh.prototype, 'canvasPadding', {\n    get()\n    {\n        return this._canvasPadding !== null ? this._canvasPadding : settings.MESH_CANVAS_PADDING;\n    },\n    set(value)\n    {\n        this._canvasPadding = value;\n    },\n});\n","import { SimpleMesh } from '@pixi/mesh-extras';\n\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @private\n * @method _renderCanvas\n * @memberof PIXI.Mesh#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n */\nSimpleMesh.prototype._renderCanvas = function _renderCanvas(renderer: CanvasRenderer): void\n{\n    if (this.autoUpdate)\n    {\n        this.geometry.getBuffer('aVertexPosition').update();\n    }\n\n    if (this.shader.update)\n    {\n        this.shader.update();\n    }\n\n    this.calculateUvs();\n\n    this.material._renderCanvas(renderer, this);\n};\n","import { SimpleRope } from '@pixi/mesh-extras';\n\nimport type { RopeGeometry } from '@pixi/mesh-extras';\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @protected\n * @method _renderCanvas\n * @memberof PIXI.Mesh#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n */\nSimpleRope.prototype._renderCanvas = function _renderCanvas(renderer: CanvasRenderer): void\n{\n    if (this.autoUpdate\n        || (this.geometry as RopeGeometry)._width !== this.shader.texture.height)\n    {\n        (this.geometry as RopeGeometry)._width = this.shader.texture.height;\n        (this.geometry as RopeGeometry).update();\n    }\n\n    if (this.shader.update)\n    {\n        this.shader.update();\n    }\n\n    this.calculateUvs();\n\n    this.material._renderCanvas(renderer, this);\n};\n"],"names":["renderer","this","CanvasMeshRenderer","mesh","transform","worldTransform","context","globalAlpha","worldAlpha","setBlendMode","blendMode","setContextTransform","roundPixels","drawMode","DRAW_MODES","TRIANGLES","_renderTriangleMesh","_renderTriangles","length","geometry","buffers","data","i","index","_renderDrawTriangle","indices","getIndex","index0","index1","index2","vertices","uvs","texture","valid","isTinted","tint","base","baseTexture","textureWidth","width","textureHeight","height","_cachedTint","_tintedCanvas","canvasUtils","getTintedCanvas","textureSource","getDrawableSource","u0","u1","u2","v0","v1","v2","x0","x1","x2","y0","y1","y2","canvasPadding","resolution","paddingX","Math","abs","a","paddingY","d","centerX","centerY","normX","normY","dist","sqrt","save","beginPath","moveTo","lineTo","closePath","clip","delta","deltaA","deltaB","deltaC","deltaD","deltaE","deltaF","drawImage","restore","invalidateBlendMode","getBuffer","fillStyle","fill","MESH_CANVAS_PADDING","prototype","_renderCanvas","plugins","render","_canvasUvs","frame","x","y","_leftWidth","_rightWidth","_topHeight","_bottomHeight","row","col","ind","sw","max","sh","dw","dh","warned","shader","uvMatrix","update","calculateUvs","material","window","console","warn","_canvasPadding","Object","defineProperty","Mesh","get","settings","set","value","autoUpdate","_width"],"mappings":"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"}