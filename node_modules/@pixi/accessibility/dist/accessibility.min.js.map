{"version":3,"file":"accessibility.min.js","sources":["../src/accessibleTarget.ts","../src/AccessibilityManager.ts"],"sourcesContent":["import type { DisplayObject } from '@pixi/display';\n\nexport type PointerEvents = 'auto'\n| 'none'\n| 'visiblePainted'\n| 'visibleFill'\n| 'visibleStroke'\n| 'visible'\n| 'painted'\n| 'fill'\n| 'stroke'\n| 'all'\n| 'inherit';\n\nexport interface IAccessibleTarget {\n    accessible: boolean;\n    accessibleTitle: string;\n    accessibleHint: string;\n    tabIndex: number;\n    _accessibleActive: boolean;\n    _accessibleDiv: IAccessibleHTMLElement;\n    accessibleType: string;\n    accessiblePointerEvents: PointerEvents;\n    accessibleChildren: true;\n    renderId: number;\n}\n\nexport interface IAccessibleHTMLElement extends HTMLElement {\n    type?: string;\n    displayObject?: DisplayObject;\n}\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\nexport const accessibleTarget: IAccessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     *\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: null,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n\n    renderId: -1,\n};\n","import { DisplayObject } from '@pixi/display';\nimport { isMobile, removeItems } from '@pixi/utils';\nimport { accessibleTarget } from './accessibleTarget';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Container } from '@pixi/display';\nimport type { Renderer, AbstractRenderer } from '@pixi/core';\nimport type { IAccessibleHTMLElement } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI\n */\nexport class AccessibilityManager\n{\n    public debug: boolean;\n    public renderer: AbstractRenderer|Renderer;\n\n    private _isActive: boolean;\n    private _isMobileAccessibility: boolean;\n    private _hookDiv: HTMLElement;\n    private div: HTMLElement;\n    private pool: IAccessibleHTMLElement[];\n    private renderId: number;\n    private children: DisplayObject[];\n    private androidUpdateCount: number;\n    private androidUpdateFrequency: number;\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: AbstractRenderer|Renderer)\n    {\n        /**\n         * @type {?HTMLElement}\n         * @private\n         */\n        this._hookDiv = null;\n\n        if (isMobile.tablet || isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        /**\n         * This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.\n         *\n         * @type {HTMLElement}\n         * @private\n         */\n        this.div = div;\n\n        /**\n         * A simple pool for storing divs.\n         *\n         * @type {*}\n         * @private\n         */\n        this.pool = [];\n\n        /**\n         * This is a tick used to check if an object is no longer being rendered.\n         *\n         * @type {Number}\n         * @private\n         */\n        this.renderId = 0;\n\n        /**\n         * Setting this to true will visually show the divs.\n         *\n         * @type {boolean}\n         */\n        this.debug = false;\n\n        /**\n         * The renderer this accessibility manager works for.\n         *\n         * @member {PIXI.AbstractRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * The array of currently active accessible items.\n         *\n         * @member {Array<*>}\n         * @private\n         */\n        this.children = [];\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        this._isActive = false;\n\n        this._isMobileAccessibility = false;\n\n        /**\n         * count to throttle div updates on android devices\n         * @type number\n         * @private\n         */\n        this.androidUpdateCount = 0;\n\n        /**\n         * the frequency to update the div elements ()\n         * @private\n         */\n        this.androidUpdateFrequency = 500; // 2fps\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        window.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * A flag\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * A flag\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    /**\n     * Creates the touch hooks.\n     *\n     * @private\n     */\n    private createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessability for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     *\n     * @private\n     */\n    private destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     *\n     * @private\n     */\n    private activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        window.document.addEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown, false);\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        (this.renderer as AbstractRenderer).on('postrender', this.update, this);\n\n        if ((this.renderer as AbstractRenderer).view.parentNode)\n        {\n            (this.renderer as AbstractRenderer).view.parentNode.appendChild(this.div);\n        }\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     *\n     * @private\n     */\n    private deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.addEventListener('keydown', this._onKeyDown, false);\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        (this.renderer as AbstractRenderer).off('postrender', this.update);\n\n        if (this.div.parentNode)\n        {\n            this.div.parentNode.removeChild(this.div);\n        }\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     *\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    private updateAccessibleObjects(displayObject: Container): void\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.interactive)\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this.updateAccessibleObjects(children[i] as Container);\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     *\n     * @private\n     */\n    private update(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!(this.renderer as Renderer).renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        if (this.renderer._lastObjectRendered)\n        {\n            this.updateAccessibleObjects(this.renderer._lastObjectRendered as Container);\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        const rect = (this.renderer as AbstractRenderer).view.getBoundingClientRect();\n\n        const resolution = this.renderer.resolution;\n\n        const sx = (rect.width / (this.renderer as AbstractRenderer).width) * resolution;\n        const sy = (rect.height / (this.renderer as AbstractRenderer).height) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${rect.left}px`;\n        div.style.top = `${rect.top}px`;\n        div.style.width = `${(this.renderer as AbstractRenderer).width}px`;\n        div.style.height = `${(this.renderer as AbstractRenderer).height}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     *\n     * @param {HTMLElement} div\n     */\n    public updateDebugHTML(div: IAccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     *\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    public capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        if (hitArea.x + hitArea.width > (this.renderer as AbstractRenderer).width)\n        {\n            hitArea.width = (this.renderer as AbstractRenderer).width - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > (this.renderer as AbstractRenderer).height)\n        {\n            hitArea.height = (this.renderer as AbstractRenderer).height - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     *\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    private addChild<T extends DisplayObject>(displayObject: T): void\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Maps the div button press to pixi's InteractionManager (click)\n     *\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        // TODO: Remove casting when CanvasRenderer is converted\n        const interactionManager = (this.renderer as AbstractRenderer).plugins.interaction;\n\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'click', interactionManager.eventData\n        );\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'pointertap', interactionManager.eventData\n        );\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'tap', interactionManager.eventData\n        );\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseover)\n     *\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        const interactionManager = (this.renderer as AbstractRenderer).plugins.interaction;\n\n        interactionManager.dispatchEvent(\n            (e.target as IAccessibleHTMLElement).displayObject, 'mouseover', interactionManager.eventData\n        );\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseout)\n     *\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        // TODO: Remove casting when CanvasRenderer is converted\n        const interactionManager = (this.renderer as AbstractRenderer).plugins.interaction;\n\n        interactionManager.dispatchEvent((e.target as any).displayObject, 'mouseout', interactionManager.eventData);\n    }\n\n    /**\n     * Is called when a key is pressed\n     *\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     *\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /**\n     * Destroys the accessibility manager\n     *\n     */\n    public destroy(): void\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n"],"names":["accessibleTarget","accessible","accessibleTitle","accessibleHint","tabIndex","_accessibleActive","_accessibleDiv","accessibleType","accessiblePointerEvents","accessibleChildren","renderId","mixin","DIV_TOUCH_SIZE","DIV_TOUCH_POS_X","DIV_TOUCH_POS_Y","DIV_TOUCH_ZINDEX","renderer","this","_hookDiv","isMobile","tablet","phone","createTouchHook","div","document","createElement","style","width","height","position","top","left","zIndex","toString","pool","debug","children","_onKeyDown","bind","_onMouseMove","_isActive","_isMobileAccessibility","androidUpdateCount","androidUpdateFrequency","window","addEventListener","Object","AccessibilityManager","hookDiv","DIV_HOOK_SIZE","DIV_HOOK_POS_X","DIV_HOOK_POS_Y","backgroundColor","title","_this","activate","destroyTouchHook","body","appendChild","removeChild","removeEventListener","on","update","view","parentNode","off","displayObject","visible","interactive","addChild","i","length","updateAccessibleObjects","now","performance","android","device","renderingToScreen","_lastObjectRendered","rect","getBoundingClientRect","resolution","sx","sy","child","removeItems","push","hitArea","wt","worldTransform","tx","x","a","ty","y","d","getBounds","capHitArea","getAttribute","setAttribute","updateDebugHTML","innerHTML","type","pop","borderStyle","navigator","userAgent","toLowerCase","indexOf","match","_onClick","_onFocus","_onFocusOut","pointerEvents","e","interactionManager","plugins","interaction","dispatchEvent","target","eventData","keyCode","movementX","movementY","deactivate"],"mappings":"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"}