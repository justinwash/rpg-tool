{"version":3,"file":"canvas-graphics.es.js","sources":["../src/CanvasGraphicsRenderer.ts","../src/Graphics.ts"],"sourcesContent":["import { Texture } from '@pixi/core';\nimport { SHAPES, Matrix } from '@pixi/math';\nimport { canvasUtils } from '@pixi/canvas-renderer';\n\nimport type { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { FillStyle, Graphics } from '@pixi/graphics';\nimport type { Polygon, Rectangle, Circle, Ellipse, RoundedRectangle } from '@pixi/math';\n\n/**\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they\n * now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's CanvasGraphicsRenderer:\n * https://github.com/libgdx/libgdx/blob/1.0.0/gdx/src/com/badlogic/gdx/graphics/glutils/ShapeRenderer.java\n */\n\n/**\n * Renderer dedicated to drawing and batching graphics objects.\n *\n * @class\n * @protected\n * @memberof PIXI\n */\nexport class CanvasGraphicsRenderer\n{\n    public renderer: CanvasRenderer;\n    private _svgMatrix: DOMMatrix|boolean;\n    private _tempMatrix: Matrix;\n\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The current PIXI renderer.\n     */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n        this._svgMatrix = null;\n        this._tempMatrix = new Matrix();\n    }\n\n    /**\n     * calculates fill/stroke style for canvas\n     *\n     * @private\n     * @param {PIXI.FillStyle} style\n     * @param {number} tint\n     * @returns {string|CanvasPattern}\n     */\n    private _calcCanvasStyle(style: FillStyle, tint: number): string|CanvasPattern\n    {\n        let res;\n\n        if (style.texture && style.texture.baseTexture !== Texture.WHITE.baseTexture)\n        {\n            if (style.texture.valid)\n            {\n                res = canvasUtils.getTintedPattern(style.texture, tint);\n                this.setPatternTransform(res, style.matrix || Matrix.IDENTITY);\n            }\n            else\n            {\n                res = '#808080';\n            }\n        }\n        else\n        {\n            res = `#${(`00000${(tint | 0).toString(16)}`).substr(-6)}`;\n        }\n\n        return res;\n    }\n\n    /**\n     * Renders a Graphics object to a canvas.\n     *\n     * @param {PIXI.Graphics} graphics - the actual graphics object to render\n     */\n    public render(graphics: Graphics): void\n    {\n        const renderer = this.renderer;\n        const context = renderer.context;\n        const worldAlpha = graphics.worldAlpha;\n        const transform = graphics.transform.worldTransform;\n\n        renderer.setContextTransform(transform);\n        renderer.setBlendMode(graphics.blendMode);\n\n        const graphicsData = graphics.geometry.graphicsData;\n\n        let contextFillStyle;\n        let contextStrokeStyle;\n\n        const tintR = ((graphics.tint >> 16) & 0xFF) / 255;\n        const tintG = ((graphics.tint >> 8) & 0xFF) / 255;\n        const tintB = (graphics.tint & 0xFF) / 255;\n\n        for (let i = 0; i < graphicsData.length; i++)\n        {\n            const data = graphicsData[i];\n            const shape = data.shape;\n            const fillStyle = data.fillStyle;\n            const lineStyle = data.lineStyle;\n\n            const fillColor = data.fillStyle.color | 0;\n            const lineColor = data.lineStyle.color | 0;\n\n            if (data.matrix)\n            {\n                renderer.setContextTransform(transform.copyTo(this._tempMatrix).append(data.matrix));\n            }\n\n            if (fillStyle.visible)\n            {\n                const fillTint = (\n                    (((fillColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                    + (((fillColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                    + (((fillColor & 0xFF) / 255) * tintB * 255)\n                );\n\n                contextFillStyle = this._calcCanvasStyle(fillStyle, fillTint);\n            }\n            if (lineStyle.visible)\n            {\n                const lineTint = (\n                    (((lineColor >> 16) & 0xFF) / 255 * tintR * 255 << 16)\n                    + (((lineColor >> 8) & 0xFF) / 255 * tintG * 255 << 8)\n                    + (((lineColor & 0xFF) / 255) * tintB * 255)\n                );\n\n                contextStrokeStyle = this._calcCanvasStyle(lineStyle, lineTint);\n            }\n\n            context.lineWidth = lineStyle.width;\n            context.lineCap = lineStyle.cap;\n            context.lineJoin = lineStyle.join;\n            context.miterLimit = lineStyle.miterLimit;\n\n            if (data.type === SHAPES.POLY)\n            {\n                context.beginPath();\n\n                const tempShape = shape as Polygon;\n                let points = tempShape.points;\n                const holes = data.holes;\n                let outerArea;\n                let innerArea;\n                let px;\n                let py;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 2; j < points.length; j += 2)\n                {\n                    context.lineTo(points[j], points[j + 1]);\n                }\n\n                if (tempShape.closeStroke)\n                {\n                    context.closePath();\n                }\n\n                if (holes.length > 0)\n                {\n                    outerArea = 0;\n                    px = points[0];\n                    py = points[1];\n                    for (let j = 2; j + 2 < points.length; j += 2)\n                    {\n                        outerArea += ((points[j] - px) * (points[j + 3] - py))\n                            - ((points[j + 2] - px) * (points[j + 1] - py));\n                    }\n\n                    for (let k = 0; k < holes.length; k++)\n                    {\n                        points = (holes[k].shape as Polygon).points;\n\n                        if (!points)\n                        {\n                            continue;\n                        }\n\n                        innerArea = 0;\n                        px = points[0];\n                        py = points[1];\n                        for (let j = 2; j + 2 < points.length; j += 2)\n                        {\n                            innerArea += ((points[j] - px) * (points[j + 3] - py))\n                                - ((points[j + 2] - px) * (points[j + 1] - py));\n                        }\n\n                        if (innerArea * outerArea < 0)\n                        {\n                            context.moveTo(points[0], points[1]);\n\n                            for (let j = 2; j < points.length; j += 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n                        else\n                        {\n                            context.moveTo(points[points.length - 2], points[points.length - 1]);\n\n                            for (let j = points.length - 4; j >= 0; j -= 2)\n                            {\n                                context.lineTo(points[j], points[j + 1]);\n                            }\n                        }\n\n                        if ((holes[k].shape as Polygon).closeStroke)\n                        {\n                            context.closePath();\n                        }\n                    }\n                }\n\n                if (fillStyle.visible)\n                {\n                    context.globalAlpha = fillStyle.alpha * worldAlpha;\n                    context.fillStyle = contextFillStyle;\n                    context.fill();\n                }\n\n                if (lineStyle.visible)\n                {\n                    context.globalAlpha = lineStyle.alpha * worldAlpha;\n                    context.strokeStyle = contextStrokeStyle;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                const tempShape = shape as Rectangle;\n\n                if (fillStyle.visible)\n                {\n                    context.globalAlpha = fillStyle.alpha * worldAlpha;\n                    context.fillStyle = contextFillStyle;\n                    context.fillRect(tempShape.x, tempShape.y, tempShape.width, tempShape.height);\n                }\n                if (lineStyle.visible)\n                {\n                    context.globalAlpha = lineStyle.alpha * worldAlpha;\n                    context.strokeStyle = contextStrokeStyle;\n                    context.strokeRect(tempShape.x, tempShape.y, tempShape.width, tempShape.height);\n                }\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                const tempShape = shape as Circle;\n\n                // TODO - need to be Undefined!\n                context.beginPath();\n                context.arc(tempShape.x, tempShape.y, tempShape.radius, 0, 2 * Math.PI);\n                context.closePath();\n\n                if (fillStyle.visible)\n                {\n                    context.globalAlpha = fillStyle.alpha * worldAlpha;\n                    context.fillStyle = contextFillStyle;\n                    context.fill();\n                }\n\n                if (lineStyle.visible)\n                {\n                    context.globalAlpha = lineStyle.alpha * worldAlpha;\n                    context.strokeStyle = contextStrokeStyle;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const tempShape = shape as Ellipse;\n\n                const w = tempShape.width * 2;\n                const h = tempShape.height * 2;\n\n                const x = tempShape.x - (w / 2);\n                const y = tempShape.y - (h / 2);\n\n                context.beginPath();\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w; // x-end\n                const ye = y + h; // y-end\n                const xm = x + (w / 2); // x-middle\n                const ym = y + (h / 2); // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n\n                context.closePath();\n\n                if (fillStyle.visible)\n                {\n                    context.globalAlpha = fillStyle.alpha * worldAlpha;\n                    context.fillStyle = contextFillStyle;\n                    context.fill();\n                }\n                if (lineStyle.visible)\n                {\n                    context.globalAlpha = lineStyle.alpha * worldAlpha;\n                    context.strokeStyle = contextStrokeStyle;\n                    context.stroke();\n                }\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const tempShape = shape as RoundedRectangle;\n\n                const rx = tempShape.x;\n                const ry = tempShape.y;\n                const width = tempShape.width;\n                const height = tempShape.height;\n                let radius = tempShape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.beginPath();\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n\n                if (fillStyle.visible)\n                {\n                    context.globalAlpha = fillStyle.alpha * worldAlpha;\n                    context.fillStyle = contextFillStyle;\n                    context.fill();\n                }\n                if (lineStyle.visible)\n                {\n                    context.globalAlpha = lineStyle.alpha * worldAlpha;\n                    context.strokeStyle = contextStrokeStyle;\n                    context.stroke();\n                }\n            }\n        }\n    }\n\n    public setPatternTransform(pattern: CanvasPattern, matrix: Matrix): void\n    {\n        if (this._svgMatrix === false)\n        {\n            return;\n        }\n        if (!this._svgMatrix)\n        {\n            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\n            if (svg && svg.createSVGMatrix)\n            {\n                this._svgMatrix = svg.createSVGMatrix();\n            }\n            if (!this._svgMatrix || !pattern.setTransform)\n            {\n                this._svgMatrix = false;\n\n                return;\n            }\n        }\n\n        (this._svgMatrix as DOMMatrix).a = matrix.a;\n        (this._svgMatrix as DOMMatrix).b = matrix.b;\n        (this._svgMatrix as DOMMatrix).c = matrix.c;\n        (this._svgMatrix as DOMMatrix).d = matrix.d;\n        (this._svgMatrix as DOMMatrix).e = matrix.tx;\n        (this._svgMatrix as DOMMatrix).f = matrix.ty;\n        pattern.setTransform((this._svgMatrix as DOMMatrix).inverse());\n    }\n    /**\n     * destroy graphics object\n     *\n     */\n    public destroy(): void\n    {\n        this.renderer = null;\n        this._svgMatrix = null;\n        this._tempMatrix = null;\n    }\n}\n","import { Graphics } from '@pixi/graphics';\nimport { CanvasRenderer } from '@pixi/canvas-renderer';\nimport { RenderTexture, Texture } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\n\nimport type { SCALE_MODES } from '@pixi/constants';\nimport type { BaseRenderTexture } from '@pixi/core';\n\nlet canvasRenderer: CanvasRenderer;\nconst tempMatrix = new Matrix();\n\n/**\n * Generates a canvas texture. Only available with **pixi.js-legacy** bundle\n * or the **@pixi/canvas-graphics** package.\n * @method generateCanvasTexture\n * @memberof PIXI.Graphics#\n * @param {PIXI.SCALE_MODES} scaleMode - The scale mode of the texture.\n * @param {number} resolution - The resolution of the texture.\n * @return {PIXI.Texture} The new texture.\n */\nGraphics.prototype.generateCanvasTexture = function generateCanvasTexture(scaleMode: SCALE_MODES, resolution = 1): Texture\n{\n    const bounds = this.getLocalBounds();\n\n    const canvasBuffer = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        scaleMode,\n        resolution,\n    });\n\n    if (!canvasRenderer)\n    {\n        canvasRenderer = new CanvasRenderer();\n    }\n\n    this.transform.updateLocalTransform();\n    this.transform.localTransform.copyTo(tempMatrix);\n\n    tempMatrix.invert();\n\n    tempMatrix.tx -= bounds.x;\n    tempMatrix.ty -= bounds.y;\n\n    canvasRenderer.render(this, canvasBuffer, true, tempMatrix);\n\n    const texture = Texture.from((canvasBuffer.baseTexture as BaseRenderTexture)._canvasRenderTarget.canvas, {\n        scaleMode,\n    });\n\n    texture.baseTexture.setResolution(resolution);\n\n    return texture;\n};\n\nGraphics.prototype.cachedGraphicsData = [];\n\n/**\n * Renders the object using the Canvas renderer\n *\n * @method _renderCanvas\n * @memberof PIXI.Graphics#\n * @private\n * @param {PIXI.CanvasRenderer} renderer - The renderer\n */\nGraphics.prototype._renderCanvas = function _renderCanvas(renderer: CanvasRenderer): void\n{\n    if (this.isMask === true)\n    {\n        return;\n    }\n\n    this.finishPoly();\n    renderer.plugins.graphics.render(this);\n};\n"],"names":[],"mappings":"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"}