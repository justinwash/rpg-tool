{"version":3,"file":"canvas-renderer.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../src/utils/CanvasMaskManager.ts","../src/utils/canUseNewCanvasBlendModes.ts","../src/CanvasRenderer.ts","../src/utils/mapCanvasBlendModesToPixi.ts","../src/canvasUtils.ts","../src/Renderer.ts","../src/BaseTexture.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { SHAPES } from '@pixi/math';\n\nimport type { CanvasRenderer } from '../CanvasRenderer';\nimport type { Graphics } from '@pixi/graphics';\nimport type { MaskData } from '@pixi/core';\nimport type { Container } from '@pixi/display';\n\n/**\n * A set of functions used to handle masking.\n *\n * Sprite masking is not supported on the CanvasRenderer.\n *\n * @class\n * @memberof PIXI\n */\nexport class CanvasMaskManager\n{\n    private renderer: CanvasRenderer;\n    private _foundShapes: Array<Graphics>;\n\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n     */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n\n        this._foundShapes = [];\n    }\n\n    /**\n     * This method adds it to the current stack of masks.\n     *\n     * @param {PIXI.MaskData | PIXI.Graphics} maskData - the maskData that will be pushed\n     */\n    pushMask(maskData: MaskData | Graphics): void\n    {\n        const renderer = this.renderer;\n        const maskObject = ((maskData as MaskData).maskObject || maskData) as Container;\n\n        renderer.context.save();\n\n        // TODO support sprite alpha masks??\n        // lots of effort required. If demand is great enough..\n\n        const foundShapes = this._foundShapes;\n\n        this.recursiveFindShapes(maskObject, foundShapes);\n        if (foundShapes.length > 0)\n        {\n            const { context } = renderer;\n\n            context.beginPath();\n\n            for (let i = 0; i < foundShapes.length; i++)\n            {\n                const shape = foundShapes[i];\n                const transform = shape.transform.worldTransform;\n\n                this.renderer.setContextTransform(transform);\n\n                this.renderGraphicsShape(shape);\n            }\n\n            foundShapes.length = 0;\n            context.clip();\n        }\n    }\n\n    /**\n     * Renders all PIXI.Graphics shapes in a subtree.\n     *\n     * @param {PIXI.Container} container - container to scan.\n     * @param {PIXI.Graphics[]} out - where to put found shapes\n     */\n    recursiveFindShapes(container: Container, out: Array<Graphics>): void\n    {\n        if ((container as Graphics).geometry && (container as Graphics).geometry.graphicsData)\n        {\n            out.push(container as Graphics);\n        }\n\n        const { children } = container;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.recursiveFindShapes(children[i] as Container, out);\n            }\n        }\n    }\n\n    /**\n     * Renders a PIXI.Graphics shape.\n     *\n     * @param {PIXI.Graphics} graphics - The object to render.\n     */\n    renderGraphicsShape(graphics: Graphics): void\n    {\n        graphics.finishPoly();\n\n        const context = this.renderer.context;\n        const graphicsData = graphics.geometry.graphicsData;\n        const len = graphicsData.length;\n\n        if (len === 0)\n        {\n            return;\n        }\n\n        for (let i = 0; i < len; i++)\n        {\n            const data = graphicsData[i];\n            const shape = data.shape;\n\n            if (shape.type === SHAPES.POLY)\n            {\n                const points = shape.points;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 1; j < points.length / 2; j++)\n                {\n                    context.lineTo(points[j * 2], points[(j * 2) + 1]);\n                }\n\n                // if the first and last point are the same close the path - much neater :)\n                if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1])\n                {\n                    context.closePath();\n                }\n            }\n            else if (shape.type === SHAPES.RECT)\n            {\n                context.rect(shape.x, shape.y, shape.width, shape.height);\n                context.closePath();\n            }\n            else if (shape.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n            }\n            else if (shape.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w; // x-end\n                const ye = y + h; // y-end\n                const xm = x + (w / 2); // x-middle\n                const ym = y + (h / 2); // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n                context.closePath();\n            }\n            else if (shape.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n            }\n        }\n    }\n\n    /**\n     * Restores the current drawing context to the state it was before the mask was applied.\n     *\n     * @param {PIXI.CanvasRenderer} renderer - The renderer context to use.\n     */\n    popMask(renderer: CanvasRenderer): void\n    {\n        renderer.context.restore();\n        renderer.invalidateBlendMode();\n    }\n\n    /**\n     * Destroys this canvas mask manager.\n     *\n     */\n    public destroy(): void\n    {\n        /* empty */\n    }\n}\n","/**\n * Creates a little colored canvas\n *\n * @ignore\n * @param {string} color - The color to make the canvas\n * @return {canvas} a small canvas element\n */\nfunction createColoredCanvas(color: string): HTMLCanvasElement\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = color;\n    context.fillRect(0, 0, 6, 1);\n\n    return canvas;\n}\n\n/**\n * Checks whether the Canvas BlendModes are supported by the current browser\n *\n * @private\n * @return {boolean} whether they are supported\n */\nexport function canUseNewCanvasBlendModes(): boolean\n{\n    if (typeof document === 'undefined')\n    {\n        return false;\n    }\n\n    const magenta = createColoredCanvas('#ff00ff');\n    const yellow = createColoredCanvas('#ffff00');\n\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 6;\n    canvas.height = 1;\n\n    const context = canvas.getContext('2d');\n\n    context.globalCompositeOperation = 'multiply';\n    context.drawImage(magenta, 0, 0);\n    context.drawImage(yellow, 2, 0);\n\n    const imageData = context.getImageData(2, 0, 1, 1);\n\n    if (!imageData)\n    {\n        return false;\n    }\n\n    const data = imageData.data;\n\n    return (data[0] === 255 && data[1] === 0 && data[2] === 0);\n}\n","import { AbstractRenderer, resources } from '@pixi/core';\nimport { CanvasRenderTarget, sayHello, rgb2hex, hex2string } from '@pixi/utils';\nimport { CanvasMaskManager } from './utils/CanvasMaskManager';\nimport { mapCanvasBlendModesToPixi } from './utils/mapCanvasBlendModesToPixi';\nimport { RENDERER_TYPE, SCALE_MODES, BLEND_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { Matrix } from '@pixi/math';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type {\n    IRendererOptions, IRendererPlugin,\n    IRendererPlugins,\n    RenderTexture,\n    BaseRenderTexture,\n} from '@pixi/core';\n\nconst tempMatrix = new Matrix();\n\nexport interface ICanvasRendererPluginConstructor {\n    new (renderer: CanvasRenderer, options?: any): IRendererPlugin;\n}\n\nexport interface ICanvasRendererPlugins\n{\n    [key: string]: any;\n}\n\n/**\n * Different browsers support different smoothing property names\n * this is the list of all platform props.\n */\ntype SmoothingEnabledProperties =\n    'imageSmoothingEnabled' |\n    'webkitImageSmoothingEnabled' |\n    'mozImageSmoothingEnabled' |\n    'oImageSmoothingEnabled' |\n    'msImageSmoothingEnabled';\n\n/**\n * Renderering context for all browsers. This includes platform-specific\n * properties that are not included in the spec for CanvasRenderingContext2D\n */\nexport interface CrossPlatformCanvasRenderingContext2D extends CanvasRenderingContext2D\n{\n    webkitImageSmoothingEnabled: boolean;\n    mozImageSmoothingEnabled: boolean;\n    oImageSmoothingEnabled: boolean;\n    msImageSmoothingEnabled: boolean;\n}\n\n/**\n * The CanvasRenderer draws the scene and all its content onto a 2d canvas.\n *\n * This renderer should be used for browsers that do not support WebGL.\n * Don't forget to add the CanvasRenderer.view to your DOM or you will not see anything!\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.AbstractRenderer\n */\nexport class CanvasRenderer extends AbstractRenderer\n{\n    public readonly rootContext: CrossPlatformCanvasRenderingContext2D;\n    public context: CrossPlatformCanvasRenderingContext2D;\n    public refresh: boolean;\n    public maskManager: CanvasMaskManager;\n    public smoothProperty: SmoothingEnabledProperties;\n    public readonly blendModes: string[];\n    public renderingToScreen: boolean;\n\n    private _activeBlendMode: BLEND_MODES;\n    private _projTransform: Matrix;\n\n    _outerBlend: boolean;\n\n    /**\n     * @param {object} [options] - The optional renderer parameters\n     * @param {number} [options.width=800] - the width of the screen\n     * @param {number} [options.height=600] - the height of the screen\n     * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n     * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1\n     * @param {boolean} [options.antialias=false] - sets antialias\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The\n     *  resolution of the renderer retina would be 2.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the webgl context.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *      not before the new render pass.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     */\n    constructor(options?: IRendererOptions)\n    {\n        super(RENDERER_TYPE.CANVAS, options);\n\n        /**\n         * The root canvas 2d context that everything is drawn with.\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.rootContext = this.view.getContext('2d', { alpha: this.transparent }) as\n            CrossPlatformCanvasRenderingContext2D;\n\n        /**\n         * The currently active canvas 2d context (could change with renderTextures)\n         *\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.rootContext;\n\n        /**\n         * Boolean flag controlling canvas refresh.\n         *\n         * @member {boolean}\n         */\n        this.refresh = true;\n\n        /**\n         * Instance of a CanvasMaskManager, handles masking when using the canvas renderer.\n         *\n         * @member {PIXI.CanvasMaskManager}\n         */\n        this.maskManager = new CanvasMaskManager(this);\n\n        /**\n         * The canvas property used to set the canvas smoothing property.\n         *\n         * @member {string}\n         */\n        this.smoothProperty = 'imageSmoothingEnabled';\n\n        if (!this.rootContext.imageSmoothingEnabled)\n        {\n            const rc = this.rootContext;\n\n            if (rc.webkitImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'webkitImageSmoothingEnabled';\n            }\n            else if (rc.mozImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'mozImageSmoothingEnabled';\n            }\n            else if (rc.oImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'oImageSmoothingEnabled';\n            }\n            else if (rc.msImageSmoothingEnabled)\n            {\n                this.smoothProperty = 'msImageSmoothingEnabled';\n            }\n        }\n\n        this.initPlugins(CanvasRenderer.__plugins);\n\n        /**\n         * Tracks the blend modes useful for this renderer.\n         *\n         * @member {object<number, string>}\n         */\n        this.blendModes = mapCanvasBlendModesToPixi();\n        this._activeBlendMode = null;\n        this._outerBlend = false;\n\n        /**\n         * Projection transform, passed in render() stored here\n         * @type {null}\n         * @private\n         */\n        this._projTransform = null;\n\n        this.renderingToScreen = false;\n\n        sayHello('Canvas');\n\n        /**\n         * Fired after rendering finishes.\n         *\n         * @event PIXI.CanvasRenderer#postrender\n         */\n\n        /**\n         * Fired before rendering starts.\n         *\n         * @event PIXI.CanvasRenderer#prerender\n         */\n\n        this.resize(this.options.width, this.options.height);\n    }\n\n    /**\n     * Renders the object to this canvas view\n     *\n     * @param {PIXI.DisplayObject} displayObject - The object to be rendered\n     * @param {PIXI.RenderTexture} [renderTexture] - A render texture to be rendered to.\n     *  If unset, it will render to the root context.\n     * @param {boolean} [clear=this.clearBeforeRender] - Whether to clear the canvas before drawing\n     * @param {PIXI.Matrix} [transform] - A transformation to be applied\n     * @param {boolean} [skipUpdateTransform=false] - Whether to skip the update transform\n     */\n    public render(displayObject: DisplayObject, renderTexture?: RenderTexture | BaseRenderTexture,\n        clear?: boolean, transform?: Matrix, skipUpdateTransform?: boolean): void\n    {\n        if (!this.view)\n        {\n            return;\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.emit('prerender');\n\n        const rootResolution = this.resolution;\n\n        if (renderTexture)\n        {\n            renderTexture = renderTexture.castToBaseTexture() as BaseRenderTexture;\n\n            if (!renderTexture._canvasRenderTarget)\n            {\n                renderTexture._canvasRenderTarget = new CanvasRenderTarget(\n                    renderTexture.width,\n                    renderTexture.height,\n                    renderTexture.resolution\n                );\n                renderTexture.resource = new resources.CanvasResource(renderTexture._canvasRenderTarget.canvas);\n                renderTexture.valid = true;\n            }\n\n            this.context = renderTexture._canvasRenderTarget.context as CrossPlatformCanvasRenderingContext2D;\n            this.resolution = renderTexture._canvasRenderTarget.resolution;\n        }\n        else\n        {\n            this.context = this.rootContext;\n        }\n\n        const context = this.context;\n\n        this._projTransform = transform || null;\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.enableTempParent();\n\n            displayObject.updateTransform();\n            displayObject.disableTempParent(cacheParent);\n        }\n\n        context.save();\n        context.setTransform(1, 0, 0, 1, 0, 0);\n        context.globalAlpha = 1;\n        this._activeBlendMode = BLEND_MODES.NORMAL;\n        this._outerBlend = false;\n        context.globalCompositeOperation = this.blendModes[BLEND_MODES.NORMAL];\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            if (this.renderingToScreen)\n            {\n                if (this.transparent)\n                {\n                    context.clearRect(0, 0, this.width, this.height);\n                }\n                else\n                {\n                    context.fillStyle = this._backgroundColorString;\n                    context.fillRect(0, 0, this.width, this.height);\n                }\n            }\n            else\n            {\n                renderTexture = (renderTexture as BaseRenderTexture);\n                renderTexture._canvasRenderTarget.clear();\n\n                const clearColor = renderTexture.clearColor;\n\n                if (clearColor[3] > 0)\n                {\n                    context.fillStyle = hex2string(rgb2hex(clearColor));\n                    context.fillRect(0, 0, renderTexture.realWidth, renderTexture.realHeight);\n                }\n            }\n        }\n\n        // TODO RENDER TARGET STUFF HERE..\n        const tempContext = this.context;\n\n        this.context = context;\n        displayObject.renderCanvas(this);\n        this.context = tempContext;\n\n        context.restore();\n\n        this.resolution = rootResolution;\n        this._projTransform = null;\n\n        this.emit('postrender');\n    }\n\n    /**\n     * sets matrix of context\n     * called only from render() methods\n     * takes care about resolution\n     * @param {PIXI.Matrix} transform - world matrix of current element\n     * @param {boolean} [roundPixels] - whether to round (tx,ty) coords\n     * @param {number} [localResolution] - If specified, used instead of `renderer.resolution` for local scaling\n     */\n    setContextTransform(transform: Matrix, roundPixels?: boolean, localResolution?: number): void\n    {\n        let mat = transform;\n        const proj = this._projTransform;\n        const resolution = this.resolution;\n\n        localResolution = localResolution || resolution;\n\n        if (proj)\n        {\n            mat = tempMatrix;\n            mat.copyFrom(transform);\n            mat.prepend(proj);\n        }\n\n        if (roundPixels)\n        {\n            this.context.setTransform(\n                mat.a * localResolution,\n                mat.b * localResolution,\n                mat.c * localResolution,\n                mat.d * localResolution,\n                (mat.tx * resolution) | 0,\n                (mat.ty * resolution) | 0\n            );\n        }\n        else\n        {\n            this.context.setTransform(\n                mat.a * localResolution,\n                mat.b * localResolution,\n                mat.c * localResolution,\n                mat.d * localResolution,\n                mat.tx * resolution,\n                mat.ty * resolution\n            );\n        }\n    }\n\n    /**\n     * Clear the canvas of renderer.\n     *\n     * @param {string} [clearColor] - Clear the canvas with this color, except the canvas is transparent.\n     */\n    public clear(clearColor: string): void\n    {\n        const context = this.context;\n\n        clearColor = clearColor || this._backgroundColorString;\n\n        if (!this.transparent && clearColor)\n        {\n            context.fillStyle = clearColor;\n            context.fillRect(0, 0, this.width, this.height);\n        }\n        else\n        {\n            context.clearRect(0, 0, this.width, this.height);\n        }\n    }\n\n    /**\n     * Sets the blend mode of the renderer.\n     *\n     * @param {number} blendMode - See {@link PIXI.BLEND_MODES} for valid values.\n     * @param {boolean} [readyForOuterBlend=false] - Some blendModes are dangerous, they affect outer space of sprite.\n     * Pass `true` only if you are ready to use them.\n     */\n    setBlendMode(blendMode: BLEND_MODES, readyForOuterBlend?: boolean): void\n    {\n        const outerBlend = blendMode === BLEND_MODES.SRC_IN\n            || blendMode === BLEND_MODES.SRC_OUT\n            || blendMode === BLEND_MODES.DST_IN\n            || blendMode === BLEND_MODES.DST_ATOP;\n\n        if (!readyForOuterBlend && outerBlend)\n        {\n            blendMode = BLEND_MODES.NORMAL;\n        }\n\n        if (this._activeBlendMode === blendMode)\n        {\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n        this._outerBlend = outerBlend;\n        this.context.globalCompositeOperation = this.blendModes[blendMode];\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    public destroy(removeView?: boolean): void\n    {\n        // call the base destroy\n        super.destroy(removeView);\n\n        this.context = null;\n\n        this.refresh = true;\n\n        this.maskManager.destroy();\n        this.maskManager = null;\n\n        this.smoothProperty = null;\n    }\n\n    /**\n     * Resizes the canvas view to the specified width and height.\n     *\n     * @extends PIXI.AbstractRenderer#resize\n     *\n     * @param {number} screenWidth - the new width of the screen\n     * @param {number} screenHeight - the new height of the screen\n     */\n    public resize(screenWidth: number, screenHeight: number): void\n    {\n        super.resize(screenWidth, screenHeight);\n\n        // reset the scale mode.. oddly this seems to be reset when the canvas is resized.\n        // surely a browser bug?? Let PixiJS fix that for you..\n        if (this.smoothProperty)\n        {\n            this.rootContext[this.smoothProperty] = (settings.SCALE_MODE === SCALE_MODES.LINEAR);\n        }\n    }\n\n    /**\n     * Checks if blend mode has changed.\n     */\n    invalidateBlendMode(): void\n    {\n        this._activeBlendMode = this.blendModes.indexOf(this.context.globalCompositeOperation);\n    }\n\n    static __plugins: IRendererPlugins;\n\n    /**\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n     * by creating a custom build. Consult the README for more information about creating custom\n     * builds and excluding plugins.\n     * @name PIXI.CanvasRenderer#plugins\n     * @type {object}\n     * @readonly\n     * @property {PIXI.AccessibilityManager} accessibility Support tabbing interactive elements.\n     * @property {PIXI.CanvasExtract} extract Extract image data from renderer.\n     * @property {PIXI.InteractionManager} interaction Handles mouse, touch and pointer events.\n     * @property {PIXI.CanvasPrepare} prepare Pre-render display objects.\n     */\n\n    /**\n     * Adds a plugin to the renderer.\n     *\n     * @method\n     * @param {string} pluginName - The name of the plugin.\n     * @param {Function} ctor - The constructor function or class for the plugin.\n     */\n    static registerPlugin(pluginName: string, ctor: ICanvasRendererPluginConstructor): void\n    {\n        CanvasRenderer.__plugins = CanvasRenderer.__plugins || {};\n        CanvasRenderer.__plugins[pluginName] = ctor;\n    }\n}\n","import { BLEND_MODES } from '@pixi/constants';\nimport { canUseNewCanvasBlendModes } from './canUseNewCanvasBlendModes';\n\n/**\n * Maps blend combinations to Canvas.\n *\n * @memberof PIXI\n * @function mapCanvasBlendModesToPixi\n * @private\n * @param {string[]} [array=[]] - The array to output into.\n * @return {string[]} Mapped modes.\n */\nexport function mapCanvasBlendModesToPixi(array: string[] = []): string[]\n{\n    if (canUseNewCanvasBlendModes())\n    {\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'multiply';\n        array[BLEND_MODES.SCREEN] = 'screen';\n        array[BLEND_MODES.OVERLAY] = 'overlay';\n        array[BLEND_MODES.DARKEN] = 'darken';\n        array[BLEND_MODES.LIGHTEN] = 'lighten';\n        array[BLEND_MODES.COLOR_DODGE] = 'color-dodge';\n        array[BLEND_MODES.COLOR_BURN] = 'color-burn';\n        array[BLEND_MODES.HARD_LIGHT] = 'hard-light';\n        array[BLEND_MODES.SOFT_LIGHT] = 'soft-light';\n        array[BLEND_MODES.DIFFERENCE] = 'difference';\n        array[BLEND_MODES.EXCLUSION] = 'exclusion';\n        array[BLEND_MODES.HUE] = 'hue';\n        array[BLEND_MODES.SATURATION] = 'saturate';\n        array[BLEND_MODES.COLOR] = 'color';\n        array[BLEND_MODES.LUMINOSITY] = 'luminosity';\n    }\n    else\n    {\n        // this means that the browser does not support the cool new blend modes in canvas 'cough' ie 'cough'\n        array[BLEND_MODES.NORMAL] = 'source-over';\n        array[BLEND_MODES.ADD] = 'lighter'; // IS THIS OK???\n        array[BLEND_MODES.MULTIPLY] = 'source-over';\n        array[BLEND_MODES.SCREEN] = 'source-over';\n        array[BLEND_MODES.OVERLAY] = 'source-over';\n        array[BLEND_MODES.DARKEN] = 'source-over';\n        array[BLEND_MODES.LIGHTEN] = 'source-over';\n        array[BLEND_MODES.COLOR_DODGE] = 'source-over';\n        array[BLEND_MODES.COLOR_BURN] = 'source-over';\n        array[BLEND_MODES.HARD_LIGHT] = 'source-over';\n        array[BLEND_MODES.SOFT_LIGHT] = 'source-over';\n        array[BLEND_MODES.DIFFERENCE] = 'source-over';\n        array[BLEND_MODES.EXCLUSION] = 'source-over';\n        array[BLEND_MODES.HUE] = 'source-over';\n        array[BLEND_MODES.SATURATION] = 'source-over';\n        array[BLEND_MODES.COLOR] = 'source-over';\n        array[BLEND_MODES.LUMINOSITY] = 'source-over';\n    }\n    // not-premultiplied, only for webgl\n    array[BLEND_MODES.NORMAL_NPM] = array[BLEND_MODES.NORMAL];\n    array[BLEND_MODES.ADD_NPM] = array[BLEND_MODES.ADD];\n    array[BLEND_MODES.SCREEN_NPM] = array[BLEND_MODES.SCREEN];\n\n    // composite operations\n    array[BLEND_MODES.SRC_IN] = 'source-in';\n    array[BLEND_MODES.SRC_OUT] = 'source-out';\n    array[BLEND_MODES.SRC_ATOP] = 'source-atop';\n    array[BLEND_MODES.DST_OVER] = 'destination-over';\n    array[BLEND_MODES.DST_IN] = 'destination-in';\n    array[BLEND_MODES.DST_OUT] = 'destination-out';\n    array[BLEND_MODES.DST_ATOP] = 'destination-atop';\n    array[BLEND_MODES.XOR] = 'xor';\n\n    // SUBTRACT from flash, does not exist in canvas\n    array[BLEND_MODES.SUBTRACT] = 'source-over';\n\n    return array;\n}\n","import { hex2rgb, rgb2hex } from '@pixi/utils';\nimport { canUseNewCanvasBlendModes } from './utils/canUseNewCanvasBlendModes';\n\nimport type { Texture } from '@pixi/core';\n\n/**\n * Utility methods for Sprite/Texture tinting.\n *\n * Tinting with the CanvasRenderer involves creating a new canvas to use as a texture,\n * so be aware of the performance implications.\n *\n * @namespace PIXI.canvasUtils\n * @memberof PIXI\n */\nexport const canvasUtils = {\n    canvas: null as HTMLCanvasElement,\n\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Sprite} sprite - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @return {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedCanvas: (sprite: { texture: Texture }, color: number): HTMLCanvasElement | HTMLImageElement =>\n    {\n        const texture = sprite.texture;\n\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        texture.tintCache = texture.tintCache || {};\n\n        const cachedCanvas = texture.tintCache[stringColor];\n\n        let canvas: HTMLCanvasElement;\n\n        if (cachedCanvas)\n        {\n            if (cachedCanvas.tintId === texture._updateID)\n            {\n                return texture.tintCache[stringColor];\n            }\n\n            canvas = texture.tintCache[stringColor] as HTMLCanvasElement;\n        }\n        else\n        {\n            canvas = document.createElement('canvas');\n        }\n\n        canvasUtils.tintMethod(texture, color, canvas);\n\n        canvas.tintId = texture._updateID;\n\n        if (canvasUtils.convertTintToImage)\n        {\n            // is this better?\n            const tintImage = new Image();\n\n            tintImage.src = (canvas as HTMLCanvasElement).toDataURL();\n\n            texture.tintCache[stringColor] = tintImage;\n        }\n        else\n        {\n            texture.tintCache[stringColor] = canvas;\n        }\n\n        return canvas;\n    },\n\n    /**\n     * Basically this method just needs a sprite and a color and tints the sprite with the given color.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the sprite to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @return {HTMLCanvasElement} The tinted canvas\n     */\n    getTintedPattern: (texture: Texture, color: number): CanvasPattern =>\n    {\n        color = canvasUtils.roundColor(color);\n\n        const stringColor = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        texture.patternCache = texture.patternCache || {};\n\n        let pattern = texture.patternCache[stringColor];\n\n        if (pattern && pattern.tintId === texture._updateID)\n        {\n            return pattern;\n        }\n        if (!canvasUtils.canvas)\n        {\n            canvasUtils.canvas = document.createElement('canvas');\n        }\n        canvasUtils.tintMethod(texture, color, canvasUtils.canvas);\n        pattern = canvasUtils.canvas.getContext('2d').createPattern(canvasUtils.canvas, 'repeat');\n        pattern.tintId = texture._updateID;\n        texture.patternCache[stringColor] = pattern;\n\n        return pattern;\n    },\n\n    /**\n     * Tint a texture using the 'multiply' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithMultiply: (texture: Texture, color: number, canvas: HTMLCanvasElement): void =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'multiply';\n\n        const source = texture.baseTexture.getDrawableSource();\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        context.globalCompositeOperation = 'destination-atop';\n\n        context.drawImage(\n            source,\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n    },\n\n    /**\n     * Tint a texture using the 'overlay' operation.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithOverlay: (texture: Texture, color: number, canvas: HTMLCanvasElement): void =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.fillStyle = `#${(`00000${(color | 0).toString(16)}`).substr(-6)}`;\n        context.fillRect(0, 0, crop.width, crop.height);\n\n        context.globalCompositeOperation = 'destination-atop';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n\n        // context.globalCompositeOperation = 'copy';\n        context.restore();\n    },\n\n    /**\n     * Tint a texture pixel per pixel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {PIXI.Texture} texture - the texture to tint\n     * @param {number} color - the color to use to tint the sprite with\n     * @param {HTMLCanvasElement} canvas - the current canvas\n     */\n    tintWithPerPixel: (texture: Texture, color: number, canvas: HTMLCanvasElement): void =>\n    {\n        const context = canvas.getContext('2d');\n        const crop = texture._frame.clone();\n        const resolution = texture.baseTexture.resolution;\n\n        crop.x *= resolution;\n        crop.y *= resolution;\n        crop.width *= resolution;\n        crop.height *= resolution;\n\n        canvas.width = Math.ceil(crop.width);\n        canvas.height = Math.ceil(crop.height);\n\n        context.save();\n        context.globalCompositeOperation = 'copy';\n        context.drawImage(\n            texture.baseTexture.getDrawableSource(),\n            crop.x,\n            crop.y,\n            crop.width,\n            crop.height,\n            0,\n            0,\n            crop.width,\n            crop.height\n        );\n        context.restore();\n\n        const rgbValues = hex2rgb(color);\n        const r = rgbValues[0];\n        const g = rgbValues[1];\n        const b = rgbValues[2];\n\n        const pixelData = context.getImageData(0, 0, crop.width, crop.height);\n\n        const pixels = pixelData.data;\n\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            pixels[i + 0] *= r;\n            pixels[i + 1] *= g;\n            pixels[i + 2] *= b;\n        }\n\n        context.putImageData(pixelData, 0, 0);\n    },\n\n    /**\n     * Rounds the specified color according to the canvasUtils.cacheStepsPerColorChannel.\n     *\n     * @memberof PIXI.canvasUtils\n     * @param {number} color - the color to round, should be a hex color\n     * @return {number} The rounded color.\n     */\n    roundColor: (color: number): number =>\n    {\n        const step = canvasUtils.cacheStepsPerColorChannel;\n\n        const rgbValues = hex2rgb(color);\n\n        rgbValues[0] = Math.min(255, (rgbValues[0] / step) * step);\n        rgbValues[1] = Math.min(255, (rgbValues[1] / step) * step);\n        rgbValues[2] = Math.min(255, (rgbValues[2] / step) * step);\n\n        return rgb2hex(rgbValues);\n    },\n\n    /**\n     * Number of steps which will be used as a cap when rounding colors.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {number}\n     */\n    cacheStepsPerColorChannel: 8,\n\n    /**\n     * Tint cache boolean flag.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    convertTintToImage: false,\n\n    /**\n     * Whether or not the Canvas BlendModes are supported, consequently the ability to tint using the multiply method.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {boolean}\n     */\n    canUseMultiply: canUseNewCanvasBlendModes(),\n\n    /**\n     * The tinting method that will be used.\n     *\n     * @memberof PIXI.canvasUtils\n     * @type {Function}\n     */\n    tintMethod: null as (texture: Texture, color: number, canvas: HTMLCanvasElement) => void,\n};\n\ncanvasUtils.tintMethod = canvasUtils.canUseMultiply ? canvasUtils.tintWithMultiply : canvasUtils.tintWithPerPixel;\n","import { Renderer } from '@pixi/core';\nimport { CanvasRenderer } from './CanvasRenderer';\n\nimport type { AbstractRenderer, IRendererOptionsAuto } from '@pixi/core';\n\n// Reference to Renderer.create static function\nconst parentCreate = Renderer.create;\n\n/**\n * Override the Renderer.create to fallback to use CanvasRenderer.\n * Also supports forceCanvas option with Application or autoDetectRenderer.\n * @private\n */\nRenderer.create = function create(options: IRendererOptionsAuto): AbstractRenderer\n{\n    const forceCanvas = options && options.forceCanvas;\n\n    if (!forceCanvas)\n    {\n        try\n        {\n            return parentCreate(options);\n        }\n        catch (err)\n        {\n            // swallow WebGL-unsupported error\n        }\n    }\n\n    return new CanvasRenderer(options);\n};\n","import { BaseTexture, BaseRenderTexture, Texture } from '@pixi/core';\n\n/**\n * Get the drawable source, such as HTMLCanvasElement or HTMLImageElement suitable\n * for rendering with CanvasRenderer. Provided by **@pixi/canvas-renderer** package.\n * @method getDrawableSource\n * @memberof PIXI.BaseTexture#\n * @return {PIXI.ICanvasImageSource} Source to render with CanvasRenderer\n */\nBaseTexture.prototype.getDrawableSource = function getDrawableSource(): CanvasImageSource\n{\n    const resource = this.resource as any;\n\n    return resource ? (resource.bitmap || resource.source) : null;\n};\n\n/**\n * A reference to the canvas render target (we only need one as this can be shared across renderers)\n *\n * @protected\n * @member {PIXI.utils.CanvasRenderTarget} _canvasRenderTarget\n * @memberof PIXI.BaseRenderTexture#\n */\n\nBaseRenderTexture.prototype._canvasRenderTarget = null;\n\nTexture.prototype.patternCache = null;\n\nTexture.prototype.tintCache = null;\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","renderer","this","_foundShapes","CanvasMaskManager","maskData","maskObject","context","save","foundShapes","recursiveFindShapes","length","beginPath","i","shape","transform","worldTransform","setContextTransform","renderGraphicsShape","clip","container","out","geometry","graphicsData","push","children","graphics","finishPoly","len","type","SHAPES","POLY","points","moveTo","j","lineTo","closePath","RECT","rect","x","y","width","height","CIRC","arc","radius","Math","PI","ELIP","w","h","ox","oy","xe","ye","xm","ym","bezierCurveTo","RREC","rx","ry","maxRadius","min","quadraticCurveTo","restore","invalidateBlendMode","createColoredCanvas","color","canvas","document","createElement","getContext","fillStyle","fillRect","canUseNewCanvasBlendModes","magenta","yellow","globalCompositeOperation","drawImage","imageData","getImageData","data","tempMatrix","Matrix","options","array","_super","RENDERER_TYPE","CANVAS","_this","rootContext","view","alpha","transparent","refresh","maskManager","smoothProperty","imageSmoothingEnabled","rc","webkitImageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","msImageSmoothingEnabled","initPlugins","CanvasRenderer","__plugins","blendModes","BLEND_MODES","NORMAL","ADD","MULTIPLY","SCREEN","OVERLAY","DARKEN","LIGHTEN","COLOR_DODGE","COLOR_BURN","HARD_LIGHT","SOFT_LIGHT","DIFFERENCE","EXCLUSION","HUE","SATURATION","COLOR","LUMINOSITY","NORMAL_NPM","ADD_NPM","SCREEN_NPM","SRC_IN","SRC_OUT","SRC_ATOP","DST_OVER","DST_IN","DST_OUT","DST_ATOP","XOR","SUBTRACT","_activeBlendMode","_outerBlend","_projTransform","renderingToScreen","sayHello","resize","__","constructor","prototype","create","__extends","displayObject","renderTexture","clear","skipUpdateTransform","emit","rootResolution","resolution","castToBaseTexture","_canvasRenderTarget","CanvasRenderTarget","resource","resources","CanvasResource","valid","_lastObjectRendered","cacheParent","enableTempParent","updateTransform","disableTempParent","setTransform","globalAlpha","undefined","clearBeforeRender","clearRect","_backgroundColorString","clearColor","hex2string","rgb2hex","realWidth","realHeight","tempContext","renderCanvas","roundPixels","localResolution","mat","proj","copyFrom","prepend","a","c","tx","ty","blendMode","readyForOuterBlend","outerBlend","removeView","destroy","screenWidth","screenHeight","settings","SCALE_MODE","SCALE_MODES","LINEAR","indexOf","pluginName","ctor","AbstractRenderer","canvasUtils","getTintedCanvas","sprite","texture","stringColor","roundColor","toString","substr","tintCache","cachedCanvas","tintId","_updateID","tintMethod","convertTintToImage","tintImage","Image","src","toDataURL","getTintedPattern","patternCache","pattern","createPattern","tintWithMultiply","crop","_frame","clone","baseTexture","ceil","source","getDrawableSource","tintWithOverlay","tintWithPerPixel","rgbValues","hex2rgb","r","g","pixelData","pixels","putImageData","step","cacheStepsPerColorChannel","canUseMultiply","parentCreate","Renderer","forceCanvas","err","bitmap"],"mappings":";;;;;;;qFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,ICL5B,iBAQI,WAAYO,GAERC,KAAKD,SAAWA,EAEhBC,KAAKC,aAAe,GA2L5B,OAnLIC,qBAAA,SAASC,GAEL,IAAMJ,EAAWC,KAAKD,SAChBK,EAAeD,EAAsBC,YAAcD,EAEzDJ,EAASM,QAAQC,OAKjB,IAAMC,EAAcP,KAAKC,aAGzB,GADAD,KAAKQ,oBAAoBJ,EAAYG,GACjCA,EAAYE,OAAS,EACzB,CACY,IAAAJ,EAAYN,UAEpBM,EAAQK,YAER,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAYE,OAAQE,IACxC,CACI,IAAMC,EAAQL,EAAYI,GACpBE,EAAYD,EAAMC,UAAUC,eAElCd,KAAKD,SAASgB,oBAAoBF,GAElCb,KAAKgB,oBAAoBJ,GAG7BL,EAAYE,OAAS,EACrBJ,EAAQY,SAUhBf,gCAAA,SAAoBgB,EAAsBC,GAEjCD,EAAuBE,UAAaF,EAAuBE,SAASC,cAErEF,EAAIG,KAAKJ,GAGL,IAAAK,EAAaL,WAErB,GAAIK,EAEA,IAAK,IAAIZ,EAAI,EAAGA,EAAIY,EAASd,OAAQE,IAEjCX,KAAKQ,oBAAoBe,EAASZ,GAAiBQ,IAU/DjB,gCAAA,SAAoBsB,GAEhBA,EAASC,aAET,IAAMpB,EAAUL,KAAKD,SAASM,QACxBgB,EAAeG,EAASJ,SAASC,aACjCK,EAAML,EAAaZ,OAEzB,GAAY,IAARiB,EAKJ,IAAK,IAAIf,EAAI,EAAGA,EAAIe,EAAKf,IACzB,CACI,IACMC,EADOS,EAAaV,GACPC,MAEnB,GAAIA,EAAMe,OAASC,SAAOC,KAC1B,CACI,IAAMC,EAASlB,EAAMkB,OAErBzB,EAAQ0B,OAAOD,EAAO,GAAIA,EAAO,IAEjC,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAOrB,OAAS,EAAGuB,IAEnC3B,EAAQ4B,OAAOH,EAAW,EAAJE,GAAQF,EAAY,EAAJE,EAAS,IAI/CF,EAAO,KAAOA,EAAOA,EAAOrB,OAAS,IAAMqB,EAAO,KAAOA,EAAOA,EAAOrB,OAAS,IAEhFJ,EAAQ6B,iBAGX,GAAItB,EAAMe,OAASC,SAAOO,KAE3B9B,EAAQ+B,KAAKxB,EAAMyB,EAAGzB,EAAM0B,EAAG1B,EAAM2B,MAAO3B,EAAM4B,QAClDnC,EAAQ6B,iBAEP,GAAItB,EAAMe,OAASC,SAAOa,KAG3BpC,EAAQqC,IAAI9B,EAAMyB,EAAGzB,EAAM0B,EAAG1B,EAAM+B,OAAQ,EAAG,EAAIC,KAAKC,IACxDxC,EAAQ6B,iBAEP,GAAItB,EAAMe,OAASC,SAAOkB,KAC/B,CAGI,IAAMC,EAAkB,EAAdnC,EAAM2B,MACVS,EAAmB,EAAfpC,EAAM4B,OAEVH,EAAIzB,EAAMyB,EAAKU,EAAI,EACnBT,EAAI1B,EAAM0B,EAAKU,EAAI,EAGnBC,EAAMF,EAAI,EADF,SAERG,EAAMF,EAAI,EAFF,SAGRG,EAAKd,EAAIU,EACTK,EAAKd,EAAIU,EACTK,EAAKhB,EAAKU,EAAI,EACdO,EAAKhB,EAAKU,EAAI,EAEpB3C,EAAQ0B,OAAOM,EAAGiB,GAClBjD,EAAQkD,cAAclB,EAAGiB,EAAKJ,EAAIG,EAAKJ,EAAIX,EAAGe,EAAIf,GAClDjC,EAAQkD,cAAcF,EAAKJ,EAAIX,EAAGa,EAAIG,EAAKJ,EAAIC,EAAIG,GACnDjD,EAAQkD,cAAcJ,EAAIG,EAAKJ,EAAIG,EAAKJ,EAAIG,EAAIC,EAAID,GACpD/C,EAAQkD,cAAcF,EAAKJ,EAAIG,EAAIf,EAAGiB,EAAKJ,EAAIb,EAAGiB,GAClDjD,EAAQ6B,iBAEP,GAAItB,EAAMe,OAASC,SAAO4B,KAC/B,CACI,IAAMC,EAAK7C,EAAMyB,EACXqB,EAAK9C,EAAM0B,EACXC,EAAQ3B,EAAM2B,MACdC,EAAS5B,EAAM4B,OACjBG,EAAS/B,EAAM+B,OAEbgB,EAAYf,KAAKgB,IAAIrB,EAAOC,GAAU,EAAI,EAEhDG,EAASA,EAASgB,EAAYA,EAAYhB,EAE1CtC,EAAQ0B,OAAO0B,EAAIC,EAAKf,GACxBtC,EAAQ4B,OAAOwB,EAAIC,EAAKlB,EAASG,GACjCtC,EAAQwD,iBAAiBJ,EAAIC,EAAKlB,EAAQiB,EAAKd,EAAQe,EAAKlB,GAC5DnC,EAAQ4B,OAAOwB,EAAKlB,EAAQI,EAAQe,EAAKlB,GACzCnC,EAAQwD,iBAAiBJ,EAAKlB,EAAOmB,EAAKlB,EAAQiB,EAAKlB,EAAOmB,EAAKlB,EAASG,GAC5EtC,EAAQ4B,OAAOwB,EAAKlB,EAAOmB,EAAKf,GAChCtC,EAAQwD,iBAAiBJ,EAAKlB,EAAOmB,EAAID,EAAKlB,EAAQI,EAAQe,GAC9DrD,EAAQ4B,OAAOwB,EAAKd,EAAQe,GAC5BrD,EAAQwD,iBAAiBJ,EAAIC,EAAID,EAAIC,EAAKf,GAC1CtC,EAAQ6B,eAUpBhC,oBAAA,SAAQH,GAEJA,EAASM,QAAQyD,UACjB/D,EAASgE,uBAON7D,oBAAP,kBC3MJ,SAAS8D,EAAoBC,GAEzB,IAAMC,EAASC,SAASC,cAAc,UAEtCF,EAAO3B,MAAQ,EACf2B,EAAO1B,OAAS,EAEhB,IAAMnC,EAAU6D,EAAOG,WAAW,MAKlC,OAHAhE,EAAQiE,UAAYL,EACpB5D,EAAQkE,SAAS,EAAG,EAAG,EAAG,GAEnBL,WASKM,IAEZ,GAAwB,oBAAbL,SAEP,OAAO,EAGX,IAAMM,EAAUT,EAAoB,WAC9BU,EAASV,EAAoB,WAE7BE,EAASC,SAASC,cAAc,UAEtCF,EAAO3B,MAAQ,EACf2B,EAAO1B,OAAS,EAEhB,IAAMnC,EAAU6D,EAAOG,WAAW,MAElChE,EAAQsE,yBAA2B,WACnCtE,EAAQuE,UAAUH,EAAS,EAAG,GAC9BpE,EAAQuE,UAAUF,EAAQ,EAAG,GAE7B,IAAMG,EAAYxE,EAAQyE,aAAa,EAAG,EAAG,EAAG,GAEhD,IAAKD,EAED,OAAO,EAGX,IAAME,EAAOF,EAAUE,KAEvB,OAAoB,MAAZA,EAAK,IAA0B,IAAZA,EAAK,IAAwB,IAAZA,EAAK,GC1CrD,IAAMC,EAAa,IAAIC,uBA6EnB,WAAYC,GAAZ,ICjFsCC,IDmFlCC,YAAMC,gBAAcC,OAAQJ,SAsC5B,GA/BAK,EAAKC,YAAcD,EAAKE,KAAKpB,WAAW,KAAM,CAAEqB,MAAOH,EAAKI,cAQ5DJ,EAAKlF,QAAUkF,EAAKC,YAOpBD,EAAKK,SAAU,EAOfL,EAAKM,YAAc,IAAI3F,EAAkBqF,GAOzCA,EAAKO,eAAiB,yBAEjBP,EAAKC,YAAYO,sBACtB,CACI,IAAMC,EAAKT,EAAKC,YAEZQ,EAAGC,4BAEHV,EAAKO,eAAiB,8BAEjBE,EAAGE,yBAERX,EAAKO,eAAiB,2BAEjBE,EAAGG,uBAERZ,EAAKO,eAAiB,yBAEjBE,EAAGI,0BAERb,EAAKO,eAAiB,kCAI9BP,EAAKc,YAAYC,EAAeC,WAOhChB,EAAKiB,yBCtJ6BrB,MAElCX,KAEAW,EAAMsB,cAAYC,QAAU,cAC5BvB,EAAMsB,cAAYE,KAAO,UACzBxB,EAAMsB,cAAYG,UAAY,WAC9BzB,EAAMsB,cAAYI,QAAU,SAC5B1B,EAAMsB,cAAYK,SAAW,UAC7B3B,EAAMsB,cAAYM,QAAU,SAC5B5B,EAAMsB,cAAYO,SAAW,UAC7B7B,EAAMsB,cAAYQ,aAAe,cACjC9B,EAAMsB,cAAYS,YAAc,aAChC/B,EAAMsB,cAAYU,YAAc,aAChChC,EAAMsB,cAAYW,YAAc,aAChCjC,EAAMsB,cAAYY,YAAc,aAChClC,EAAMsB,cAAYa,WAAa,YAC/BnC,EAAMsB,cAAYc,KAAO,MACzBpC,EAAMsB,cAAYe,YAAc,WAChCrC,EAAMsB,cAAYgB,OAAS,QAC3BtC,EAAMsB,cAAYiB,YAAc,eAKhCvC,EAAMsB,cAAYC,QAAU,cAC5BvB,EAAMsB,cAAYE,KAAO,UACzBxB,EAAMsB,cAAYG,UAAY,cAC9BzB,EAAMsB,cAAYI,QAAU,cAC5B1B,EAAMsB,cAAYK,SAAW,cAC7B3B,EAAMsB,cAAYM,QAAU,cAC5B5B,EAAMsB,cAAYO,SAAW,cAC7B7B,EAAMsB,cAAYQ,aAAe,cACjC9B,EAAMsB,cAAYS,YAAc,cAChC/B,EAAMsB,cAAYU,YAAc,cAChChC,EAAMsB,cAAYW,YAAc,cAChCjC,EAAMsB,cAAYY,YAAc,cAChClC,EAAMsB,cAAYa,WAAa,cAC/BnC,EAAMsB,cAAYc,KAAO,cACzBpC,EAAMsB,cAAYe,YAAc,cAChCrC,EAAMsB,cAAYgB,OAAS,cAC3BtC,EAAMsB,cAAYiB,YAAc,eAGpCvC,EAAMsB,cAAYkB,YAAcxC,EAAMsB,cAAYC,QAClDvB,EAAMsB,cAAYmB,SAAWzC,EAAMsB,cAAYE,KAC/CxB,EAAMsB,cAAYoB,YAAc1C,EAAMsB,cAAYI,QAGlD1B,EAAMsB,cAAYqB,QAAU,YAC5B3C,EAAMsB,cAAYsB,SAAW,aAC7B5C,EAAMsB,cAAYuB,UAAY,cAC9B7C,EAAMsB,cAAYwB,UAAY,mBAC9B9C,EAAMsB,cAAYyB,QAAU,iBAC5B/C,EAAMsB,cAAY0B,SAAW,kBAC7BhD,EAAMsB,cAAY2B,UAAY,mBAC9BjD,EAAMsB,cAAY4B,KAAO,MAGzBlD,EAAMsB,cAAY6B,UAAY,cAEvBnD,GD0FHI,EAAKgD,iBAAmB,KACxBhD,EAAKiD,aAAc,EAOnBjD,EAAKkD,eAAiB,KAEtBlD,EAAKmD,mBAAoB,EAEzBC,WAAS,UAcTpD,EAAKqD,OAAOrD,EAAKL,QAAQ3C,MAAOgD,EAAKL,QAAQ1C,UAqSrD,OH3cO,SAAmBjD,EAAGC,GAEzB,SAASqJ,IAAO7I,KAAK8I,YAAcvJ,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEwJ,UAAkB,OAANvJ,EAAaC,OAAOuJ,OAAOxJ,IAAMqJ,EAAGE,UAAYvJ,EAAEuJ,UAAW,IAAIF,GGkC/CI,MA8IzB3C,mBAAP,SAAc4C,EAA8BC,EACxCC,EAAiBvI,EAAoBwI,GAErC,GAAKrJ,KAAKyF,KAAV,CAMAzF,KAAK0I,mBAAqBS,EAE1BnJ,KAAKsJ,KAAK,aAEV,IAAMC,EAAiBvJ,KAAKwJ,WAExBL,IAEAA,EAAgBA,EAAcM,qBAEXC,sBAEfP,EAAcO,oBAAsB,IAAIC,qBACpCR,EAAc5G,MACd4G,EAAc3G,OACd2G,EAAcK,YAElBL,EAAcS,SAAW,IAAIC,YAAUC,eAAeX,EAAcO,oBAAoBxF,QACxFiF,EAAcY,OAAQ,GAG1B/J,KAAKK,QAAU8I,EAAcO,oBAAoBrJ,QACjDL,KAAKwJ,WAAaL,EAAcO,oBAAoBF,YAIpDxJ,KAAKK,QAAUL,KAAKwF,YAGxB,IAAMnF,EAAUL,KAAKK,QASrB,GAPAL,KAAKyI,eAAiB5H,GAAa,KAE9BsI,IAEDnJ,KAAKgK,oBAAsBd,IAG1BG,EACL,CAEI,IAAMY,EAAcf,EAAcgB,mBAElChB,EAAciB,kBACdjB,EAAckB,kBAAkBH,GAUpC,GAPA5J,EAAQC,OACRD,EAAQgK,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,GACpChK,EAAQiK,YAAc,EACtBtK,KAAKuI,iBAAmB9B,cAAYC,OACpC1G,KAAKwI,aAAc,EACnBnI,EAAQsE,yBAA2B3E,KAAKwG,WAAWC,cAAYC,aAEjD6D,IAAVnB,EAAsBA,EAAQpJ,KAAKwK,kBAEnC,GAAIxK,KAAK0I,kBAED1I,KAAK2F,YAELtF,EAAQoK,UAAU,EAAG,EAAGzK,KAAKuC,MAAOvC,KAAKwC,SAIzCnC,EAAQiE,UAAYtE,KAAK0K,uBACzBrK,EAAQkE,SAAS,EAAG,EAAGvE,KAAKuC,MAAOvC,KAAKwC,aAIhD,EACI2G,EAAiBA,GACHO,oBAAoBN,QAElC,IAAMuB,EAAaxB,EAAcwB,WAE7BA,EAAW,GAAK,IAEhBtK,EAAQiE,UAAYsG,aAAWC,UAAQF,IACvCtK,EAAQkE,SAAS,EAAG,EAAG4E,EAAc2B,UAAW3B,EAAc4B,aAM1E,IAAMC,EAAchL,KAAKK,QAEzBL,KAAKK,QAAUA,EACf6I,EAAc+B,aAAajL,MAC3BA,KAAKK,QAAU2K,EAEf3K,EAAQyD,UAER9D,KAAKwJ,WAAaD,EAClBvJ,KAAKyI,eAAiB,KAEtBzI,KAAKsJ,KAAK,gBAWdhD,gCAAA,SAAoBzF,EAAmBqK,EAAuBC,GAE1D,IAAIC,EAAMvK,EACJwK,EAAOrL,KAAKyI,eACZe,EAAaxJ,KAAKwJ,WAExB2B,EAAkBA,GAAmB3B,EAEjC6B,KAEAD,EAAMpG,GACFsG,SAASzK,GACbuK,EAAIG,QAAQF,IAGZH,EAEAlL,KAAKK,QAAQgK,aACTe,EAAII,EAAIL,EACRC,EAAI5L,EAAI2L,EACRC,EAAIK,EAAIN,EACRC,EAAI7L,EAAI4L,EACPC,EAAIM,GAAKlC,EAAc,EACvB4B,EAAIO,GAAKnC,EAAc,GAK5BxJ,KAAKK,QAAQgK,aACTe,EAAII,EAAIL,EACRC,EAAI5L,EAAI2L,EACRC,EAAIK,EAAIN,EACRC,EAAI7L,EAAI4L,EACRC,EAAIM,GAAKlC,EACT4B,EAAIO,GAAKnC,IAUdlD,kBAAP,SAAaqE,GAET,IAAMtK,EAAUL,KAAKK,QAErBsK,EAAaA,GAAc3K,KAAK0K,wBAE3B1K,KAAK2F,aAAegF,GAErBtK,EAAQiE,UAAYqG,EACpBtK,EAAQkE,SAAS,EAAG,EAAGvE,KAAKuC,MAAOvC,KAAKwC,SAIxCnC,EAAQoK,UAAU,EAAG,EAAGzK,KAAKuC,MAAOvC,KAAKwC,SAWjD8D,yBAAA,SAAasF,EAAwBC,GAEjC,IAAMC,EAAaF,IAAcnF,cAAYqB,QACtC8D,IAAcnF,cAAYsB,SAC1B6D,IAAcnF,cAAYyB,QAC1B0D,IAAcnF,cAAY2B,UAE5ByD,GAAsBC,IAEvBF,EAAYnF,cAAYC,QAGxB1G,KAAKuI,mBAAqBqD,IAK9B5L,KAAKuI,iBAAmBqD,EACxB5L,KAAKwI,YAAcsD,EACnB9L,KAAKK,QAAQsE,yBAA2B3E,KAAKwG,WAAWoF,KAQrDtF,oBAAP,SAAeyF,GAGX3G,YAAM4G,kBAAQD,GAEd/L,KAAKK,QAAU,KAEfL,KAAK4F,SAAU,EAEf5F,KAAK6F,YAAYmG,UACjBhM,KAAK6F,YAAc,KAEnB7F,KAAK8F,eAAiB,MAWnBQ,mBAAP,SAAc2F,EAAqBC,GAE/B9G,YAAMwD,iBAAOqD,EAAaC,GAItBlM,KAAK8F,iBAEL9F,KAAKwF,YAAYxF,KAAK8F,gBAAmBqG,WAASC,aAAeC,cAAYC,SAOrFhG,gCAAA,WAEItG,KAAKuI,iBAAmBvI,KAAKwG,WAAW+F,QAAQvM,KAAKK,QAAQsE,2BAyB1D2B,iBAAP,SAAsBkG,EAAoBC,GAEtCnG,EAAeC,UAAYD,EAAeC,WAAa,GACvDD,EAAeC,UAAUiG,GAAcC,MApaXC,oBE9CvBC,EAAc,CACvBzI,OAAQ,KAUR0I,gBAAiB,SAACC,EAA8B5I,GAE5C,IAAM6I,EAAUD,EAAOC,QAIjBC,EAAc,KAAK,SAAiB,GAF1C9I,EAAQ0I,EAAYK,WAAW/I,KAEcgJ,SAAS,KAAOC,QAAQ,GAErEJ,EAAQK,UAAYL,EAAQK,WAAa,GAEzC,IAEIjJ,EAFEkJ,EAAeN,EAAQK,UAAUJ,GAIvC,GAAIK,EACJ,CACI,GAAIA,EAAaC,SAAWP,EAAQQ,UAEhC,OAAOR,EAAQK,UAAUJ,GAG7B7I,EAAS4I,EAAQK,UAAUJ,QAI3B7I,EAASC,SAASC,cAAc,UAOpC,GAJAuI,EAAYY,WAAWT,EAAS7I,EAAOC,GAEvCA,EAAOmJ,OAASP,EAAQQ,UAEpBX,EAAYa,mBAChB,CAEI,IAAMC,EAAY,IAAIC,MAEtBD,EAAUE,IAAOzJ,EAA6B0J,YAE9Cd,EAAQK,UAAUJ,GAAeU,OAIjCX,EAAQK,UAAUJ,GAAe7I,EAGrC,OAAOA,GAWX2J,iBAAkB,SAACf,EAAkB7I,GAIjC,IAAM8I,EAAc,KAAK,SAAiB,GAF1C9I,EAAQ0I,EAAYK,WAAW/I,KAEcgJ,SAAS,KAAOC,QAAQ,GAErEJ,EAAQgB,aAAehB,EAAQgB,cAAgB,GAE/C,IAAIC,EAAUjB,EAAQgB,aAAaf,GAEnC,OAAIgB,GAAWA,EAAQV,SAAWP,EAAQQ,UAE/BS,GAENpB,EAAYzI,SAEbyI,EAAYzI,OAASC,SAASC,cAAc,WAEhDuI,EAAYY,WAAWT,EAAS7I,EAAO0I,EAAYzI,SACnD6J,EAAUpB,EAAYzI,OAAOG,WAAW,MAAM2J,cAAcrB,EAAYzI,OAAQ,WACxEmJ,OAASP,EAAQQ,UACzBR,EAAQgB,aAAaf,GAAegB,EAE7BA,IAWXE,iBAAkB,SAACnB,EAAkB7I,EAAeC,GAEhD,IAAM7D,EAAU6D,EAAOG,WAAW,MAC5B6J,EAAOpB,EAAQqB,OAAOC,QACtB5E,EAAasD,EAAQuB,YAAY7E,WAEvC0E,EAAK7L,GAAKmH,EACV0E,EAAK5L,GAAKkH,EACV0E,EAAK3L,OAASiH,EACd0E,EAAK1L,QAAUgH,EAEftF,EAAO3B,MAAQK,KAAK0L,KAAKJ,EAAK3L,OAC9B2B,EAAO1B,OAASI,KAAK0L,KAAKJ,EAAK1L,QAE/BnC,EAAQC,OACRD,EAAQiE,UAAY,KAAK,SAAiB,EAARL,GAAWgJ,SAAS,KAAOC,QAAQ,GAErE7M,EAAQkE,SAAS,EAAG,EAAG2J,EAAK3L,MAAO2L,EAAK1L,QAExCnC,EAAQsE,yBAA2B,WAEnC,IAAM4J,EAASzB,EAAQuB,YAAYG,oBAEnCnO,EAAQuE,UACJ2J,EACAL,EAAK7L,EACL6L,EAAK5L,EACL4L,EAAK3L,MACL2L,EAAK1L,OACL,EACA,EACA0L,EAAK3L,MACL2L,EAAK1L,QAGTnC,EAAQsE,yBAA2B,mBAEnCtE,EAAQuE,UACJ2J,EACAL,EAAK7L,EACL6L,EAAK5L,EACL4L,EAAK3L,MACL2L,EAAK1L,OACL,EACA,EACA0L,EAAK3L,MACL2L,EAAK1L,QAETnC,EAAQyD,WAWZ2K,gBAAiB,SAAC3B,EAAkB7I,EAAeC,GAE/C,IAAM7D,EAAU6D,EAAOG,WAAW,MAC5B6J,EAAOpB,EAAQqB,OAAOC,QACtB5E,EAAasD,EAAQuB,YAAY7E,WAEvC0E,EAAK7L,GAAKmH,EACV0E,EAAK5L,GAAKkH,EACV0E,EAAK3L,OAASiH,EACd0E,EAAK1L,QAAUgH,EAEftF,EAAO3B,MAAQK,KAAK0L,KAAKJ,EAAK3L,OAC9B2B,EAAO1B,OAASI,KAAK0L,KAAKJ,EAAK1L,QAE/BnC,EAAQC,OACRD,EAAQsE,yBAA2B,OACnCtE,EAAQiE,UAAY,KAAK,SAAiB,EAARL,GAAWgJ,SAAS,KAAOC,QAAQ,GACrE7M,EAAQkE,SAAS,EAAG,EAAG2J,EAAK3L,MAAO2L,EAAK1L,QAExCnC,EAAQsE,yBAA2B,mBACnCtE,EAAQuE,UACJkI,EAAQuB,YAAYG,oBACpBN,EAAK7L,EACL6L,EAAK5L,EACL4L,EAAK3L,MACL2L,EAAK1L,OACL,EACA,EACA0L,EAAK3L,MACL2L,EAAK1L,QAITnC,EAAQyD,WAWZ4K,iBAAkB,SAAC5B,EAAkB7I,EAAeC,GAEhD,IAAM7D,EAAU6D,EAAOG,WAAW,MAC5B6J,EAAOpB,EAAQqB,OAAOC,QACtB5E,EAAasD,EAAQuB,YAAY7E,WAEvC0E,EAAK7L,GAAKmH,EACV0E,EAAK5L,GAAKkH,EACV0E,EAAK3L,OAASiH,EACd0E,EAAK1L,QAAUgH,EAEftF,EAAO3B,MAAQK,KAAK0L,KAAKJ,EAAK3L,OAC9B2B,EAAO1B,OAASI,KAAK0L,KAAKJ,EAAK1L,QAE/BnC,EAAQC,OACRD,EAAQsE,yBAA2B,OACnCtE,EAAQuE,UACJkI,EAAQuB,YAAYG,oBACpBN,EAAK7L,EACL6L,EAAK5L,EACL4L,EAAK3L,MACL2L,EAAK1L,OACL,EACA,EACA0L,EAAK3L,MACL2L,EAAK1L,QAETnC,EAAQyD,UAWR,IATA,IAAM6K,EAAYC,UAAQ3K,GACpB4K,EAAIF,EAAU,GACdG,EAAIH,EAAU,GACdnP,EAAImP,EAAU,GAEdI,EAAY1O,EAAQyE,aAAa,EAAG,EAAGoJ,EAAK3L,MAAO2L,EAAK1L,QAExDwM,EAASD,EAAUhK,KAEhBpE,EAAI,EAAGA,EAAIqO,EAAOvO,OAAQE,GAAK,EAEpCqO,EAAOrO,EAAI,IAAMkO,EACjBG,EAAOrO,EAAI,IAAMmO,EACjBE,EAAOrO,EAAI,IAAMnB,EAGrBa,EAAQ4O,aAAaF,EAAW,EAAG,IAUvC/B,WAAY,SAAC/I,GAET,IAAMiL,EAAOvC,EAAYwC,0BAEnBR,EAAYC,UAAQ3K,GAM1B,OAJA0K,EAAU,GAAK/L,KAAKgB,IAAI,IAAM+K,EAAU,GAAKO,EAAQA,GACrDP,EAAU,GAAK/L,KAAKgB,IAAI,IAAM+K,EAAU,GAAKO,EAAQA,GACrDP,EAAU,GAAK/L,KAAKgB,IAAI,IAAM+K,EAAU,GAAKO,EAAQA,GAE9CrE,UAAQ8D,IASnBQ,0BAA2B,EAQ3B3B,oBAAoB,EAQpB4B,eAAgB5K,IAQhB+I,WAAY,MAGhBZ,EAAYY,WAAaZ,EAAYyC,eAAiBzC,EAAYsB,iBAAmBtB,EAAY+B,iBC1TjG,IAAMW,EAAeC,WAAStG,yBAOrBA,OAAS,SAAgB9D,GAI9B,KAFoBA,GAAWA,EAAQqK,aAInC,IAEI,OAAOF,EAAanK,GAExB,MAAOsK,IAMX,OAAO,IAAIlJ,EAAepB,kBCpBlB6D,UAAUyF,kBAAoB,WAEtC,IAAM5E,EAAW5J,KAAK4J,SAEtB,OAAOA,EAAYA,EAAS6F,QAAU7F,EAAS2E,OAAU,0BAW3CxF,UAAUW,oBAAsB,eAE1CX,UAAU+E,aAAe,eAEzB/E,UAAUoE,UAAY"}