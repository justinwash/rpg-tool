{"version":3,"file":"canvas-extract.min.js","sources":["../src/CanvasExtract.ts"],"sourcesContent":["import { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { CanvasRenderer } from '@pixi/canvas-renderer';\nimport { deprecation } from '@pixi/utils';\nimport type { DisplayObject } from '@pixi/display';\nimport type { BaseRenderTexture } from '@pixi/core';\n\nconst TEMP_RECT = new Rectangle();\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`\n *\n * @class\n * @memberof PIXI\n */\nexport class CanvasExtract\n{\n    public renderer: CanvasRenderer;\n\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    public image(target: DisplayObject|RenderTexture, format?: string, quality?: number): HTMLImageElement\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {string} A base64 encoded string of the texture.\n     */\n    public base64(target: DisplayObject|RenderTexture, format?: string, quality?: number): string\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    public canvas(target: DisplayObject|RenderTexture): HTMLCanvasElement\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n            resolution = renderer.resolution;\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        const canvasBuffer = new CanvasRenderTarget(width, height, 1);\n        const canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target: DisplayObject|RenderTexture): Uint8ClampedArray\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n        }\n\n        return context.getImageData(0, 0, frame.width * resolution, frame.height * resolution).data;\n    }\n\n    /**\n     * Destroys the extract\n     *\n     */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\n/**\n * @name PIXI.CanvasRenderer#extract\n * @type {PIXI.CanvasExtract}\n * @see PIXI.CanvasRenderer#plugins\n * @deprecated since 5.3.0\n */\nObject.defineProperty(CanvasRenderer.prototype, 'extract',\n    {\n        get()\n        {\n            deprecation('v5.3.0', 'CanvasRenderer#extract is deprecated, use CanvasRenderer#plugins.extract');\n\n            return this.plugins.extract;\n        },\n    }\n);\n\n"],"names":["TEMP_RECT","Rectangle","renderer","this","CanvasExtract","target","format","quality","image","Image","src","base64","canvas","toDataURL","context","resolution","frame","renderTexture","RenderTexture","generateTexture","baseTexture","_canvasRenderTarget","rootContext","width","height","Math","floor","canvasBuffer","CanvasRenderTarget","canvasData","getImageData","x","y","putImageData","data","Object","defineProperty","CanvasRenderer","prototype","get","deprecation","plugins","extract"],"mappings":";;;;;;;kFAQA,IAAMA,EAAY,IAAIC,yBAiBlB,WAAYC,GAERC,KAAKD,SAAWA,EAgJxB,OApIWE,kBAAP,SAAaC,EAAqCC,EAAiBC,GAE/D,IAAMC,EAAQ,IAAIC,MAIlB,OAFAD,EAAME,IAAMP,KAAKQ,OAAON,EAAQC,EAAQC,GAEjCC,GAaJJ,mBAAP,SAAcC,EAAqCC,EAAiBC,GAEhE,OAAOJ,KAAKS,OAAOP,GAAQQ,UAAUP,EAAQC,IAU1CH,mBAAP,SAAcC,GAEV,IACIS,EACAC,EACAC,EACAC,EAJEf,EAAWC,KAAKD,SAMlBG,IAIIY,EAFAZ,aAAkBa,gBAEFb,EAIAH,EAASiB,gBAAgBd,IAI7CY,GAEAH,EAAWG,EAAcG,YAAkCC,oBAAoBP,QAC/EC,EAAcE,EAAcG,YAAkCC,oBAAoBN,WAClFC,EAAQC,EAAcD,QAItBF,EAAUZ,EAASoB,YACnBP,EAAab,EAASa,YACtBC,EAAQhB,GACFuB,MAAQpB,KAAKD,SAASqB,MAC5BP,EAAMQ,OAASrB,KAAKD,SAASsB,QAGjC,IAAMD,EAAQE,KAAKC,MAAOV,EAAMO,MAAQR,EAAc,MAChDS,EAASC,KAAKC,MAAOV,EAAMQ,OAAST,EAAc,MAElDY,EAAe,IAAIC,qBAAmBL,EAAOC,EAAQ,GACrDK,EAAaf,EAAQgB,aAAad,EAAMe,EAAIhB,EAAYC,EAAMgB,EAAIjB,EAAYQ,EAAOC,GAK3F,OAHAG,EAAab,QAAQmB,aAAaJ,EAAY,EAAG,GAG1CF,EAAaf,QAWjBR,mBAAP,SAAcC,GAEV,IACIS,EACAC,EACAC,EACAC,EAJEf,EAAWC,KAAKD,SAiCtB,OA3BIG,IAIIY,EAFAZ,aAAkBa,gBAEFb,EAIAH,EAASiB,gBAAgBd,IAI7CY,GAEAH,EAAWG,EAAcG,YAAkCC,oBAAoBP,QAC/EC,EAAcE,EAAcG,YAAkCC,oBAAoBN,WAClFC,EAAQC,EAAcD,QAItBF,EAAUZ,EAASoB,aAEnBN,EAAQhB,GACFuB,MAAQrB,EAASqB,MACvBP,EAAMQ,OAAStB,EAASsB,QAGrBV,EAAQgB,aAAa,EAAG,EAAGd,EAAMO,MAAQR,EAAYC,EAAMQ,OAAST,GAAYmB,MAOpF9B,oBAAP,WAEID,KAAKD,SAAW,kBAUxBiC,OAAOC,eAAeC,iBAAeC,UAAW,UAC5C,CACIC,eAII,OAFAC,cAAY,SAAU,4EAEfrC,KAAKsC,QAAQC"}