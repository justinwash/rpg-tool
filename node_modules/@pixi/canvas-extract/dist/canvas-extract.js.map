{"version":3,"file":"canvas-extract.js","sources":["../src/CanvasExtract.ts"],"sourcesContent":["import { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { CanvasRenderer } from '@pixi/canvas-renderer';\nimport { deprecation } from '@pixi/utils';\nimport type { DisplayObject } from '@pixi/display';\nimport type { BaseRenderTexture } from '@pixi/core';\n\nconst TEMP_RECT = new Rectangle();\n\n/**\n * The extract manager provides functionality to export content from the renderers.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.extract`\n *\n * @class\n * @memberof PIXI\n */\nexport class CanvasExtract\n{\n    public renderer: CanvasRenderer;\n\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: CanvasRenderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    public image(target: DisplayObject|RenderTexture, format?: string, quality?: number): HTMLImageElement\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `CanvasExtract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {string} A base64 encoded string of the texture.\n     */\n    public base64(target: DisplayObject|RenderTexture, format?: string, quality?: number): string\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    public canvas(target: DisplayObject|RenderTexture): HTMLCanvasElement\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n            resolution = renderer.resolution;\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        const canvasBuffer = new CanvasRenderTarget(width, height, 1);\n        const canvasData = context.getImageData(frame.x * resolution, frame.y * resolution, width, height);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {Uint8ClampedArray} One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target: DisplayObject|RenderTexture): Uint8ClampedArray\n    {\n        const renderer = this.renderer;\n        let context;\n        let resolution;\n        let frame;\n        let renderTexture;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = renderer.generateTexture(target);\n            }\n        }\n\n        if (renderTexture)\n        {\n            context = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.context;\n            resolution = (renderTexture.baseTexture as BaseRenderTexture)._canvasRenderTarget.resolution;\n            frame = renderTexture.frame;\n        }\n        else\n        {\n            context = renderer.rootContext;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n        }\n\n        return context.getImageData(0, 0, frame.width * resolution, frame.height * resolution).data;\n    }\n\n    /**\n     * Destroys the extract\n     *\n     */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n\n/**\n * @name PIXI.CanvasRenderer#extract\n * @type {PIXI.CanvasExtract}\n * @see PIXI.CanvasRenderer#plugins\n * @deprecated since 5.3.0\n */\nObject.defineProperty(CanvasRenderer.prototype, 'extract',\n    {\n        get()\n        {\n            deprecation('v5.3.0', 'CanvasRenderer#extract is deprecated, use CanvasRenderer#plugins.extract');\n\n            return this.plugins.extract;\n        },\n    }\n);\n\n"],"names":["Rectangle","RenderTexture","CanvasRenderTarget","CanvasRenderer","deprecation"],"mappings":"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"}