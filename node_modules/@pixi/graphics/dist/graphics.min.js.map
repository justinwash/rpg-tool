{"version":3,"file":"graphics.min.js","sources":["../src/const.ts","../src/styles/FillStyle.ts","../../../node_modules/tslib/tslib.es6.js","../src/utils/buildPoly.ts","../src/utils/buildCircle.ts","../src/utils/buildRectangle.ts","../src/utils/buildRoundedRectangle.ts","../src/utils/buildLine.ts","../src/utils/Star.ts","../src/utils/ArcUtils.ts","../src/utils/BezierUtils.ts","../src/utils/QuadraticUtils.ts","../src/utils/BatchPart.ts","../src/utils/index.ts","../src/GraphicsData.ts","../src/GraphicsGeometry.ts","../src/styles/LineStyle.ts","../src/Graphics.ts"],"sourcesContent":["/**\n * Supported line joints in `PIXI.LineStyle` for graphics.\n *\n * @see PIXI.Graphics#lineStyle\n * @see https://graphicdesign.stackexchange.com/questions/59018/what-is-a-bevel-join-of-two-lines-exactly-illustrator\n *\n * @name LINE_JOIN\n * @memberof PIXI\n * @static\n * @enum {string}\n * @property {string} MITER - 'miter': make a sharp corner where outer part of lines meet\n * @property {string} BEVEL - 'bevel': add a square butt at each end of line segment and fill the triangle at turn\n * @property {string} ROUND - 'round': add an arc at the joint\n */\nexport enum LINE_JOIN {\n    MITER = 'miter',\n    BEVEL = 'bevel',\n    ROUND = 'round'\n}\n\n/**\n * Support line caps in `PIXI.LineStyle` for graphics.\n *\n * @see PIXI.Graphics#lineStyle\n *\n * @name LINE_CAP\n * @memberof PIXI\n * @static\n * @enum {string}\n * @property {string} BUTT - 'butt': don't add any cap at line ends (leaves orthogonal edges)\n * @property {string} ROUND - 'round': add semicircle at ends\n * @property {string} SQUARE - 'square': add square at end (like `BUTT` except more length at end)\n */\nexport enum LINE_CAP {\n    BUTT = 'butt',\n    ROUND = 'round',\n    SQUARE = 'square'\n}\n\nexport interface IGraphicsCurvesSettings {\n    adaptive: boolean;\n    maxLength: number;\n    minSegments: number;\n    maxSegments: number;\n\n    epsilon: number;\n\n    _segmentsCount(length: number, defaultSegments?: number): number;\n}\n\n/**\n * Graphics curves resolution settings. If `adaptive` flag is set to `true`,\n * the resolution is calculated based on the curve's length to ensure better visual quality.\n * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.\n *\n * @static\n * @constant\n * @memberof PIXI\n * @name GRAPHICS_CURVES\n * @type {object}\n * @property {boolean} adaptive=false - flag indicating if the resolution should be adaptive\n * @property {number} maxLength=10 - maximal length of a single segment of the curve (if adaptive = false, ignored)\n * @property {number} minSegments=8 - minimal number of segments in the curve (if adaptive = false, ignored)\n * @property {number} maxSegments=2048 - maximal number of segments in the curve (if adaptive = false, ignored)\n */\nexport const GRAPHICS_CURVES: IGraphicsCurvesSettings = {\n    adaptive: true,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments:  2048,\n\n    epsilon: 0.0001,\n\n    _segmentsCount(length: number, defaultSegments = 20)\n    {\n        if (!this.adaptive || !length || isNaN(length))\n        {\n            return defaultSegments;\n        }\n\n        let result = Math.ceil(length / this.maxLength);\n\n        if (result < this.minSegments)\n        {\n            result = this.minSegments;\n        }\n        else if (result > this.maxSegments)\n        {\n            result = this.maxSegments;\n        }\n\n        return result;\n    },\n};\n","import { Texture } from '@pixi/core';\nimport type { Matrix } from '@pixi/math';\n\n/**\n * Fill style object for Graphics.\n *\n * @class\n * @memberof PIXI\n */\nexport class FillStyle\n{\n    /**\n     * The hex color value used when coloring the Graphics object.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    public color = 0xFFFFFF;\n\n    /**\n     * The alpha value used when filling the Graphics object.\n     *\n     * @member {number}\n     * @default 1\n     */\n    public alpha = 1.0;\n\n    /**\n     * The texture to be used for the fill.\n     *\n     * @member {PIXI.Texture}\n     * @default 0\n     */\n    public texture: Texture = Texture.WHITE;\n\n    /**\n     * The transform aplpied to the texture.\n     *\n     * @member {PIXI.Matrix}\n     * @default null\n     */\n    public matrix: Matrix = null;\n\n    /**\n     * If the current fill is visible.\n     *\n     * @member {boolean}\n     * @default false\n     */\n    public visible = false;\n\n    constructor()\n    {\n        this.reset();\n    }\n\n    /**\n     * Clones the object\n     *\n     * @return {PIXI.FillStyle}\n     */\n    public clone(): FillStyle\n    {\n        const obj = new FillStyle();\n\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n\n        return obj;\n    }\n\n    /**\n     * Reset\n     */\n    public reset(): void\n    {\n        this.color = 0xFFFFFF;\n        this.alpha = 1;\n        this.texture = Texture.WHITE;\n        this.matrix = null;\n        this.visible = false;\n    }\n\n    /**\n     * Destroy and don't use after this\n     */\n    public destroy(): void\n    {\n        this.texture = null;\n        this.matrix = null;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { earcut } from '@pixi/utils';\n\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\nimport type { Polygon } from '@pixi/math';\n\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildPoly: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        graphicsData.points = (graphicsData.shape as Polygon).points.slice();\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        let points = graphicsData.points;\n        const holes = graphicsData.holes;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        if (points.length >= 6)\n        {\n            const holeArray = [];\n            // Process holes..\n\n            for (let i = 0; i < holes.length; i++)\n            {\n                const hole = holes[i];\n\n                holeArray.push(points.length / 2);\n                points = points.concat(hole.points);\n            }\n\n            // sort color\n            const triangles = earcut(points, holeArray, 2);\n\n            if (!triangles)\n            {\n                return;\n            }\n\n            const vertPos = verts.length / 2;\n\n            for (let i = 0; i < triangles.length; i += 3)\n            {\n                indices.push(triangles[i] + vertPos);\n                indices.push(triangles[i + 1] + vertPos);\n                indices.push(triangles[i + 2] + vertPos);\n            }\n\n            for (let i = 0; i < points.length; i++)\n            {\n                verts.push(points[i]);\n            }\n        }\n    },\n};\n","// for type only\nimport { SHAPES } from '@pixi/math';\n\nimport type { Circle, Ellipse } from '@pixi/math';\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\n\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildCircle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        // need to convert points to a nice regular data\n        const circleData = graphicsData.shape as Circle;\n        const points = graphicsData.points;\n        const x = circleData.x;\n        const y = circleData.y;\n        let width;\n        let height;\n\n        points.length = 0;\n\n        // TODO - bit hacky??\n        if (graphicsData.type === SHAPES.CIRC)\n        {\n            width = circleData.radius;\n            height = circleData.radius;\n        }\n        else\n        {\n            const ellipseData = graphicsData.shape as Ellipse;\n\n            width = ellipseData.width;\n            height = ellipseData.height;\n        }\n\n        if (width === 0 || height === 0)\n        {\n            return;\n        }\n\n        let totalSegs = Math.floor(30 * Math.sqrt(circleData.radius))\n            || Math.floor(15 * Math.sqrt(width + height));\n\n        totalSegs /= 2.3;\n\n        const seg = (Math.PI * 2) / totalSegs;\n\n        for (let i = 0; i < totalSegs - 0.5; i++)\n        {\n            points.push(\n                x + (Math.sin(-seg * i) * width),\n                y + (Math.cos(-seg * i) * height)\n            );\n        }\n\n        points.push(points[0], points[1]);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        let vertPos = verts.length / 2;\n        const center = vertPos;\n\n        const circle = (graphicsData.shape) as Circle;\n        const matrix = graphicsData.matrix;\n        const x = circle.x;\n        const y = circle.y;\n\n        // Push center (special point)\n        verts.push(\n            graphicsData.matrix ? (matrix.a * x) + (matrix.c * y) + matrix.tx : x,\n            graphicsData.matrix ? (matrix.b * x) + (matrix.d * y) + matrix.ty : y);\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            verts.push(points[i], points[i + 1]);\n\n            // add some uvs\n            indices.push(vertPos++, center, vertPos);\n        }\n    },\n};\n","import type { IShapeBuildCommand } from './IShapeBuildCommand';\nimport type { Rectangle } from '@pixi/math';\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildRectangle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        // --- //\n        // need to convert points to a nice regular data\n        //\n        const rectData = graphicsData.shape as Rectangle;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        const points = graphicsData.points;\n\n        points.length = 0;\n\n        points.push(x, y,\n            x + width, y,\n            x + width, y + height,\n            x, y + height);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n\n        const vertPos = verts.length / 2;\n\n        verts.push(points[0], points[1],\n            points[2], points[3],\n            points[6], points[7],\n            points[4], points[5]);\n\n        graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2,\n            vertPos + 1, vertPos + 2, vertPos + 3);\n    },\n};\n","import { earcut } from '@pixi/utils';\n\n// for type only\nimport type { IShapeBuildCommand } from './IShapeBuildCommand';\nimport type { RoundedRectangle } from '@pixi/math';\n\n/**\n * Calculate a single point for a quadratic bezier curve.\n * Utility function used by quadraticBezierCurve.\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} n1 - first number\n * @param {number} n2 - second number\n * @param {number} perc - percentage\n * @return {number} the result\n *\n */\nfunction getPt(n1: number, n2: number, perc: number): number\n{\n    const diff = n2 - n1;\n\n    return n1 + (diff * perc);\n}\n\n/**\n * Calculate the points for a quadratic bezier curve. (helper function..)\n * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} fromX - Origin point x\n * @param {number} fromY - Origin point x\n * @param {number} cpX - Control point x\n * @param {number} cpY - Control point y\n * @param {number} toX - Destination point x\n * @param {number} toY - Destination point y\n * @param {number[]} [out=[]] - The output array to add points into. If not passed, a new array is created.\n * @return {number[]} an array of points\n */\nfunction quadraticBezierCurve(\n    fromX: number, fromY: number,\n    cpX: number, cpY: number,\n    toX: number, toY: number,\n    out: Array<number> = []): Array<number>\n{\n    const n = 20;\n    const points = out;\n\n    let xa = 0;\n    let ya = 0;\n    let xb = 0;\n    let yb = 0;\n    let x = 0;\n    let y = 0;\n\n    for (let i = 0, j = 0; i <= n; ++i)\n    {\n        j = i / n;\n\n        // The Green Line\n        xa = getPt(fromX, cpX, j);\n        ya = getPt(fromY, cpY, j);\n        xb = getPt(cpX, toX, j);\n        yb = getPt(cpY, toY, j);\n\n        // The Black Dot\n        x = getPt(xa, xb, j);\n        y = getPt(ya, yb, j);\n\n        points.push(x, y);\n    }\n\n    return points;\n}\n\n/**\n * Builds a rounded rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport const buildRoundedRectangle: IShapeBuildCommand = {\n\n    build(graphicsData)\n    {\n        const rrectData = graphicsData.shape as RoundedRectangle;\n        const points = graphicsData.points;\n        const x = rrectData.x;\n        const y = rrectData.y;\n        const width = rrectData.width;\n        const height = rrectData.height;\n\n        // Don't allow negative radius or greater than half the smallest width\n        const radius = Math.max(0, Math.min(rrectData.radius, Math.min(width, height) / 2));\n\n        points.length = 0;\n\n        // No radius, do a simple rectangle\n        if (!radius)\n        {\n            points.push(x, y,\n                x + width, y,\n                x + width, y + height,\n                x, y + height);\n        }\n        else\n        {\n            quadraticBezierCurve(x, y + radius,\n                x, y,\n                x + radius, y,\n                points);\n            quadraticBezierCurve(x + width - radius,\n                y, x + width, y,\n                x + width, y + radius,\n                points);\n            quadraticBezierCurve(x + width, y + height - radius,\n                x + width, y + height,\n                x + width - radius, y + height,\n                points);\n            quadraticBezierCurve(x + radius, y + height,\n                x, y + height,\n                x, y + height - radius,\n                points);\n        }\n\n        // this tiny number deals with the issue that occurs when points overlap and earcut fails to triangulate the item.\n        // TODO - fix this properly, this is not very elegant.. but it works for now.\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        const vecPos = verts.length / 2;\n\n        const triangles = earcut(points, null, 2);\n\n        for (let i = 0, j = triangles.length; i < j; i += 3)\n        {\n            indices.push(triangles[i] + vecPos);\n            //     indices.push(triangles[i] + vecPos);\n            indices.push(triangles[i + 1] + vecPos);\n            //   indices.push(triangles[i + 2] + vecPos);\n            indices.push(triangles[i + 2] + vecPos);\n        }\n\n        for (let i = 0, j = points.length; i < j; i++)\n        {\n            verts.push(points[i], points[++i]);\n        }\n    },\n};\n","import { Point, SHAPES } from '@pixi/math';\n\nimport type { Polygon } from '@pixi/math';\nimport type { GraphicsData } from '../GraphicsData';\nimport type { GraphicsGeometry } from '../GraphicsGeometry';\nimport { LINE_JOIN, LINE_CAP } from '../const';\nimport { GRAPHICS_CURVES } from '../const';\n\n/**\n * Buffers vertices to draw a square cap.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} x - X-coord of end point\n * @param {number} y - Y-coord of end point\n * @param {number} nx - X-coord of line normal pointing inside\n * @param {number} ny - Y-coord of line normal pointing inside\n * @param {Array<number>} verts - vertex buffer\n * @returns {}\n */\nfunction square(\n    x: number,\n    y: number,\n    nx: number,\n    ny: number,\n    innerWeight: number,\n    outerWeight: number,\n    clockwise: boolean, /* rotation for square (true at left end, false at right end) */\n    verts: Array<number>\n): number\n{\n    const ix = x - (nx * innerWeight);\n    const iy = y - (ny * innerWeight);\n    const ox = x + (nx * outerWeight);\n    const oy = y + (ny * outerWeight);\n\n    /* Rotate nx,ny for extension vector */\n    let exx; let\n        eyy;\n\n    if (clockwise)\n    {\n        exx = ny;\n        eyy = -nx;\n    }\n    else\n    {\n        exx = -ny;\n        eyy = nx;\n    }\n\n    /* [i|0]x,y extended at cap */\n    const eix = ix + exx;\n    const eiy = iy + eyy;\n    const eox = ox + exx;\n    const eoy = oy + eyy;\n\n    /* Square itself must be inserted clockwise*/\n    verts.push(eix, eiy);\n    verts.push(eox, eoy);\n\n    return 2;\n}\n\n/**\n * Buffers vertices to draw an arc at the line joint or cap.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} cx - X-coord of center\n * @param {number} cy - Y-coord of center\n * @param {number} sx - X-coord of arc start\n * @param {number} sy - Y-coord of arc start\n * @param {number} ex - X-coord of arc end\n * @param {number} ey - Y-coord of arc end\n * @param {Array<number>} verts - buffer of vertices\n * @param {boolean} clockwise - orientation of vertices\n * @returns {number} - no. of vertices pushed\n */\nfunction round(\n    cx: number,\n    cy: number,\n    sx: number,\n    sy: number,\n    ex: number,\n    ey: number,\n    verts: Array<number>,\n    clockwise: boolean, /* if not cap, then clockwise is turn of joint, otherwise rotation from angle0 to angle1 */\n): number\n{\n    const cx2p0x = sx - cx;\n    const cy2p0y = sy - cy;\n\n    let angle0 = Math.atan2(cx2p0x, cy2p0y);\n    let angle1 = Math.atan2(ex - cx, ey - cy);\n\n    if (clockwise && angle0 < angle1)\n    {\n        angle0 += Math.PI * 2;\n    }\n    else if (!clockwise && angle0 > angle1)\n    {\n        angle1 += Math.PI * 2;\n    }\n\n    let startAngle = angle0;\n    const angleDiff = angle1 - angle0;\n    const absAngleDiff = Math.abs(angleDiff);\n\n    /* if (absAngleDiff >= PI_LBOUND && absAngleDiff <= PI_UBOUND)\n    {\n        const r1x = cx - nxtPx;\n        const r1y = cy - nxtPy;\n\n        if (r1x === 0)\n        {\n            if (r1y > 0)\n            {\n                angleDiff = -angleDiff;\n            }\n        }\n        else if (r1x >= -GRAPHICS_CURVES.epsilon)\n        {\n            angleDiff = -angleDiff;\n        }\n    }*/\n\n    const radius = Math.sqrt((cx2p0x * cx2p0x) + (cy2p0y * cy2p0y));\n    const segCount = ((15 * absAngleDiff * Math.sqrt(radius) / Math.PI) >> 0) + 1;\n    const angleInc = angleDiff / segCount;\n\n    startAngle += angleInc;\n\n    if (clockwise)\n    {\n        verts.push(cx, cy);\n        verts.push(sx, sy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(cx, cy);\n            verts.push(cx + ((Math.sin(angle) * radius)),\n                cy + ((Math.cos(angle) * radius)));\n        }\n\n        verts.push(cx, cy);\n        verts.push(ex, ey);\n    }\n    else\n    {\n        verts.push(sx, sy);\n        verts.push(cx, cy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(cx + ((Math.sin(angle) * radius)),\n                cy + ((Math.cos(angle) * radius)));\n            verts.push(cx, cy);\n        }\n\n        verts.push(ex, ey);\n        verts.push(cx, cy);\n    }\n\n    return segCount * 2;\n}\n\n/**\n * Builds a line to draw using the polygon method.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNonNativeLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    const shape = graphicsData.shape as Polygon;\n    let points = graphicsData.points || shape.points.slice();\n    const eps = graphicsGeometry.closePointEps;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n    // if the line width is an odd number add 0.5 to align to a whole pixel\n    // commenting this out fixes #711 and #1620\n    // if (graphicsData.lineWidth%2)\n    // {\n    //     for (i = 0; i < points.length; i++)\n    //     {\n    //         points[i] += 0.5;\n    //     }\n    // }\n\n    const style = graphicsData.lineStyle;\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n    const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n        && Math.abs(firstPoint.y - lastPoint.y) < eps;\n\n    // if the first point is the last point - gonna have issues :)\n    if (closedShape)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        if (closedPath)\n        {\n            points.pop();\n            points.pop();\n            lastPoint.set(points[points.length - 2], points[points.length - 1]);\n        }\n\n        const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n        const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = graphicsGeometry.points;\n    const length = points.length / 2;\n    let indexCount = points.length;\n    const indexStart = verts.length / 2;\n\n    // Max. inner and outer width\n    const width = style.width / 2;\n    const widthSquared = width * width;\n    const miterLimitSquared = style.miterLimit * style.miterLimit;\n\n    /* Line segments of interest where (x1,y1) forms the corner. */\n    let x0 = points[0];\n    let y0 = points[1];\n    let x1 = points[2];\n    let y1 = points[3];\n    let x2 = 0;\n    let y2 = 0;\n\n    /* perp[?](x|y) = the line normal with magnitude lineWidth. */\n    let perpx = -(y0 - y1);\n    let perpy = x0 - x1;\n    let perp1x = 0;\n    let perp1y = 0;\n\n    let dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    const ratio = style.alignment;// 0.5;\n    const innerWeight = (1 - ratio) * 2;\n    const outerWeight = ratio * 2;\n\n    if (!closedShape)\n    {\n        if (style.cap === LINE_CAP.ROUND)\n        {\n            indexCount += round(\n                x0 - (perpx * (innerWeight - outerWeight) * 0.5),\n                y0 - (perpy * (innerWeight - outerWeight) * 0.5),\n                x0 - (perpx * innerWeight),\n                y0 - (perpy * innerWeight),\n                x0 + (perpx * outerWeight),\n                y0 + (perpy * outerWeight),\n                verts,\n                true,\n            ) + 2;\n        }\n        else if (style.cap === LINE_CAP.SQUARE)\n        {\n            indexCount += square(x0, y0, perpx, perpy, innerWeight, outerWeight, true, verts);\n        }\n    }\n\n    // Push first point (below & above vertices)\n    verts.push(\n        x0 - (perpx * innerWeight),\n        y0 - (perpy * innerWeight));\n    verts.push(\n        x0 + (perpx * outerWeight),\n        y0 + (perpy * outerWeight));\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        x0 = points[(i - 1) * 2];\n        y0 = points[((i - 1) * 2) + 1];\n\n        x1 = points[i * 2];\n        y1 = points[(i * 2) + 1];\n\n        x2 = points[(i + 1) * 2];\n        y2 = points[((i + 1) * 2) + 1];\n\n        perpx = -(y0 - y1);\n        perpy = x0 - x1;\n\n        dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n        perpx /= dist;\n        perpy /= dist;\n        perpx *= width;\n        perpy *= width;\n\n        perp1x = -(y1 - y2);\n        perp1y = x1 - x2;\n\n        dist = Math.sqrt((perp1x * perp1x) + (perp1y * perp1y));\n        perp1x /= dist;\n        perp1y /= dist;\n        perp1x *= width;\n        perp1y *= width;\n\n        /* d[x|y](0|1) = the component displacment between points p(0,1|1,2) */\n        const dx0 = x1 - x0;\n        const dy0 = y0 - y1;\n        const dx1 = x1 - x2;\n        const dy1 = y2 - y1;\n\n        /* +ve if internal angle counterclockwise, -ve if internal angle clockwise. */\n        const cross = (dy0 * dx1) - (dy1 * dx0);\n        const clockwise = (cross < 0);\n\n        /* Going nearly straight? */\n        if (Math.abs(cross) < 0.1)\n        {\n            verts.push(\n                x1 - (perpx * innerWeight),\n                y1 - (perpy * innerWeight));\n            verts.push(\n                x1 + (perpx * outerWeight),\n                y1 + (perpy * outerWeight));\n\n            continue;\n        }\n\n        /* p[x|y] is the miter point. pdist is the distance between miter point and p1. */\n        const c1 = ((-perpx + x0) * (-perpy + y1)) - ((-perpx + x1) * (-perpy + y0));\n        const c2 = ((-perp1x + x2) * (-perp1y + y1)) - ((-perp1x + x1) * (-perp1y + y2));\n        const px = ((dx0 * c2) - (dx1 * c1)) / cross;\n        const py = ((dy1 * c1) - (dy0 * c2)) / cross;\n        const pdist = ((px - x1) * (px - x1)) + ((py - y1) * (py - y1));\n\n        /* Inner miter point */\n        const imx = x1 + ((px - x1) * innerWeight);\n        const imy = y1 + ((py - y1) * innerWeight);\n        /* Outer miter point */\n        const omx = x1 - ((px - x1) * outerWeight);\n        const omy = y1 - ((py - y1) * outerWeight);\n\n        /* Is the inside miter point too far away, creating a spike? */\n        const smallerInsideSegmentSq = Math.min((dx0 * dx0) + (dy0 * dy0), (dx1 * dx1) + (dy1 * dy1));\n        const insideWeight = clockwise ? innerWeight : outerWeight;\n        const smallerInsideDiagonalSq = smallerInsideSegmentSq + (insideWeight * insideWeight * widthSquared);\n        const insideMiterOk = pdist <= smallerInsideDiagonalSq;\n\n        if (insideMiterOk)\n        {\n            if (style.join === LINE_JOIN.BEVEL || pdist / widthSquared > miterLimitSquared)\n            {\n                if (clockwise) /* rotating at inner angle */\n                {\n                    verts.push(imx, imy);// inner miter point\n                    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));// first segment's outer vertex\n                    verts.push(imx, imy);// inner miter point\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight));// second segment's outer vertex\n                }\n                else /* rotating at outer angle */\n                {\n                    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));// first segment's inner vertex\n                    verts.push(omx, omy);// outer miter point\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight));// second segment's outer vertex\n                    verts.push(omx, omy);// outer miter point\n                }\n\n                indexCount += 2;\n            }\n            else if (style.join === LINE_JOIN.ROUND)\n            {\n                if (clockwise) /* arc is outside */\n                {\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n\n                    indexCount += round(\n                        x1, y1,\n                        x1 + (perpx * outerWeight), y1 + (perpy * outerWeight),\n                        x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                        verts, true\n                    ) + 4;\n\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight));\n                }\n                else /* arc is inside */\n                {\n                    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));\n                    verts.push(omx, omy);\n\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false\n                    ) + 4;\n\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight));\n                    verts.push(omx, omy);\n                }\n            }\n            else\n            {\n                verts.push(imx, imy);\n                verts.push(omx, omy);\n            }\n        }\n        else // inside miter is NOT ok\n        {\n            verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight)); // first segment's inner vertex\n            verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight)); // first segment's outer vertex\n            if (style.join === LINE_JOIN.BEVEL || pdist / widthSquared > miterLimitSquared)\n            {\n                // Nothing needed\n            }\n            else if (style.join === LINE_JOIN.ROUND)\n            {\n                if (clockwise) /* arc is outside */\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 + (perpx * outerWeight), y1 + (perpy * outerWeight),\n                        x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                        verts, true\n                    ) + 2;\n                }\n                else /* arc is inside */\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpx * innerWeight), y1 - (perpy * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false\n                    ) + 2;\n                }\n            }\n            else\n            {\n                if (clockwise)\n                {\n                    verts.push(omx, omy); // inner miter point\n                    verts.push(omx, omy); // inner miter point\n                }\n                else\n                {\n                    verts.push(imx, imy); // outer miter point\n                    verts.push(imx, imy); // outer miter point\n                }\n                indexCount += 2;\n            }\n            verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's inner vertex\n            verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n            indexCount += 2;\n        }\n    }\n\n    x0 = points[(length - 2) * 2];\n    y0 = points[((length - 2) * 2) + 1];\n\n    x1 = points[(length - 1) * 2];\n    y1 = points[((length - 1) * 2) + 1];\n\n    perpx = -(y0 - y1);\n    perpy = x0 - x1;\n\n    dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    verts.push(x1 - (perpx * innerWeight), y1 - (perpy * innerWeight));\n    verts.push(x1 + (perpx * outerWeight), y1 + (perpy * outerWeight));\n\n    if (!closedShape)\n    {\n        if (style.cap === LINE_CAP.ROUND)\n        {\n            indexCount += round(\n                x1 - (perpx * (innerWeight - outerWeight) * 0.5),\n                y1 - (perpy * (innerWeight - outerWeight) * 0.5),\n                x1 - (perpx * innerWeight),\n                y1 - (perpy * innerWeight),\n                x1 + (perpx * outerWeight),\n                y1 + (perpy * outerWeight),\n                verts,\n                false\n            ) + 2;\n        }\n        else if (style.cap === LINE_CAP.SQUARE)\n        {\n            indexCount += square(x1, y1, perpx, perpy, innerWeight, outerWeight, false, verts);\n        }\n    }\n\n    const indices = graphicsGeometry.indices;\n    const eps2 = GRAPHICS_CURVES.epsilon * GRAPHICS_CURVES.epsilon;\n\n    // indices.push(indexStart);\n    for (let i = indexStart; i < indexCount + indexStart - 2; ++i)\n    {\n        x0 = verts[(i * 2)];\n        y0 = verts[(i * 2) + 1];\n\n        x1 = verts[(i + 1) * 2];\n        y1 = verts[((i + 1) * 2) + 1];\n\n        x2 = verts[(i + 2) * 2];\n        y2 = verts[((i + 2) * 2) + 1];\n\n        /* Skip zero area triangles */\n        if (Math.abs((x0 * (y1 - y2)) + (x1 * (y2 - y0)) + (x2 * (y0 - y1))) < eps2)\n        {\n            continue;\n        }\n\n        indices.push(i, i + 1, i + 2);\n    }\n}\n\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNativeLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    let i = 0;\n\n    const shape = graphicsData.shape as Polygon;\n    const points = graphicsData.points || shape.points;\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n\n    if (points.length === 0) return;\n\n    const verts = graphicsGeometry.points;\n    const indices = graphicsGeometry.indices;\n    const length = points.length / 2;\n\n    const startIndex = verts.length / 2;\n    let currentIndex = startIndex;\n\n    verts.push(points[0], points[1]);\n\n    for (i = 1; i < length; i++)\n    {\n        verts.push(points[i * 2], points[(i * 2) + 1]);\n        indices.push(currentIndex, currentIndex + 1);\n\n        currentIndex++;\n    }\n\n    if (closedShape)\n    {\n        indices.push(currentIndex, startIndex);\n    }\n}\n\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nexport function buildLine(graphicsData: GraphicsData, graphicsGeometry: GraphicsGeometry): void\n{\n    if (graphicsData.lineStyle.native)\n    {\n        buildNativeLine(graphicsData, graphicsGeometry);\n    }\n    else\n    {\n        buildNonNativeLine(graphicsData, graphicsGeometry);\n    }\n}\n","import { Polygon, PI_2 } from '@pixi/math';\n\n/**\n * Draw a star shape with an arbitrary number of points.\n *\n * @class\n * @extends PIXI.Polygon\n * @memberof PIXI.graphicsUtils\n * @param {number} x - Center X position of the star\n * @param {number} y - Center Y position of the star\n * @param {number} points - The number of points of the star, must be > 1\n * @param {number} radius - The outer radius of the star\n * @param {number} [innerRadius] - The inner radius between points, default half `radius`\n * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical\n * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n */\nexport class Star extends Polygon\n{\n    constructor(x: number, y: number, points: number, radius: number, innerRadius: number, rotation = 0)\n    {\n        innerRadius = innerRadius || radius / 2;\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const len = points * 2;\n        const delta = PI_2 / len;\n        const polygon = [];\n\n        for (let i = 0; i < len; i++)\n        {\n            const r = i % 2 ? innerRadius : radius;\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (r * Math.cos(angle)),\n                y + (r * Math.sin(angle))\n            );\n        }\n\n        super(polygon);\n    }\n}\n","import { GRAPHICS_CURVES } from '../const';\nimport { PI_2 } from '@pixi/math';\n\ninterface IArcLikeShape {\n    cx: number;\n    cy: number;\n    radius: number;\n    startAngle: number;\n    endAngle: number;\n    anticlockwise: boolean;\n}\n\n/**\n * Utilities for arc curves\n * @class\n * @private\n */\nexport class ArcUtils\n{\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @private\n     * @param {number} x1 - The x-coordinate of the beginning of the arc\n     * @param {number} y1 - The y-coordinate of the beginning of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {object} If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n     */\n    static curveTo(x1: number, y1: number, x2: number, y2: number, radius: number, points: Array<number>): IArcLikeShape\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const a1 = fromY - y1;\n        const b1 = fromX - x1;\n        const a2 = y2 - y1;\n        const b2 = x2 - x1;\n        const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n        if (mm < 1.0e-8 || radius === 0)\n        {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n            {\n                points.push(x1, y1);\n            }\n\n            return null;\n        }\n\n        const dd = (a1 * a1) + (b1 * b1);\n        const cc = (a2 * a2) + (b2 * b2);\n        const tt = (a1 * a2) + (b1 * b2);\n        const k1 = radius * Math.sqrt(dd) / mm;\n        const k2 = radius * Math.sqrt(cc) / mm;\n        const j1 = k1 * tt / dd;\n        const j2 = k2 * tt / cc;\n        const cx = (k1 * b2) + (k2 * b1);\n        const cy = (k1 * a2) + (k2 * a1);\n        const px = b1 * (k2 + j1);\n        const py = a1 * (k2 + j1);\n        const qx = b2 * (k1 + j2);\n        const qy = a2 * (k1 + j2);\n        const startAngle = Math.atan2(py - cy, px - cx);\n        const endAngle = Math.atan2(qy - cy, qx - cx);\n\n        return {\n            cx: (cx + x1),\n            cy: (cy + y1),\n            radius,\n            startAngle,\n            endAngle,\n            anticlockwise: (b1 * a2 > b2 * a1),\n        };\n    }\n\n    /* eslint-disable max-len */\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @private\n     * @param {number} startX - Start x location of arc\n     * @param {number} startY - Start y location of arc\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @param {number[]} points - Collection of points to add to\n     */\n    static arc(_startX: number, _startY: number, cx: number, cy: number, radius: number,\n        startAngle: number, endAngle: number, _anticlockwise: boolean, points: Array<number>): void\n    {\n        const sweep = endAngle - startAngle;\n        const n = GRAPHICS_CURVES._segmentsCount(\n            Math.abs(sweep) * radius,\n            Math.ceil(Math.abs(sweep) / PI_2) * 40\n        );\n\n        const theta = (sweep) / (n * 2);\n        const theta2 = theta * 2;\n        const cTheta = Math.cos(theta);\n        const sTheta = Math.sin(theta);\n        const segMinus = n - 1;\n        const remainder = (segMinus % 1) / segMinus;\n\n        for (let i = 0; i <= segMinus; ++i)\n        {\n            const real = i + (remainder * i);\n            const angle = ((theta) + startAngle + (theta2 * real));\n            const c = Math.cos(angle);\n            const s = -Math.sin(angle);\n\n            points.push(\n                (((cTheta * c) + (sTheta * s)) * radius) + cx,\n                (((cTheta * -s) + (sTheta * c)) * radius) + cy\n            );\n        }\n    }\n    /* eslint-enable max-len */\n}\n","import { GRAPHICS_CURVES } from '../const';\n\n/**\n * Utilities for bezier curves\n * @class\n * @private\n */\nexport class BezierUtils\n{\n    /**\n     * Calculate length of bezier curve.\n     * Analytical solution is impossible, since it involves an integral that does not integrate in general.\n     * Therefore numerical solution is used.\n     *\n     * @private\n     * @param {number} fromX - Starting point x\n     * @param {number} fromY - Starting point y\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {number} Length of bezier curve\n     */\n    static curveLength(\n        fromX: number, fromY: number,\n        cpX: number, cpY: number,\n        cpX2: number, cpY2: number,\n        toX: number, toY: number): number\n    {\n        const n = 10;\n        let result = 0.0;\n        let t = 0.0;\n        let t2 = 0.0;\n        let t3 = 0.0;\n        let nt = 0.0;\n        let nt2 = 0.0;\n        let nt3 = 0.0;\n        let x = 0.0;\n        let y = 0.0;\n        let dx = 0.0;\n        let dy = 0.0;\n        let prevX = fromX;\n        let prevY = fromY;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            t = i / n;\n            t2 = t * t;\n            t3 = t2 * t;\n            nt = (1.0 - t);\n            nt2 = nt * nt;\n            nt3 = nt2 * nt;\n\n            x = (nt3 * fromX) + (3.0 * nt2 * t * cpX) + (3.0 * nt * t2 * cpX2) + (t3 * toX);\n            y = (nt3 * fromY) + (3.0 * nt2 * t * cpY) + (3 * nt * t2 * cpY2) + (t3 * toY);\n            dx = prevX - x;\n            dy = prevY - y;\n            prevX = x;\n            prevY = y;\n\n            result += Math.sqrt((dx * dx) + (dy * dy));\n        }\n\n        return result;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * Ignored from docs since it is not directly exposed.\n     *\n     * @ignore\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @param {number[]} points - Path array to push points into\n     */\n    static curveTo(\n        cpX: number, cpY: number,\n        cpX2: number, cpY2: number,\n        toX: number, toY: number,\n        points: Array<number>): void\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        points.length -= 2;\n\n        const n = GRAPHICS_CURVES._segmentsCount(\n            BezierUtils.curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY)\n        );\n\n        let dt = 0;\n        let dt2 = 0;\n        let dt3 = 0;\n        let t2 = 0;\n        let t3 = 0;\n\n        points.push(fromX, fromY);\n\n        for (let i = 1, j = 0; i <= n; ++i)\n        {\n            j = i / n;\n\n            dt = (1 - j);\n            dt2 = dt * dt;\n            dt3 = dt2 * dt;\n\n            t2 = j * j;\n            t3 = t2 * j;\n\n            points.push(\n                (dt3 * fromX) + (3 * dt2 * j * cpX) + (3 * dt * t2 * cpX2) + (t3 * toX),\n                (dt3 * fromY) + (3 * dt2 * j * cpY) + (3 * dt * t2 * cpY2) + (t3 * toY)\n            );\n        }\n    }\n}\n","import { GRAPHICS_CURVES } from '../const';\n\n/**\n * Utilities for quadratic curves\n * @class\n * @private\n */\nexport class QuadraticUtils\n{\n    /**\n     * Calculate length of quadratic curve\n     * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n     * for the detailed explanation of math behind this.\n     *\n     * @private\n     * @param {number} fromX - x-coordinate of curve start point\n     * @param {number} fromY - y-coordinate of curve start point\n     * @param {number} cpX - x-coordinate of curve control point\n     * @param {number} cpY - y-coordinate of curve control point\n     * @param {number} toX - x-coordinate of curve end point\n     * @param {number} toY - y-coordinate of curve end point\n     * @return {number} Length of quadratic curve\n     */\n    static curveLength(\n        fromX: number, fromY: number,\n        cpX: number, cpY: number,\n        toX: number, toY: number): number\n    {\n        const ax = fromX - (2.0 * cpX) + toX;\n        const ay = fromY - (2.0 * cpY) + toY;\n        const bx = (2.0 * cpX) - (2.0 * fromX);\n        const by = (2.0 * cpY) - (2.0 * fromY);\n        const a = 4.0 * ((ax * ax) + (ay * ay));\n        const b = 4.0 * ((ax * bx) + (ay * by));\n        const c = (bx * bx) + (by * by);\n\n        const s = 2.0 * Math.sqrt(a + b + c);\n        const a2 = Math.sqrt(a);\n        const a32 = 2.0 * a * a2;\n        const c2 = 2.0 * Math.sqrt(c);\n        const ba = b / a2;\n\n        return (\n            (a32 * s)\n                + (a2 * b * (s - c2))\n                + (\n                    ((4.0 * c * a) - (b * b))\n                   * Math.log(((2.0 * a2) + ba + s) / (ba + c2))\n                )\n        ) / (4.0 * a32);\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @private\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @param {number[]} points - Points to add segments to.\n     */\n    static curveTo(cpX: number, cpY: number, toX: number, toY: number, points: Array<number>): void\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const n = GRAPHICS_CURVES._segmentsCount(\n            QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY)\n        );\n\n        let xa = 0;\n        let ya = 0;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            const j = i / n;\n\n            xa = fromX + ((cpX - fromX) * j);\n            ya = fromY + ((cpY - fromY) * j);\n\n            points.push(xa + (((cpX + ((toX - cpX) * j)) - xa) * j),\n                ya + (((cpY + ((toY - cpY) * j)) - ya) * j));\n        }\n    }\n}\n","import type { LineStyle } from '../styles/LineStyle';\nimport type { FillStyle } from '../styles/FillStyle';\n\n/**\n * A structure to hold interim batch objects for Graphics.\n * @class\n * @memberof PIXI.graphicsUtils\n */\nexport class BatchPart\n{\n    public style: LineStyle | FillStyle;\n    public start: number;\n    public size: number;\n    public attribStart: number;\n    public attribSize: number;\n\n    constructor()\n    {\n        this.reset();\n    }\n\n    /**\n     * Begin batch part\n     *\n     * @param {PIXI.FillStyle | PIXI.LineStyle} style\n     * @param {number} startIndex\n     * @param {number} attribStart\n     */\n    public begin(style: LineStyle | FillStyle, startIndex: number, attribStart: number): void\n    {\n        this.reset();\n        this.style = style;\n        this.start = startIndex;\n        this.attribStart = attribStart;\n    }\n\n    /**\n     * End batch part\n     *\n     * @param {number} endIndex\n     * @param {number} endAttrib\n     */\n    public end(endIndex: number, endAttrib: number): void\n    {\n        this.attribSize = endAttrib - this.attribStart;\n        this.size = endIndex - this.start;\n    }\n\n    public reset(): void\n    {\n        this.style = null;\n        this.size = 0;\n        this.start = 0;\n        this.attribStart = 0;\n        this.attribSize = 0;\n    }\n}\n","/**\n * Generalized convenience utilities for Graphics.\n *\n * @namespace graphicsUtils\n * @memberof PIXI\n */\n\nimport { buildPoly } from './buildPoly';\nexport { buildPoly };\n\nimport { buildCircle } from './buildCircle';\nexport { buildCircle };\n\nimport { buildRectangle } from './buildRectangle';\nexport { buildRectangle };\n\nimport { buildRoundedRectangle } from './buildRoundedRectangle';\nexport { buildRoundedRectangle };\n\nexport * from './buildLine';\nexport * from './Star';\nexport * from './ArcUtils';\nexport * from './BezierUtils';\nexport * from './QuadraticUtils';\nexport * from './BatchPart';\n\n// for type only\nimport { BatchPart } from './BatchPart';\nimport { SHAPES } from '@pixi/math';\nimport { BatchDrawCall } from '@pixi/core';\nimport { IShapeBuildCommand } from './IShapeBuildCommand';\n\n/**\n * Map of fill commands for each shape type.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Object} FILL_COMMANDS\n */\nexport const FILL_COMMANDS: Record<SHAPES, IShapeBuildCommand> = {\n    [SHAPES.POLY]: buildPoly,\n    [SHAPES.CIRC]: buildCircle,\n    [SHAPES.ELIP]: buildCircle,\n    [SHAPES.RECT]: buildRectangle,\n    [SHAPES.RREC]: buildRoundedRectangle,\n};\n\n/**\n * Batch pool, stores unused batches for preventing allocations.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Array<PIXI.graphicsUtils.BatchPart>} BATCH_POOL\n */\nexport const BATCH_POOL: Array<BatchPart> = [];\n\n/**\n * Draw call pool, stores unused draw calls for preventing allocations.\n *\n * @memberof PIXI.graphicsUtils\n * @member {Array<PIXI.BatchDrawCall>} DRAW_CALL_POOL\n */\nexport const DRAW_CALL_POOL: Array<BatchDrawCall> = [];\n","import type { Matrix, SHAPES, IShape } from '@pixi/math';\nimport type { FillStyle } from './styles/FillStyle';\nimport type { LineStyle } from './styles/LineStyle';\n\n/**\n * A class to contain data useful for Graphics objects\n *\n * @class\n * @memberof PIXI\n */\nexport class GraphicsData\n{\n    shape: IShape;\n    lineStyle: LineStyle;\n    fillStyle: FillStyle;\n    matrix: Matrix;\n    type: SHAPES;\n    points: number[];\n    holes: Array<GraphicsData>;\n    /**\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.FillStyle} [fillStyle] - the width of the line to draw\n     * @param {PIXI.LineStyle} [lineStyle] - the color of the line to draw\n     * @param {PIXI.Matrix} [matrix] - Transform matrix\n     */\n    constructor(shape: IShape, fillStyle: FillStyle = null, lineStyle: LineStyle = null, matrix: Matrix = null)\n    {\n        /**\n         * The shape object to draw.\n         * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle}\n         */\n        this.shape = shape;\n\n        /**\n         * The style of the line.\n         * @member {PIXI.LineStyle}\n         */\n        this.lineStyle = lineStyle;\n\n        /**\n         * The style of the fill.\n         * @member {PIXI.FillStyle}\n         */\n        this.fillStyle = fillStyle;\n\n        /**\n         * The transform matrix.\n         * @member {PIXI.Matrix}\n         */\n        this.matrix = matrix;\n\n        /**\n         * The type of the shape, see the Const.Shapes file for all the existing types,\n         * @member {number}\n         */\n        this.type = shape.type;\n\n        /**\n         * The collection of points.\n         * @member {number[]}\n         */\n        this.points = [];\n\n        /**\n         * The collection of holes.\n         * @member {PIXI.GraphicsData[]}\n         */\n        this.holes = [];\n    }\n\n    /**\n     * Creates a new GraphicsData object with the same values as this one.\n     *\n     * @return {PIXI.GraphicsData} Cloned GraphicsData object\n     */\n    public clone(): GraphicsData\n    {\n        return new GraphicsData(\n            this.shape,\n            this.fillStyle,\n            this.lineStyle,\n            this.matrix\n        );\n    }\n\n    /**\n     * Destroys the Graphics data.\n     *\n     */\n    public destroy(): void\n    {\n        this.shape = null;\n        this.holes.length = 0;\n        this.holes = null;\n        this.points.length = 0;\n        this.points = null;\n        this.lineStyle = null;\n        this.fillStyle = null;\n    }\n}\n","import {\n    buildLine,\n    buildPoly,\n    BatchPart,\n    FILL_COMMANDS,\n    BATCH_POOL,\n    DRAW_CALL_POOL,\n} from './utils';\n\nimport {\n    BatchGeometry,\n    BatchDrawCall,\n    BatchTextureArray,\n    BaseTexture,\n    Texture,\n} from '@pixi/core';\n\nimport { DRAW_MODES, WRAP_MODES } from '@pixi/constants';\nimport { SHAPES, Point, Matrix } from '@pixi/math';\nimport { GraphicsData } from './GraphicsData';\nimport { premultiplyTint } from '@pixi/utils';\nimport { Bounds } from '@pixi/display';\n\nimport type { Circle, Ellipse, Polygon, Rectangle, RoundedRectangle, IPointData } from '@pixi/math';\nimport type { FillStyle } from './styles/FillStyle';\nimport type { LineStyle } from './styles/LineStyle';\n\n/**\n * @description Complex shape type\n * @todo Move to Math shapes\n */\ntype IShape = Circle | Ellipse | Polygon | Rectangle | RoundedRectangle;\n\nconst tmpPoint = new Point();\nconst tmpBounds = new Bounds();\n\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * GraphicsGeometry is designed to not be continually updating the geometry since it's expensive\n * to re-tesselate using **earcut**. Consider using {@link PIXI.Mesh} for this use-case, it's much faster.\n *\n * @class\n * @extends PIXI.BatchGeometry\n * @memberof PIXI\n */\nexport class GraphicsGeometry extends BatchGeometry\n{\n    /**\n     * The maximum number of points to consider an object \"batchable\",\n     * able to be batched by the renderer's batch system.\n     *\n     * @memberof PIXI.GraphicsGeometry\n     * @static\n     * @member {number} BATCHABLE_SIZE\n     * @default 100\n     */\n    public static BATCHABLE_SIZE = 100;\n\n    public closePointEps: number;\n    public boundsPadding: number;\n\n    uvsFloat32: Float32Array = null;\n    indicesUint16: Uint16Array | Uint32Array = null;\n    batchable: boolean;\n    points: Array<number>;\n    colors: Array<number>;\n    uvs: Array<number>;\n    indices: Array<number>;\n    textureIds: Array<number>;\n    graphicsData: Array<GraphicsData>;\n    drawCalls: Array<BatchDrawCall>;\n    batchDirty: number;\n    batches: Array<BatchPart>;\n\n    protected dirty: number;\n    protected cacheDirty: number;\n    protected clearDirty: number;\n    protected shapeIndex: number;\n    protected _bounds: Bounds;\n    protected boundsDirty: number;\n\n    constructor()\n    {\n        super();\n\n        /**\n         * An array of points to draw, 2 numbers per point\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.points = [];\n\n        /**\n         * The collection of colors\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.colors = [];\n\n        /**\n         * The UVs collection\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.uvs = [];\n\n        /**\n         * The indices of the vertices\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.indices = [];\n\n        /**\n         * Reference to the texture IDs.\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.textureIds = [];\n\n        /**\n         * The collection of drawn shapes.\n         *\n         * @member {PIXI.GraphicsData[]}\n         * @protected\n         */\n        this.graphicsData = [];\n\n        /**\n         * Used to detect if the graphics object has changed.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.dirty = 0;\n\n        /**\n         * Batches need to regenerated if the geometry is updated.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.batchDirty = -1;\n\n        /**\n         * Used to check if the cache is dirty.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.cacheDirty = -1;\n\n        /**\n         * Used to detect if we cleared the graphicsData.\n         *\n         * @member {number}\n         * @default 0\n         * @protected\n         */\n        this.clearDirty = 0;\n\n        /**\n         * List of current draw calls drived from the batches.\n         *\n         * @member {object[]}\n         * @protected\n         */\n        this.drawCalls = [];\n\n        /**\n         * Intermediate abstract format sent to batch system.\n         * Can be converted to drawCalls or to batchable objects.\n         *\n         * @member {PIXI.graphicsUtils.BatchPart[]}\n         * @protected\n         */\n        this.batches = [];\n\n        /**\n         * Index of the last batched shape in the stack of calls.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.shapeIndex = 0;\n\n        /**\n         * Cached bounds.\n         *\n         * @member {PIXI.Bounds}\n         * @protected\n         */\n        this._bounds = new Bounds();\n\n        /**\n         * The bounds dirty flag.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.boundsDirty = -1;\n\n        /**\n         * Padding to add to the bounds.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.boundsPadding = 0;\n\n        this.batchable = false;\n\n        this.indicesUint16 = null;\n\n        this.uvsFloat32 = null;\n\n        /**\n         * Minimal distance between points that are considered different.\n         * Affects line tesselation.\n         *\n         * @member {number}\n         */\n        this.closePointEps = 1e-4;\n    }\n\n    /**\n     * Get the current bounds of the graphic geometry.\n     *\n     * @member {PIXI.Bounds}\n     * @readonly\n     */\n    public get bounds(): Bounds\n    {\n        if (this.boundsDirty !== this.dirty)\n        {\n            this.boundsDirty = this.dirty;\n            this.calculateBounds();\n        }\n\n        return this._bounds;\n    }\n\n    /**\n     * Call if you changed graphicsData manually.\n     * Empties all batch buffers.\n     */\n    protected invalidate(): void\n    {\n        this.boundsDirty = -1;\n        this.dirty++;\n        this.batchDirty++;\n        this.shapeIndex = 0;\n\n        this.points.length = 0;\n        this.colors.length = 0;\n        this.uvs.length = 0;\n        this.indices.length = 0;\n        this.textureIds.length = 0;\n\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].texArray.clear();\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const batchPart = this.batches[i];\n\n            batchPart.reset();\n            BATCH_POOL.push(batchPart);\n        }\n\n        this.batches.length = 0;\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.GraphicsGeometry} This GraphicsGeometry object. Good for chaining method calls\n     */\n    public clear(): GraphicsGeometry\n    {\n        if (this.graphicsData.length > 0)\n        {\n            this.invalidate();\n            this.clearDirty++;\n            this.graphicsData.length = 0;\n        }\n\n        return this;\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.FillStyle} fillStyle - Defines style of the fill.\n     * @param {PIXI.LineStyle} lineStyle - Defines style of the lines.\n     * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n     * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n     */\n    public drawShape(\n        shape: IShape,\n        fillStyle: FillStyle = null,\n        lineStyle: LineStyle = null,\n        matrix: Matrix = null): GraphicsGeometry\n    {\n        const data = new GraphicsData(shape, fillStyle, lineStyle, matrix);\n\n        this.graphicsData.push(data);\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n     * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n     */\n    public drawHole(shape: IShape, matrix: Matrix = null): GraphicsGeometry\n    {\n        if (!this.graphicsData.length)\n        {\n            return null;\n        }\n\n        const data = new GraphicsData(shape, null, null, matrix);\n\n        const lastShape = this.graphicsData[this.graphicsData.length - 1];\n\n        data.lineStyle = lastShape.lineStyle;\n\n        lastShape.holes.push(data);\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Destroys the GraphicsGeometry object.\n     *\n     */\n    public destroy(): void\n    {\n        super.destroy();\n\n        // destroy each of the GraphicsData objects\n        for (let i = 0; i < this.graphicsData.length; ++i)\n        {\n            this.graphicsData[i].destroy();\n        }\n\n        this.points.length = 0;\n        this.points = null;\n        this.colors.length = 0;\n        this.colors = null;\n        this.uvs.length = 0;\n        this.uvs = null;\n        this.indices.length = 0;\n        this.indices = null;\n        this.indexBuffer.destroy();\n        this.indexBuffer = null;\n        this.graphicsData.length = 0;\n        this.graphicsData = null;\n        this.drawCalls.length = 0;\n        this.drawCalls = null;\n        this.batches.length = 0;\n        this.batches = null;\n        this._bounds = null;\n    }\n\n    /**\n     * Check to see if a point is contained within this geometry.\n     *\n     * @param {PIXI.IPointData} point - Point to check if it's contained.\n     * @return {Boolean} `true` if the point is contained within geometry.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        const graphicsData = this.graphicsData;\n\n        for (let i = 0; i < graphicsData.length; ++i)\n        {\n            const data = graphicsData[i];\n\n            if (!data.fillStyle.visible)\n            {\n                continue;\n            }\n\n            // only deal with fills..\n            if (data.shape)\n            {\n                if (data.matrix)\n                {\n                    data.matrix.applyInverse(point, tmpPoint);\n                }\n                else\n                {\n                    tmpPoint.copyFrom(point);\n                }\n\n                if (data.shape.contains(tmpPoint.x, tmpPoint.y))\n                {\n                    let hitHole = false;\n\n                    if (data.holes)\n                    {\n                        for (let i = 0; i < data.holes.length; i++)\n                        {\n                            const hole = data.holes[i];\n\n                            if (hole.shape.contains(tmpPoint.x, tmpPoint.y))\n                            {\n                                hitHole = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!hitHole)\n                    {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Generates intermediate batch data. Either gets converted to drawCalls\n     * or used to convert to batch objects directly by the Graphics object.\n     *\n     * @param {boolean} [aloow32Indices] - Allow using 32-bit indices for preventings artefacts when more that 65535 vertices\n     */\n    updateBatches(allow32Indices?: boolean): void\n    {\n        if (!this.graphicsData.length)\n        {\n            this.batchable = true;\n\n            return;\n        }\n\n        if (!this.validateBatching())\n        {\n            return;\n        }\n\n        this.cacheDirty = this.dirty;\n\n        const uvs = this.uvs;\n        const graphicsData = this.graphicsData;\n\n        let batchPart: BatchPart = null;\n\n        let currentStyle = null;\n\n        if (this.batches.length > 0)\n        {\n            batchPart = this.batches[this.batches.length - 1];\n            currentStyle = batchPart.style;\n        }\n\n        for (let i = this.shapeIndex; i < graphicsData.length; i++)\n        {\n            this.shapeIndex++;\n\n            const data = graphicsData[i];\n            const fillStyle = data.fillStyle;\n            const lineStyle = data.lineStyle;\n            const command = FILL_COMMANDS[data.type];\n\n            // build out the shapes points..\n            command.build(data);\n\n            if (data.matrix)\n            {\n                this.transformPoints(data.points, data.matrix);\n            }\n\n            for (let j = 0; j < 2; j++)\n            {\n                const style = (j === 0) ? fillStyle : lineStyle;\n\n                if (!style.visible) continue;\n\n                const nextTexture = style.texture.baseTexture;\n                const index = this.indices.length;\n                const attribIndex = this.points.length / 2;\n\n                nextTexture.wrapMode = WRAP_MODES.REPEAT;\n\n                if (j === 0)\n                {\n                    this.processFill(data);\n                }\n                else\n                {\n                    this.processLine(data);\n                }\n\n                const size = (this.points.length / 2) - attribIndex;\n\n                if (size === 0) continue;\n                // close batch if style is different\n                if (batchPart && !this._compareStyles(currentStyle, style))\n                {\n                    batchPart.end(index, attribIndex);\n                    batchPart = null;\n                }\n                // spawn new batch if its first batch or previous was closed\n                if (!batchPart)\n                {\n                    batchPart = BATCH_POOL.pop() || new BatchPart();\n                    batchPart.begin(style, index, attribIndex);\n                    this.batches.push(batchPart);\n                    currentStyle = style;\n                }\n\n                this.addUvs(this.points, uvs, style.texture, attribIndex, size, style.matrix);\n            }\n        }\n\n        const index = this.indices.length;\n        const attrib = this.points.length / 2;\n\n        if (batchPart)\n        {\n            batchPart.end(index, attrib);\n        }\n\n        if (this.batches.length === 0)\n        {\n            // there are no visible styles in GraphicsData\n            // its possible that someone wants Graphics just for the bounds\n            this.batchable = true;\n\n            return;\n        }\n\n        // prevent allocation when length is same as buffer\n        if (this.indicesUint16 && this.indices.length === this.indicesUint16.length)\n        {\n            this.indicesUint16.set(this.indices);\n        }\n        else\n        {\n            const need32\n                = attrib > 0xffff && allow32Indices;\n\n            this.indicesUint16 = need32 ? new Uint32Array(this.indices) : new Uint16Array(this.indices);\n        }\n\n        // TODO make this a const..\n        this.batchable = this.isBatchable();\n\n        if (this.batchable)\n        {\n            this.packBatches();\n        }\n        else\n        {\n            this.buildDrawCalls();\n        }\n    }\n\n    /**\n     * Affinity check\n     *\n     * @param {PIXI.FillStyle | PIXI.LineStyle} styleA\n     * @param {PIXI.FillStyle | PIXI.LineStyle} styleB\n     */\n    protected _compareStyles(styleA: FillStyle | LineStyle, styleB: FillStyle | LineStyle): boolean\n    {\n        if (!styleA || !styleB)\n        {\n            return false;\n        }\n\n        if (styleA.texture.baseTexture !== styleB.texture.baseTexture)\n        {\n            return false;\n        }\n\n        if (styleA.color + styleA.alpha !== styleB.color + styleB.alpha)\n        {\n            return false;\n        }\n\n        if (!!(styleA as LineStyle).native !== !!(styleB as LineStyle).native)\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Test geometry for batching process.\n     *\n     * @protected\n     */\n    protected validateBatching(): boolean\n    {\n        if (this.dirty === this.cacheDirty || !this.graphicsData.length)\n        {\n            return false;\n        }\n\n        for (let i = 0, l = this.graphicsData.length; i < l; i++)\n        {\n            const data = this.graphicsData[i];\n            const fill = data.fillStyle;\n            const line = data.lineStyle;\n\n            if (fill && !fill.texture.baseTexture.valid) return false;\n            if (line && !line.texture.baseTexture.valid) return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Offset the indices so that it works with the batcher.\n     *\n     * @protected\n     */\n    protected packBatches(): void\n    {\n        this.batchDirty++;\n        this.uvsFloat32 = new Float32Array(this.uvs);\n\n        const batches = this.batches;\n\n        for (let i = 0, l = batches.length; i < l; i++)\n        {\n            const batch = batches[i];\n\n            for (let j = 0; j < batch.size; j++)\n            {\n                const index = batch.start + j;\n\n                this.indicesUint16[index] = this.indicesUint16[index] - batch.attribStart;\n            }\n        }\n    }\n\n    /**\n     * Checks to see if this graphics geometry can be batched.\n     * Currently it needs to be small enough and not contain any native lines.\n     *\n     * @protected\n     */\n    protected isBatchable(): boolean\n    {\n        // prevent heavy mesh batching\n        if (this.points.length > 0xffff * 2)\n        {\n            return false;\n        }\n\n        const batches = this.batches;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            if ((batches[i].style as LineStyle).native)\n            {\n                return false;\n            }\n        }\n\n        return (this.points.length < GraphicsGeometry.BATCHABLE_SIZE * 2);\n    }\n\n    /**\n     * Converts intermediate batches data to drawCalls.\n     *\n     * @protected\n     */\n    protected buildDrawCalls(): void\n    {\n        let TICK = ++BaseTexture._globalBatch;\n\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].texArray.clear();\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        const colors = this.colors;\n        const textureIds = this.textureIds;\n\n        let currentGroup: BatchDrawCall =  DRAW_CALL_POOL.pop();\n\n        if (!currentGroup)\n        {\n            currentGroup = new BatchDrawCall();\n            currentGroup.texArray = new BatchTextureArray();\n        }\n        currentGroup.texArray.count = 0;\n        currentGroup.start = 0;\n        currentGroup.size = 0;\n        currentGroup.type = DRAW_MODES.TRIANGLES;\n\n        let textureCount = 0;\n        let currentTexture = null;\n        let textureId = 0;\n        let native = false;\n        let drawMode = DRAW_MODES.TRIANGLES;\n\n        let index = 0;\n\n        this.drawCalls.push(currentGroup);\n\n        // TODO - this can be simplified\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const data = this.batches[i];\n\n            // TODO add some full on MAX_TEXTURE CODE..\n            const MAX_TEXTURES = 8;\n\n            // Forced cast for checking `native` without errors\n            const style = data.style as LineStyle;\n\n            const nextTexture = style.texture.baseTexture;\n\n            if (native !== !!style.native)\n            {\n                native = !!style.native;\n                drawMode = native ? DRAW_MODES.LINES : DRAW_MODES.TRIANGLES;\n\n                // force the batch to break!\n                currentTexture = null;\n                textureCount = MAX_TEXTURES;\n                TICK++;\n            }\n\n            if (currentTexture !== nextTexture)\n            {\n                currentTexture = nextTexture;\n\n                if (nextTexture._batchEnabled !== TICK)\n                {\n                    if (textureCount === MAX_TEXTURES)\n                    {\n                        TICK++;\n\n                        textureCount = 0;\n\n                        if (currentGroup.size > 0)\n                        {\n                            currentGroup = DRAW_CALL_POOL.pop();\n                            if (!currentGroup)\n                            {\n                                currentGroup = new BatchDrawCall();\n                                currentGroup.texArray = new BatchTextureArray();\n                            }\n                            this.drawCalls.push(currentGroup);\n                        }\n\n                        currentGroup.start = index;\n                        currentGroup.size = 0;\n                        currentGroup.texArray.count = 0;\n                        currentGroup.type = drawMode;\n                    }\n\n                    // TODO add this to the render part..\n                    // Hack! Because texture has protected `touched`\n                    nextTexture.touched = 1;// touch;\n\n                    nextTexture._batchEnabled = TICK;\n                    nextTexture._batchLocation = textureCount;\n                    nextTexture.wrapMode = 10497;\n\n                    currentGroup.texArray.elements[currentGroup.texArray.count++] = nextTexture;\n                    textureCount++;\n                }\n            }\n\n            currentGroup.size += data.size;\n            index += data.size;\n\n            textureId = nextTexture._batchLocation;\n\n            this.addColors(colors, style.color, style.alpha, data.attribSize);\n            this.addTextureIds(textureIds, textureId, data.attribSize);\n        }\n\n        BaseTexture._globalBatch = TICK;\n\n        // upload..\n        // merge for now!\n        this.packAttributes();\n    }\n\n    /**\n     * Packs attributes to single buffer.\n     *\n     * @protected\n     */\n    protected packAttributes(): void\n    {\n        const verts = this.points;\n        const uvs = this.uvs;\n        const colors = this.colors;\n        const textureIds = this.textureIds;\n\n        // verts are 2 positions.. so we * by 3 as there are 6 properties.. then 4 cos its bytes\n        const glPoints = new ArrayBuffer(verts.length * 3 * 4);\n        const f32 = new Float32Array(glPoints);\n        const u32 = new Uint32Array(glPoints);\n\n        let p = 0;\n\n        for (let i = 0; i < verts.length / 2; i++)\n        {\n            f32[p++] = verts[i * 2];\n            f32[p++] = verts[(i * 2) + 1];\n\n            f32[p++] = uvs[i * 2];\n            f32[p++] = uvs[(i * 2) + 1];\n\n            u32[p++] = colors[i];\n\n            f32[p++] = textureIds[i];\n        }\n\n        this._buffer.update(glPoints);\n        this._indexBuffer.update(this.indicesUint16);\n    }\n\n    /**\n     * Process fill part of Graphics.\n     *\n     * @param {PIXI.GraphicsData} data\n     * @protected\n     */\n    protected processFill(data: GraphicsData): void\n    {\n        if (data.holes.length)\n        {\n            this.processHoles(data.holes);\n\n            buildPoly.triangulate(data, this);\n        }\n        else\n        {\n            const command = FILL_COMMANDS[data.type];\n\n            command.triangulate(data, this);\n        }\n    }\n\n    /**\n     * Process line part of Graphics.\n     *\n     * @param {PIXI.GraphicsData} data\n     * @protected\n     */\n    protected processLine(data: GraphicsData): void\n    {\n        buildLine(data, this);\n\n        for (let i = 0; i < data.holes.length; i++)\n        {\n            buildLine(data.holes[i], this);\n        }\n    }\n\n    /**\n     * Process the holes data.\n     *\n     * @param {PIXI.GraphicsData[]} holes - Holes to render\n     * @protected\n     */\n    protected processHoles(holes: Array<GraphicsData>): void\n    {\n        for (let i = 0; i < holes.length; i++)\n        {\n            const hole = holes[i];\n            const command = FILL_COMMANDS[hole.type];\n\n            command.build(hole);\n\n            if (hole.matrix)\n            {\n                this.transformPoints(hole.points, hole.matrix);\n            }\n        }\n    }\n\n    /**\n     * Update the local bounds of the object. Expensive to use performance-wise.\n     *\n     * @protected\n     */\n    protected calculateBounds(): void\n    {\n        const bounds = this._bounds;\n        const sequenceBounds = tmpBounds;\n        let curMatrix = Matrix.IDENTITY;\n\n        this._bounds.clear();\n        sequenceBounds.clear();\n\n        for (let i = 0; i < this.graphicsData.length; i++)\n        {\n            const data = this.graphicsData[i];\n            const shape = data.shape;\n            const type = data.type;\n            const lineStyle = data.lineStyle;\n            const nextMatrix = data.matrix || Matrix.IDENTITY;\n            let lineWidth = 0.0;\n\n            if (lineStyle && lineStyle.visible)\n            {\n                const alignment = lineStyle.alignment;\n\n                lineWidth = lineStyle.width;\n\n                if (type === SHAPES.POLY)\n                {\n                    lineWidth = lineWidth * (0.5 + Math.abs(0.5 - alignment));\n                }\n                else\n                {\n                    lineWidth = lineWidth * Math.max(0, alignment);\n                }\n            }\n\n            if (curMatrix !== nextMatrix)\n            {\n                if (!sequenceBounds.isEmpty())\n                {\n                    bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n                    sequenceBounds.clear();\n                }\n                curMatrix = nextMatrix;\n            }\n\n            if (type === SHAPES.RECT || type === SHAPES.RREC)\n            {\n                const rect = shape as Rectangle | RoundedRectangle;\n\n                sequenceBounds.addFramePad(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height,\n                    lineWidth, lineWidth);\n            }\n            else if (type === SHAPES.CIRC)\n            {\n                const circle = shape as Circle;\n\n                sequenceBounds.addFramePad(circle.x, circle.y, circle.x, circle.y,\n                    circle.radius + lineWidth, circle.radius + lineWidth);\n            }\n            else if (type === SHAPES.ELIP)\n            {\n                const ellipse = shape as Ellipse;\n\n                sequenceBounds.addFramePad(ellipse.x, ellipse.y, ellipse.x, ellipse.y,\n                    ellipse.width + lineWidth, ellipse.height + lineWidth);\n            }\n            else\n            {\n                const poly = shape as Polygon;\n                // adding directly to the bounds\n\n                bounds.addVerticesMatrix(curMatrix, (poly.points as any), 0, poly.points.length, lineWidth, lineWidth);\n            }\n        }\n\n        if (!sequenceBounds.isEmpty())\n        {\n            bounds.addBoundsMatrix(sequenceBounds, curMatrix);\n        }\n\n        bounds.pad(this.boundsPadding, this.boundsPadding);\n    }\n\n    /**\n     * Transform points using matrix.\n     *\n     * @protected\n     * @param {number[]} points - Points to transform\n     * @param {PIXI.Matrix} matrix - Transform matrix\n     */\n    protected transformPoints(points: Array<number>, matrix: Matrix): void\n    {\n        for (let i = 0; i < points.length / 2; i++)\n        {\n            const x = points[(i * 2)];\n            const y = points[(i * 2) + 1];\n\n            points[(i * 2)] = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n            points[(i * 2) + 1] = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n        }\n    }\n\n    /**\n     * Add colors.\n     *\n     * @protected\n     * @param {number[]} colors - List of colors to add to\n     * @param {number} color - Color to add\n     * @param {number} alpha - Alpha to use\n     * @param {number} size - Number of colors to add\n     */\n    protected addColors(colors: Array<number>, color: number, alpha: number, size: number): void\n    {\n        // TODO use the premultiply bits Ivan added\n        const rgb = (color >> 16) + (color & 0xff00) + ((color & 0xff) << 16);\n\n        const rgba =  premultiplyTint(rgb, alpha);\n\n        while (size-- > 0)\n        {\n            colors.push(rgba);\n        }\n    }\n\n    /**\n     * Add texture id that the shader/fragment wants to use.\n     *\n     * @protected\n     * @param {number[]} textureIds\n     * @param {number} id\n     * @param {number} size\n     */\n    protected addTextureIds(textureIds: Array<number>, id: number, size: number): void\n    {\n        while (size-- > 0)\n        {\n            textureIds.push(id);\n        }\n    }\n\n    /**\n     * Generates the UVs for a shape.\n     *\n     * @protected\n     * @param {number[]} verts - Vertices\n     * @param {number[]} uvs - UVs\n     * @param {PIXI.Texture} texture - Reference to Texture\n     * @param {number} start - Index buffer start index.\n     * @param {number} size - The size/length for index buffer.\n     * @param {PIXI.Matrix} [matrix] - Optional transform for all points.\n     */\n    protected addUvs(\n        verts: Array<number>,\n        uvs: Array<number>,\n        texture: Texture,\n        start: number, size:\n        number, matrix:\n        Matrix = null): void\n    {\n        let index = 0;\n        const uvsStart = uvs.length;\n        const frame = texture.frame;\n\n        while (index < size)\n        {\n            let x = verts[(start + index) * 2];\n            let y = verts[((start + index) * 2) + 1];\n\n            if (matrix)\n            {\n                const nx = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n\n                y = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n                x = nx;\n            }\n\n            index++;\n\n            uvs.push(x / frame.width, y / frame.height);\n        }\n\n        const baseTexture = texture.baseTexture;\n\n        if (frame.width < baseTexture.width\n            || frame.height < baseTexture.height)\n        {\n            this.adjustUvs(uvs, texture, uvsStart, size);\n        }\n    }\n\n    /**\n     * Modify uvs array according to position of texture region\n     * Does not work with rotated or trimmed textures\n     *\n     * @param {number[]} uvs - array\n     * @param {PIXI.Texture} texture - region\n     * @param {number} start - starting index for uvs\n     * @param {number} size - how many points to adjust\n     */\n    protected adjustUvs(uvs: Array<number>, texture: Texture, start: number, size: number): void\n    {\n        const baseTexture = texture.baseTexture;\n        const eps = 1e-6;\n        const finish = start + (size * 2);\n        const frame = texture.frame;\n        const scaleX = frame.width / baseTexture.width;\n        const scaleY = frame.height / baseTexture.height;\n        let offsetX = frame.x / frame.width;\n        let offsetY = frame.y / frame.height;\n        let minX = Math.floor(uvs[start] + eps);\n        let minY = Math.floor(uvs[start + 1] + eps);\n\n        for (let i = start + 2; i < finish; i += 2)\n        {\n            minX = Math.min(minX, Math.floor(uvs[i] + eps));\n            minY = Math.min(minY, Math.floor(uvs[i + 1] + eps));\n        }\n        offsetX -= minX;\n        offsetY -= minY;\n        for (let i = start; i < finish; i += 2)\n        {\n            uvs[i] = (uvs[i] + offsetX) * scaleX;\n            uvs[i + 1] = (uvs[i + 1] + offsetY) * scaleY;\n        }\n    }\n}\n","import { FillStyle } from './FillStyle';\nimport { LINE_JOIN, LINE_CAP } from '../const';\n\n/**\n * Represents the line style for Graphics.\n * @memberof PIXI\n * @class\n * @extends PIXI.FillStyle\n */\nexport class LineStyle extends FillStyle\n{\n    /**\n     * The width (thickness) of any lines drawn.\n     *\n     * @member {number}\n     * @default 0\n     */\n    public width = 0;\n\n    /**\n     * The alignment of any lines drawn (0.5 = middle, 1 = outer, 0 = inner).\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    public alignment = 0.5;\n\n    /**\n     * If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     *\n     * @member {boolean}\n     * @default false\n     */\n    public native = false;\n\n    /**\n     * Line cap style.\n     *\n     * @member {PIXI.LINE_CAP}\n     * @default PIXI.LINE_CAP.BUTT\n     */\n    public cap = LINE_CAP.BUTT;\n\n    /**\n     * Line join style.\n     *\n     * @member {PIXI.LINE_JOIN}\n     * @default PIXI.LINE_JOIN.MITER\n     */\n    public join = LINE_JOIN.MITER;\n\n    /**\n     * Miter limit.\n     *\n     * @member {number}\n     * @default 10\n     */\n    public miterLimit = 10;\n\n    /**\n     * Clones the object\n     *\n     * @return {PIXI.LineStyle}\n     */\n    public clone(): LineStyle\n    {\n        const obj = new LineStyle();\n\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n        obj.width = this.width;\n        obj.alignment = this.alignment;\n        obj.native = this.native;\n        obj.cap = this.cap;\n        obj.join = this.join;\n        obj.miterLimit = this.miterLimit;\n\n        return obj;\n    }\n\n    /**\n     * Reset the line style to default.\n     */\n    public reset(): void\n    {\n        super.reset();\n\n        // Override default line style color\n        this.color = 0x0;\n\n        this.alignment = 0.5;\n        this.width = 0;\n        this.native = false;\n    }\n}\n","import {\n    Circle,\n    Ellipse,\n    PI_2,\n    Point,\n    Polygon,\n    Rectangle,\n    RoundedRectangle,\n    Matrix,\n    SHAPES,\n} from '@pixi/math';\n\nimport { Texture, UniformGroup, State, Renderer, BatchDrawCall } from '@pixi/core';\nimport { BezierUtils, QuadraticUtils, ArcUtils, Star } from './utils';\nimport { hex2rgb, deprecation } from '@pixi/utils';\nimport { GraphicsGeometry } from './GraphicsGeometry';\nimport { FillStyle } from './styles/FillStyle';\nimport { LineStyle } from './styles/LineStyle';\nimport { BLEND_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { Shader } from '@pixi/core';\n\nimport type { IShape, IPointData } from '@pixi/math';\nimport type { IDestroyOptions } from '@pixi/display';\nimport { LINE_JOIN, LINE_CAP } from './const';\n\n/**\n * Batch element computed from Graphics geometry\n */\nexport interface IGraphicsBatchElement {\n    vertexData: Float32Array;\n    blendMode: BLEND_MODES;\n    indices: Uint16Array | Uint32Array;\n    uvs: Float32Array;\n    alpha: number;\n    worldAlpha: number;\n    _batchRGB: number[];\n    _tintRGB: number;\n    _texture: Texture;\n}\n\nexport interface IFillStyleOptions {\n    color?: number;\n    alpha?: number;\n    texture?: Texture;\n    matrix?: Matrix;\n}\n\nexport interface ILineStyleOptions extends IFillStyleOptions {\n    width?: number;\n    alignment?: number;\n    native?: boolean;\n    cap?: LINE_CAP;\n    join?: LINE_JOIN;\n    miterLimit?: number;\n}\n\nconst temp = new Float32Array(3);\n\n// a default shaders map used by graphics..\nconst DEFAULT_SHADERS: {[key: string]: Shader} = {};\n\nexport interface Graphics extends GlobalMixins.Graphics, Container {}\n\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * Note that because Graphics can share a GraphicsGeometry with other instances,\n * it is necessary to call `destroy()` to properly dereference the underlying\n * GraphicsGeometry and avoid a memory leak. Alternatively, keep using the same\n * Graphics instance and call `clear()` between redraws.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class Graphics extends Container\n{\n    /**\n     * Temporary point to use for containsPoint\n     *\n     * @static\n     * @private\n     * @member {PIXI.Point}\n     */\n\n    static _TEMP_POINT = new Point();\n\n    public shader: Shader;\n    public pluginName: string;\n\n    protected currentPath: Polygon;\n    protected batches: Array<IGraphicsBatchElement>;\n    protected batchTint: number;\n    protected batchDirty: number;\n    protected vertexData: Float32Array;\n\n    protected _fillStyle: FillStyle;\n    protected _lineStyle: LineStyle;\n    protected _matrix: Matrix;\n    protected _holeMode: boolean;\n    protected _transformID: number;\n    protected _tint: number;\n\n    private state: State;\n    private _geometry: GraphicsGeometry;\n\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.\n     *\n     * @member {PIXI.GraphicsGeometry}\n     * @readonly\n     */\n    public get geometry(): GraphicsGeometry\n    {\n        return this._geometry;\n    }\n\n    /**\n     * @param {PIXI.GraphicsGeometry} [geometry=null] - Geometry to use, if omitted\n     *        will create a new GraphicsGeometry instance.\n     */\n    constructor(geometry: GraphicsGeometry = null)\n    {\n        super();\n\n        this._geometry = geometry || new GraphicsGeometry();\n        this._geometry.refCount++;\n\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Graphics objects.\n         *\n         * @member {PIXI.Shader}\n         */\n        this.shader = null;\n\n        /**\n         * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         *\n         * @member {PIXI.State}\n         */\n        this.state = State.for2d();\n\n        /**\n         * Current fill style\n         *\n         * @member {PIXI.FillStyle}\n         * @protected\n         */\n        this._fillStyle = new FillStyle();\n\n        /**\n         * Current line style\n         *\n         * @member {PIXI.LineStyle}\n         * @protected\n         */\n        this._lineStyle = new LineStyle();\n\n        /**\n         * Current shape transform matrix.\n         *\n         * @member {PIXI.Matrix}\n         * @protected\n         */\n        this._matrix = null;\n\n        /**\n         * Current hole mode is enabled.\n         *\n         * @member {boolean}\n         * @default false\n         * @protected\n         */\n        this._holeMode = false;\n\n        /**\n         * Current path\n         *\n         * @member {PIXI.Polygon}\n         * @protected\n         */\n        this.currentPath = null;\n\n        /**\n         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n         * This is useful if your graphics element does not change often, as it will speed up the rendering\n         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n         * you are constantly redrawing the graphics element.\n         *\n         * @name cacheAsBitmap\n         * @member {boolean}\n         * @memberof PIXI.Graphics#\n         * @default false\n         */\n\n        /**\n         * A collections of batches! These can be drawn by the renderer batch system.\n         *\n         * @protected\n         * @member {object[]}\n         */\n        this.batches = [];\n\n        /**\n         * Update dirty for limiting calculating tints for batches.\n         *\n         * @protected\n         * @member {number}\n         * @default -1\n         */\n        this.batchTint = -1;\n\n        /**\n         * Update dirty for limiting calculating batches.\n         *\n         * @protected\n         * @member {number}\n         * @default -1\n         */\n        this.batchDirty = -1;\n\n        /**\n         * Copy of the object vertex data.\n         *\n         * @protected\n         * @member {Float32Array}\n         */\n        this.vertexData = null;\n\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = 'batch';\n\n        this._transformID = -1;\n\n        // Set default\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n    }\n\n    /**\n     * Creates a new Graphics object with the same values as this one.\n     * Note that only the geometry of the object is cloned, not its transform (position,scale,etc)\n     *\n     * @return {PIXI.Graphics} A clone of the graphics object\n     */\n    public clone(): Graphics\n    {\n        this.finishPoly();\n\n        return new Graphics(this._geometry);\n    }\n\n    /**\n     * The blend mode to be applied to the graphic shape. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL;\n     * @see PIXI.BLEND_MODES\n     */\n    public set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    public get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * The tint applied to the graphic shape. This is a hex value. A value of\n     * 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        this._tint = value;\n    }\n\n    /**\n     * The current fill style.\n     *\n     * @member {PIXI.FillStyle}\n     * @readonly\n     */\n    public get fill(): FillStyle\n    {\n        return this._fillStyle;\n    }\n\n    /**\n     * The current line style.\n     *\n     * @member {PIXI.LineStyle}\n     * @readonly\n     */\n    public get line(): LineStyle\n    {\n        return this._lineStyle;\n    }\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     *\n     * @method PIXI.Graphics#lineStyle\n     * @param {number} [width=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [color=0x0] - color of the line to draw, will update the objects stored style\n     * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n     * @param {boolean} [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     *\n     * @param {object} [options] - Line style options\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n     * @param {number}[options.miterLimit=10] - miter limit ratio\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineStyle(options: ILineStyleOptions = null): this\n    {\n        // Support non-object params: (width, color, alpha, alignment, native)\n        if (typeof options === 'number')\n        {\n            // eslint-disable-next-line\n            const args = arguments;\n\n            options = {\n                width: args[0] || 0,\n                color: args[1] || 0x0,\n                alpha: args[2] !== undefined ? args[2] : 1,\n                alignment: args[3] !== undefined ? args[3] : 0.5,\n                native: !!args[4],\n            };\n        }\n\n        return this.lineTextureStyle(options);\n    }\n\n    /**\n     * Like line style but support texture for line fill.\n     *\n     * @param {object} [options] - Collection of options for setting line style.\n     * @param {number} [options.width=0] - width of the line to draw, will update the objects stored style\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to use\n     * @param {number} [options.color=0x0] - color of the line to draw, will update the objects stored style.\n     *  Default 0xFFFFFF if texture present.\n     * @param {number} [options.alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {PIXI.Matrix} [options.matrix=null] - Texture matrix to transform texture\n     * @param {number} [options.alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n     * @param {boolean} [options.native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @param {PIXI.LINE_CAP}[options.cap=PIXI.LINE_CAP.BUTT] - line cap style\n     * @param {PIXI.LINE_JOIN}[options.join=PIXI.LINE_JOIN.MITER] - line join style\n     * @param {number}[options.miterLimit=10] - miter limit ratio\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineTextureStyle(options: ILineStyleOptions): this\n    {\n        // backward compatibility with params: (width, texture,\n        // color, alpha, matrix, alignment, native)\n        if (typeof options === 'number')\n        {\n            deprecation('v5.2.0', 'Please use object-based options for Graphics#lineTextureStyle');\n\n            // eslint-disable-next-line\n            const [width, texture, color, alpha, matrix, alignment, native] = arguments as any;\n\n            options = { width, texture, color, alpha, matrix, alignment, native };\n\n            // Remove undefined keys\n            Object.keys(options).forEach((key) => (options as any)[key] === undefined && delete (options as any)[key]);\n        }\n\n        // Apply defaults\n        options = Object.assign({\n            width: 0,\n            texture: Texture.WHITE,\n            color: (options && options.texture) ? 0xFFFFFF : 0x0,\n            alpha: 1,\n            matrix: null,\n            alignment: 0.5,\n            native: false,\n            cap: LINE_CAP.BUTT,\n            join: LINE_JOIN.MITER,\n            miterLimit: 10,\n        }, options);\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.width > 0 && options.alpha > 0;\n\n        if (!visible)\n        {\n            this._lineStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._lineStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Start a polygon object internally\n     * @protected\n     */\n    protected startPoly(): void\n    {\n        if (this.currentPath)\n        {\n            const points = this.currentPath.points;\n            const len = this.currentPath.points.length;\n\n            if (len > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = new Polygon();\n                this.currentPath.closeStroke = false;\n                this.currentPath.points.push(points[len - 2], points[len - 1]);\n            }\n        }\n        else\n        {\n            this.currentPath = new Polygon();\n            this.currentPath.closeStroke = false;\n        }\n    }\n\n    /**\n     * Finish the polygon object.\n     * @protected\n     */\n    finishPoly(): void\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = null;\n            }\n            else\n            {\n                this.currentPath.points.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Moves the current drawing position to x, y.\n     *\n     * @param {number} x - the X coordinate to move to\n     * @param {number} y - the Y coordinate to move to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public moveTo(x: number, y: number): this\n    {\n        this.startPoly();\n        this.currentPath.points[0] = x;\n        this.currentPath.points[1] = y;\n\n        return this;\n    }\n\n    /**\n     * Draws a line using the current line style from the current drawing position to (x, y);\n     * The current drawing position is then set to (x, y).\n     *\n     * @param {number} x - the X coordinate to draw to\n     * @param {number} y - the Y coordinate to draw to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public lineTo(x: number, y: number): this\n    {\n        if (!this.currentPath)\n        {\n            this.moveTo(0, 0);\n        }\n\n        // remove duplicates..\n        const points = this.currentPath.points;\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n    /**\n     * Initialize the curve\n     *\n     * @protected\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     */\n    protected _initCurve(x = 0, y = 0): void\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length === 0)\n            {\n                this.currentPath.points = [x, y];\n            }\n        }\n        else\n        {\n            this.moveTo(x, y);\n        }\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public quadraticCurveTo(cpX: number, cpY: number, toX: number, toY: number): this\n    {\n        this._initCurve();\n\n        const points = this.currentPath.points;\n\n        if (points.length === 0)\n        {\n            this.moveTo(0, 0);\n        }\n\n        QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);\n\n        return this;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public bezierCurveTo(cpX: number, cpY: number, cpX2: number, cpY2: number, toX: number, toY: number): this\n    {\n        this._initCurve();\n\n        BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);\n\n        return this;\n    }\n\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @param {number} x1 - The x-coordinate of the first tangent point of the arc\n     * @param {number} y1 - The y-coordinate of the first tangent point of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._initCurve(x1, y1);\n\n        const points = this.currentPath.points;\n\n        const result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n\n        if (result)\n        {\n            const { cx, cy, radius, startAngle, endAngle, anticlockwise } = result;\n\n            this.arc(cx, cy, radius, startAngle, endAngle, anticlockwise);\n        }\n\n        return this;\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public arc(cx: number, cy: number, radius: number, startAngle: number, endAngle: number, anticlockwise = false): this\n    {\n        if (startAngle === endAngle)\n        {\n            return this;\n        }\n\n        if (!anticlockwise && endAngle <= startAngle)\n        {\n            endAngle += PI_2;\n        }\n        else if (anticlockwise && startAngle <= endAngle)\n        {\n            startAngle += PI_2;\n        }\n\n        const sweep = endAngle - startAngle;\n\n        if (sweep === 0)\n        {\n            return this;\n        }\n\n        const startX = cx + (Math.cos(startAngle) * radius);\n        const startY = cy + (Math.sin(startAngle) * radius);\n        const eps = this._geometry.closePointEps;\n\n        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n        let points = this.currentPath ? this.currentPath.points : null;\n\n        if (points)\n        {\n            // TODO: make a better fix.\n\n            // We check how far our start is from the last existing point\n            const xDiff = Math.abs(points[points.length - 2] - startX);\n            const yDiff = Math.abs(points[points.length - 1] - startY);\n\n            if (xDiff < eps && yDiff < eps)\n            {\n                // If the point is very close, we don't add it, since this would lead to artifacts\n                // during tessellation due to floating point imprecision.\n            }\n            else\n            {\n                points.push(startX, startY);\n            }\n        }\n        else\n        {\n            this.moveTo(startX, startY);\n            points = this.currentPath.points;\n        }\n\n        ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);\n\n        return this;\n    }\n\n    /**\n     * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n     * (such as lineTo() or drawCircle()) use when drawing.\n     *\n     * @param {number} [color=0] - the color of the fill\n     * @param {number} [alpha=1] - the alpha of the fill\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public beginFill(color = 0, alpha = 1): this\n    {\n        return this.beginTextureFill({ texture: Texture.WHITE, color, alpha });\n    }\n\n    /**\n     * Begin the texture fill\n     *\n     * @param {object} [options] - Object object.\n     * @param {PIXI.Texture} [options.texture=PIXI.Texture.WHITE] - Texture to fill\n     * @param {number} [options.color=0xffffff] - Background to fill behind texture\n     * @param {number} [options.alpha=1] - Alpha of fill\n     * @param {PIXI.Matrix} [options.matrix=null] - Transform matrix\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    beginTextureFill(options: IFillStyleOptions): this\n    {\n        // backward compatibility with params: (texture, color, alpha, matrix)\n        if (options instanceof Texture)\n        {\n            deprecation('v5.2.0', 'Please use object-based options for Graphics#beginTextureFill');\n\n            // eslint-disable-next-line\n            const [texture, color, alpha, matrix] = arguments as any;\n\n            options = { texture, color, alpha, matrix };\n\n            // Remove undefined keys\n            Object.keys(options).forEach((key) => (options as any)[key] === undefined && delete (options as any)[key]);\n        }\n\n        // Apply defaults\n        options = Object.assign({\n            texture: Texture.WHITE,\n            color: 0xFFFFFF,\n            alpha: 1,\n            matrix: null,\n        }, options) as IFillStyleOptions;\n\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = options.alpha > 0;\n\n        if (!visible)\n        {\n            this._fillStyle.reset();\n        }\n        else\n        {\n            if (options.matrix)\n            {\n                options.matrix = options.matrix.clone();\n                options.matrix.invert();\n            }\n\n            Object.assign(this._fillStyle, { visible }, options);\n        }\n\n        return this;\n    }\n\n    /**\n     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public endFill(): this\n    {\n        this.finishPoly();\n\n        this._fillStyle.reset();\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape.\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawRect(x: number, y: number, width: number, height: number): this\n    {\n        return this.drawShape(new Rectangle(x, y, width, height));\n    }\n\n    /**\n     * Draw a rectangle shape with rounded/beveled corners.\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @param {number} radius - Radius of the rectangle corners\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawRoundedRect(x: number, y: number, width: number, height: number, radius: number): this\n    {\n        return this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n    }\n\n    /**\n     * Draws a circle.\n     *\n     * @param {number} x - The X coordinate of the center of the circle\n     * @param {number} y - The Y coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawCircle(x: number, y: number, radius: number): this\n    {\n        return this.drawShape(new Circle(x, y, radius));\n    }\n\n    /**\n     * Draws an ellipse.\n     *\n     * @param {number} x - The X coordinate of the center of the ellipse\n     * @param {number} y - The Y coordinate of the center of the ellipse\n     * @param {number} width - The half width of the ellipse\n     * @param {number} height - The half height of the ellipse\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawEllipse(x: number, y: number, width: number, height: number): this\n    {\n        return this.drawShape(new Ellipse(x, y, width, height));\n    }\n\n    public drawPolygon(...path: Array<number> | Array<Point>): this\n    public drawPolygon(path: Array<number> | Array<Point> | Polygon): this\n\n    /**\n     * Draws a polygon using the given path.\n     *\n     * @param {number[]|PIXI.Point[]|PIXI.Polygon} path - The path data used to construct the polygon.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawPolygon(...path: any[]): this\n    {\n        let points: Array<number> | Array<Point>;\n        let closeStroke = true;// !!this._fillStyle;\n\n        const poly = path[0] as Polygon;\n\n        // check if data has points..\n        if (poly.points)\n        {\n            closeStroke = poly.closeStroke;\n            points = poly.points;\n        }\n        else\n        if (Array.isArray(path[0]))\n        {\n            points = path[0];\n        }\n        else\n        {\n            points = path;\n        }\n\n        const shape = new Polygon(points);\n\n        shape.closeStroke = closeStroke;\n\n        this.drawShape(shape);\n\n        return this;\n    }\n\n    /**\n     * Draw any shape.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawShape(shape: IShape): this\n    {\n        if (!this._holeMode)\n        {\n            this._geometry.drawShape(\n                shape,\n                this._fillStyle.clone(),\n                this._lineStyle.clone(),\n                this._matrix\n            );\n        }\n        else\n        {\n            this._geometry.drawHole(shape, this._matrix);\n        }\n\n        return this;\n    }\n\n    /**\n     * Draw a star shape with an arbitrary number of points.\n     *\n     * @param {number} x - Center X position of the star\n     * @param {number} y - Center Y position of the star\n     * @param {number} points - The number of points of the star, must be > 1\n     * @param {number} radius - The outer radius of the star\n     * @param {number} [innerRadius] - The inner radius between points, default half `radius`\n     * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public drawStar(x: number, y: number, points: number, radius: number, innerRadius: number, rotation = 0): this\n    {\n        return this.drawPolygon(new Star(x, y, points, radius, innerRadius, rotation) as Polygon);\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    public clear(): this\n    {\n        this._geometry.clear();\n        this._lineStyle.reset();\n        this._fillStyle.reset();\n\n        this._boundsID++;\n        this._matrix = null;\n        this._holeMode = false;\n        this.currentPath = null;\n\n        return this;\n    }\n\n    /**\n     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n     * masked with gl.scissor.\n     *\n     * @returns {boolean} True if only 1 rect.\n     */\n    public isFastRect(): boolean\n    {\n        const data = this._geometry.graphicsData;\n\n        return data.length === 1\n            && data[0].shape.type === SHAPES.RECT\n            && !(data[0].lineStyle.visible && data[0].lineStyle.width);\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n        const hasuint32 = renderer.context.supports.uint32Indices;\n        // batch part..\n        // batch it!\n\n        geometry.updateBatches(hasuint32);\n\n        if (geometry.batchable)\n        {\n            if (this.batchDirty !== geometry.batchDirty)\n            {\n                this._populateBatches();\n            }\n\n            this._renderBatched(renderer);\n        }\n        else\n        {\n            // no batching...\n            renderer.batch.flush();\n\n            this._renderDirect(renderer);\n        }\n    }\n\n    /**\n     * Populating batches for rendering\n     *\n     * @protected\n     */\n    protected _populateBatches(): void\n    {\n        const geometry = this._geometry;\n        const blendMode = this.blendMode;\n        const len = geometry.batches.length;\n\n        this.batchTint = -1;\n        this._transformID = -1;\n        this.batchDirty = geometry.batchDirty;\n        this.batches.length = len;\n\n        this.vertexData = new Float32Array(geometry.points);\n\n        for (let i = 0; i < len; i++)\n        {\n            const gI = geometry.batches[i];\n            const color = gI.style.color;\n            const vertexData = new Float32Array(this.vertexData.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const uvs = new Float32Array(geometry.uvsFloat32.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const indices = new Uint16Array(geometry.indicesUint16.buffer,\n                gI.start * 2,\n                gI.size);\n\n            const batch = {\n                vertexData,\n                blendMode,\n                indices,\n                uvs,\n                _batchRGB: hex2rgb(color) as Array<number>,\n                _tintRGB: color,\n                _texture: gI.style.texture,\n                alpha: gI.style.alpha,\n                worldAlpha: 1 };\n\n            this.batches[i] = batch;\n        }\n    }\n\n    /**\n     * Renders the batches using the BathedRenderer plugin\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _renderBatched(renderer: Renderer): void\n    {\n        if (!this.batches.length)\n        {\n            return;\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n\n        this.calculateVertices();\n        this.calculateTints();\n\n        for (let i = 0, l = this.batches.length; i < l; i++)\n        {\n            const batch = this.batches[i];\n\n            batch.worldAlpha = this.worldAlpha * batch.alpha;\n\n            renderer.plugins[this.pluginName].render(batch);\n        }\n    }\n\n    /**\n     * Renders the graphics direct\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _renderDirect(renderer: Renderer): void\n    {\n        const shader = this._resolveDirectShader(renderer);\n\n        const geometry = this._geometry;\n        const tint = this.tint;\n        const worldAlpha = this.worldAlpha;\n        const uniforms = shader.uniforms;\n        const drawCalls = geometry.drawCalls;\n\n        // lets set the transfomr\n        uniforms.translationMatrix = this.transform.worldTransform;\n\n        // and then lets set the tint..\n        uniforms.tint[0] = (((tint >> 16) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[1] = (((tint >> 8) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[2] = ((tint & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[3] = worldAlpha;\n\n        // the first draw call, we can set the uniforms of the shader directly here.\n\n        // this means that we can tack advantage of the sync function of pixi!\n        // bind and sync uniforms..\n        // there is a way to optimise this..\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(geometry, shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // then render the rest of them...\n        for (let i = 0, l = drawCalls.length; i < l; i++)\n        {\n            this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);\n        }\n    }\n\n    /**\n     * Renders specific DrawCall\n     *\n     * @param {PIXI.Renderer} renderer\n     * @param {PIXI.BatchDrawCall} drawCall\n     */\n    protected _renderDrawCallDirect(renderer: Renderer, drawCall: BatchDrawCall): void\n    {\n        const { texArray, type, size, start } = drawCall;\n        const groupTextureCount = texArray.count;\n\n        for (let j = 0; j < groupTextureCount; j++)\n        {\n            renderer.texture.bind(texArray.elements[j], j);\n        }\n\n        renderer.geometry.draw(type, size, start);\n    }\n\n    /**\n     * Resolves shader for direct rendering\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _resolveDirectShader(renderer: Renderer): Shader\n    {\n        let shader = this.shader;\n\n        const pluginName = this.pluginName;\n\n        if (!shader)\n        {\n            // if there is no shader here, we can use the default shader.\n            // and that only gets created if we actually need it..\n            // but may be more than one plugins for graphics\n            if (!DEFAULT_SHADERS[pluginName])\n            {\n                const MAX_TEXTURES = renderer.plugins.batch.MAX_TEXTURES;\n                const sampleValues = new Int32Array(MAX_TEXTURES);\n\n                for (let i = 0; i < MAX_TEXTURES; i++)\n                {\n                    sampleValues[i] = i;\n                }\n\n                const uniforms = {\n                    tint: new Float32Array([1, 1, 1, 1]),\n                    translationMatrix: new Matrix(),\n                    default: UniformGroup.from({ uSamplers: sampleValues }, true),\n                };\n\n                const program = renderer.plugins[pluginName]._shader.program;\n\n                DEFAULT_SHADERS[pluginName] = new Shader(program, uniforms);\n            }\n\n            shader = DEFAULT_SHADERS[pluginName];\n        }\n\n        return shader;\n    }\n\n    /**\n     * Retrieves the bounds of the graphic shape as a rectangle object\n     *\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        this.finishPoly();\n\n        const geometry = this._geometry;\n\n        // skipping when graphics is empty, like a container\n        if (!geometry.graphicsData.length)\n        {\n            return;\n        }\n\n        const { minX, minY, maxX, maxY } = geometry.bounds;\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Tests if a point is inside this graphics object\n     *\n     * @param {PIXI.IPointData} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, Graphics._TEMP_POINT);\n\n        return this._geometry.containsPoint(Graphics._TEMP_POINT);\n    }\n\n    /**\n     * Recalcuate the tint by applying tin to batches using Graphics tint.\n     * @protected\n     */\n    protected calculateTints(): void\n    {\n        if (this.batchTint !== this.tint)\n        {\n            this.batchTint = this.tint;\n\n            const tintRGB = hex2rgb(this.tint, temp);\n\n            for (let i = 0; i < this.batches.length; i++)\n            {\n                const batch = this.batches[i];\n\n                const batchTint = batch._batchRGB;\n\n                const r = (tintRGB[0] * batchTint[0]) * 255;\n                const g = (tintRGB[1] * batchTint[1]) * 255;\n                const b = (tintRGB[2] * batchTint[2]) * 255;\n\n                // TODO Ivan, can this be done in one go?\n                const color = (r << 16) + (g << 8) + (b | 0);\n\n                batch._tintRGB = (color >> 16)\n                        + (color & 0xff00)\n                        + ((color & 0xff) << 16);\n            }\n        }\n    }\n\n    /**\n     * If there's a transform update or a change to the shape of the\n     * geometry, recaculate the vertices.\n     * @protected\n     */\n    protected calculateVertices(): void\n    {\n        const wtID = this.transform._worldID;\n\n        if (this._transformID === wtID)\n        {\n            return;\n        }\n\n        this._transformID = wtID;\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const data = this._geometry.points;// batch.vertexDataOriginal;\n        const vertexData = this.vertexData;\n\n        let count = 0;\n\n        for (let i = 0; i < data.length; i += 2)\n        {\n            const x = data[i];\n            const y = data[i + 1];\n\n            vertexData[count++] = (a * x) + (c * y) + tx;\n            vertexData[count++] = (d * y) + (b * x) + ty;\n        }\n    }\n\n    /**\n     * Closes the current path.\n     *\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    public closePath(): this\n    {\n        const currentPath = this.currentPath;\n\n        if (currentPath)\n        {\n            // we don't need to add extra point in the end because buildLine will take care of that\n            currentPath.closeStroke = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * Apply a matrix to the positional data.\n     *\n     * @param {PIXI.Matrix} matrix - Matrix to use for transform current shape.\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    public setMatrix(matrix: Matrix): this\n    {\n        this._matrix = matrix;\n\n        return this;\n    }\n\n    /**\n     * Begin adding holes to the last draw shape\n     * IMPORTANT: holes must be fully inside a shape to work\n     * Also weirdness ensues if holes overlap!\n     * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\n     * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    public beginHole(): this\n    {\n        this.finishPoly();\n        this._holeMode = true;\n\n        return this;\n    }\n\n    /**\n     * End adding holes to the last draw shape\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    public endHole(): this\n    {\n        this.finishPoly();\n        this._holeMode = false;\n\n        return this;\n    }\n\n    /**\n     * Destroys the Graphics object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    public destroy(options: IDestroyOptions|boolean): void\n    {\n        this._geometry.refCount--;\n        if (this._geometry.refCount === 0)\n        {\n            this._geometry.dispose();\n        }\n\n        this._matrix = null;\n        this.currentPath = null;\n        this._lineStyle.destroy();\n        this._lineStyle = null;\n        this._fillStyle.destroy();\n        this._fillStyle = null;\n        this._geometry = null;\n        this.shader = null;\n        this.vertexData = null;\n        this.batches.length = 0;\n        this.batches = null;\n\n        super.destroy(options);\n    }\n}\n"],"names":["LINE_JOIN","LINE_CAP","GRAPHICS_CURVES","adaptive","maxLength","minSegments","maxSegments","epsilon","_segmentsCount","length","defaultSegments","this","isNaN","result","Math","ceil","Texture","WHITE","reset","FillStyle","obj","color","alpha","texture","matrix","visible","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","buildPoly","build","graphicsData","points","shape","slice","triangulate","graphicsGeometry","holes","verts","indices","holeArray","i","hole","push","concat","triangles","earcut","vertPos","buildCircle","width","height","circleData","x","y","type","SHAPES","CIRC","radius","ellipseData","totalSegs","floor","sqrt","seg","PI","sin","cos","center","circle","a","c","tx","ty","buildRectangle","rectData","getPt","n1","n2","perc","quadraticBezierCurve","fromX","fromY","cpX","cpY","toX","toY","out","xa","ya","xb","yb","j","buildRoundedRectangle","rrectData","max","min","vecPos","square","nx","ny","innerWeight","outerWeight","clockwise","exx","eyy","eix","eiy","eox","eoy","round","cx","cy","sx","sy","ex","ey","cx2p0x","cy2p0y","angle0","atan2","angle1","startAngle","angleDiff","absAngleDiff","abs","segCount","angleInc","angle","buildLine","lineStyle","native","closedShape","POLY","closeStroke","startIndex","currentIndex","buildNativeLine","eps","closePointEps","style","firstPoint","Point","lastPoint","closedPath","pop","set","midPointX","midPointY","unshift","indexCount","indexStart","widthSquared","miterLimitSquared","miterLimit","x0","y0","x1","y1","x2","y2","perpx","perpy","perp1x","perp1y","dist","ratio","alignment","cap","ROUND","SQUARE","dx0","dy0","dx1","dy1","cross","c1","c2","px","py","pdist","imx","imy","omx","omy","insideWeight","join","BEVEL","eps2","buildNonNativeLine","innerRadius","rotation","len","delta","PI_2","polygon","r","_super","Polygon","ArcUtils","a1","b1","a2","b2","mm","dd","cc","tt","k1","k2","j1","j2","qx","qy","endAngle","anticlockwise","_startX","_startY","_anticlockwise","sweep","n","theta","theta2","cTheta","sTheta","segMinus","remainder","s","BezierUtils","cpX2","cpY2","t","t2","t3","nt","nt2","nt3","dx","dy","prevX","prevY","curveLength","dt","dt2","dt3","QuadraticUtils","ax","ay","bx","by","a32","ba","log","BatchPart","attribStart","start","endIndex","endAttrib","attribSize","size","FILL_COMMANDS","_a","ELIP","RECT","RREC","BATCH_POOL","DRAW_CALL_POOL","fillStyle","GraphicsData","tmpPoint","tmpBounds","Bounds","_this","colors","uvs","textureIds","dirty","batchDirty","cacheDirty","clearDirty","drawCalls","batches","shapeIndex","_bounds","boundsDirty","boundsPadding","batchable","indicesUint16","uvsFloat32","GraphicsGeometry","calculateBounds","texArray","clear","batchPart","invalidate","data","lastShape","destroy","indexBuffer","point","applyInverse","copyFrom","contains","hitHole","i_1","allow32Indices","validateBatching","currentStyle","transformPoints","nextTexture","baseTexture","index_1","attribIndex","wrapMode","WRAP_MODES","REPEAT","processFill","processLine","_compareStyles","end","begin","addUvs","index","attrib","need32","Uint32Array","Uint16Array","isBatchable","packBatches","buildDrawCalls","styleA","styleB","l","fill","line","valid","Float32Array","batch","BATCHABLE_SIZE","TICK","BaseTexture","_globalBatch","currentGroup","BatchDrawCall","BatchTextureArray","count","DRAW_MODES","TRIANGLES","textureCount","currentTexture","textureId","drawMode","LINES","_batchEnabled","touched","_batchLocation","elements","addColors","addTextureIds","packAttributes","glPoints","ArrayBuffer","f32","u32","_buffer","update","_indexBuffer","processHoles","bounds","sequenceBounds","curMatrix","Matrix","IDENTITY","nextMatrix","lineWidth","isEmpty","addBoundsMatrix","rect","addFramePad","ellipse","poly","addVerticesMatrix","pad","rgb","rgba","premultiplyTint","id","uvsStart","frame","adjustUvs","finish","scaleX","scaleY","offsetX","offsetY","minX","minY","BatchGeometry","BUTT","MITER","LineStyle","temp","DEFAULT_SHADERS","geometry","_geometry","refCount","shader","state","State","for2d","_fillStyle","_lineStyle","_matrix","_holeMode","currentPath","batchTint","vertexData","pluginName","_transformID","tint","blendMode","BLEND_MODES","NORMAL","Graphics","finishPoly","value","_tint","options","args","arguments","undefined","lineTextureStyle","deprecation","keys","forEach","key","assign","startPoly","clone","invert","drawShape","moveTo","_initCurve","curveTo","radius_1","arc","startX","startY","xDiff","yDiff","beginTextureFill","Rectangle","RoundedRectangle","Circle","Ellipse","_i","path","isArray","drawHole","drawPolygon","Star","_boundsID","renderer","hasuint32","context","supports","uint32Indices","updateBatches","_populateBatches","_renderBatched","flush","_renderDirect","gI","buffer","_batchRGB","hex2rgb","_tintRGB","_texture","worldAlpha","setObjectRenderer","plugins","calculateVertices","calculateTints","render","_resolveDirectShader","uniforms","translationMatrix","transform","worldTransform","bind","_renderDrawCallDirect","drawCall","groupTextureCount","draw","MAX_TEXTURES","sampleValues","Int32Array","default","UniformGroup","from","uSamplers","program","_shader","Shader","maxX","maxY","addFrame","_TEMP_POINT","containsPoint","tintRGB","wtID","_worldID","wt","dispose","Container"],"mappings":"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"}