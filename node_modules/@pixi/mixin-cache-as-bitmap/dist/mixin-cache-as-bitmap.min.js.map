{"version":3,"file":"mixin-cache-as-bitmap.min.js","sources":["../src/index.ts"],"sourcesContent":["import { Texture, BaseTexture, RenderTexture, Renderer, MaskData } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { Container, DisplayObject, IDestroyOptions } from '@pixi/display';\nimport { IPointData, Matrix, Rectangle } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\nimport { CanvasRenderer } from '@pixi/canvas-renderer';\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: CanvasRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions|boolean) => void;\n    public originalMask: Container|MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @function _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, renderTexture, true, m, false);\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @function _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: CanvasRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, renderTexture, true, m, false);\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options: IDestroyOptions|boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"],"names":["_tempMatrix","Matrix","prototype","_cacheAsBitmap","_cacheData","this","textureCacheId","originalRender","originalRenderCanvas","originalCalculateBounds","originalGetLocalBounds","originalUpdateTransform","originalDestroy","originalMask","originalFilterArea","originalContainsPoint","sprite","Object","defineProperties","DisplayObject","cacheAsBitmap","get","set","value","data","CacheData","render","renderCanvas","updateTransform","calculateBounds","getLocalBounds","destroy","containsPoint","_mask","filterArea","_renderCached","_renderCachedCanvas","_cacheAsBitmapDestroy","_destroyCachedDisplayObject","renderer","visible","worldAlpha","renderable","_initCachedDisplayObject","transform","_worldID","_render","cacheAlpha","alpha","batch","flush","bounds","clone","filters","padding","pad","ceil","settings","RESOLUTION","cachedRenderTexture","renderTexture","current","cachedSourceFrame","sourceFrame","cachedProjectionTransform","projection","RenderTexture","create","width","height","uid","BaseTexture","addToCache","baseTexture","Texture","m","localTransform","copyTo","invert","translate","x","y","bind","displayObjectUpdateTransform","_calculateCachedBounds","_getCachedLocalBounds","cachedSprite","Sprite","worldTransform","anchor","_bounds","_parentID","parent","enableTempParent","disableTempParent","_initCachedDisplayObjectCanvas","_renderCanvas","cachedRenderTarget","context","_projTransform","tx","ty","_tempDisplayObjectParent","clear","_calculateBounds","updateID","_boundsID","_texture","removeFromCache","options"],"mappings":"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"}