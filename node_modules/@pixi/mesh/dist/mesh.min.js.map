{"version":3,"file":"mesh.min.js","sources":["../../../node_modules/tslib/tslib.es6.js","../src/MeshBatchUvs.ts","../src/Mesh.ts","../src/MeshMaterial.ts","../src/MeshGeometry.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import type { TextureMatrix, Buffer } from '@pixi/core';\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @class\n * @memberof PIXI\n */\nexport class MeshBatchUvs\n{\n    public readonly data: Float32Array;\n    public uvBuffer: Buffer;\n    public uvMatrix: TextureMatrix;\n\n    private _bufferUpdateId: number;\n    private _textureUpdateId: number;\n\n    // Internal-only properties\n    _updateID: number;\n\n    /**\n     * @param {PIXI.Buffer} uvBuffer - Buffer with normalized uv's\n     * @param {PIXI.TextureMatrix} uvMatrix - Material UV matrix\n     */\n    constructor(uvBuffer: Buffer, uvMatrix: TextureMatrix)\n    {\n        /**\n         * Buffer with normalized UV's\n         * @member {PIXI.Buffer}\n         */\n        this.uvBuffer = uvBuffer;\n\n        /**\n         * Material UV matrix\n         * @member {PIXI.TextureMatrix}\n         */\n        this.uvMatrix = uvMatrix;\n\n        /**\n         * UV Buffer data\n         * @member {Float32Array}\n         * @readonly\n         */\n        this.data = null;\n\n        this._bufferUpdateId = -1;\n\n        this._textureUpdateId = -1;\n\n        this._updateID = 0;\n    }\n\n    /**\n     * updates\n     *\n     * @param {boolean} [forceUpdate] - force the update\n     */\n    public update(forceUpdate?: boolean): void\n    {\n        if (!forceUpdate\n            && this._bufferUpdateId === this.uvBuffer._updateID\n            && this._textureUpdateId === this.uvMatrix._updateID\n        )\n        {\n            return;\n        }\n\n        this._bufferUpdateId = this.uvBuffer._updateID;\n        this._textureUpdateId = this.uvMatrix._updateID;\n\n        const data = this.uvBuffer.data as Float32Array;\n\n        if (!this.data || this.data.length !== data.length)\n        {\n            (this.data as any) = new Float32Array(data.length);\n        }\n\n        this.uvMatrix.multiplyUvs(data, this.data);\n\n        this._updateID++;\n    }\n}\n","import { State } from '@pixi/core';\nimport { Point, Polygon } from '@pixi/math';\nimport { BLEND_MODES, DRAW_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\nimport { MeshBatchUvs } from './MeshBatchUvs';\nimport { MeshMaterial } from './MeshMaterial';\n\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Texture, Renderer, Geometry, Buffer } from '@pixi/core';\nimport type { IPointData } from '@pixi/math';\n\nconst tempPoint = new Point();\nconst tempPolygon = new Polygon();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Mesh extends GlobalMixins.Mesh {}\n\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make you life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class Mesh extends Container\n{\n    public readonly geometry: Geometry;\n    public shader: MeshMaterial;\n    public state: State;\n    public drawMode: DRAW_MODES;\n    public start: number;\n    public size: number;\n\n    private vertexData: Float32Array;\n    private vertexDirty: number;\n    private _transformID: number;\n    private _roundPixels: boolean;\n    private batchUvs: MeshBatchUvs;\n\n    // Internal-only properties\n    uvs: Float32Array;\n    indices: Uint16Array;\n    _tintRGB: number;\n    _texture: Texture;\n\n    /**\n     * @param {PIXI.Geometry} geometry - the geometry the mesh will use\n     * @param {PIXI.MeshMaterial} shader - the shader the mesh will use\n     * @param {PIXI.State} [state] - the state that the WebGL context is required to be in to render the mesh\n     *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n     * @param {number} [drawMode=PIXI.DRAW_MODES.TRIANGLES] - the drawMode, can be any of the PIXI.DRAW_MODES consts\n     */\n    constructor(geometry: Geometry, shader: MeshMaterial, state?: State, drawMode = DRAW_MODES.TRIANGLES)\n    {\n        super();\n\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh objects.\n         * @member {PIXI.Geometry}\n         * @readonly\n         */\n        this.geometry = geometry;\n\n        geometry.refCount++;\n\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Mesh objects.\n         * @member {PIXI.Shader|PIXI.MeshMaterial}\n         */\n        this.shader = shader;\n\n        /**\n         * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State}\n         */\n        this.state = state || State.for2d();\n\n        /**\n         * The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants.\n         *\n         * @member {number}\n         * @see PIXI.DRAW_MODES\n         */\n        this.drawMode = drawMode;\n\n        /**\n         * Typically the index of the IndexBuffer where to start drawing.\n         * @member {number}\n         * @default 0\n         */\n        this.start = 0;\n\n        /**\n         * How much of the geometry to draw, by default `0` renders everything.\n         * @member {number}\n         * @default 0\n         */\n        this.size = 0;\n\n        /**\n         * thease are used as easy access for batching\n         * @member {Float32Array}\n         * @private\n         */\n        this.uvs = null;\n\n        /**\n         * thease are used as easy access for batching\n         * @member {Uint16Array}\n         * @private\n         */\n        this.indices = null;\n\n        /**\n         * this is the caching layer used by the batcher\n         * @member {Float32Array}\n         * @private\n         */\n        this.vertexData = new Float32Array(1);\n\n        /**\n         * If geometry is changed used to decide to re-transform\n         * the vertexData.\n         * @member {number}\n         * @private\n         */\n        this.vertexDirty = 0;\n\n        this._transformID = -1;\n\n        /**\n         * Internal roundPixels field\n         *\n         * @member {boolean}\n         * @private\n         */\n        this._roundPixels = settings.ROUND_PIXELS;\n\n        /**\n         * Batched UV's are cached for atlas textures\n         * @member {PIXI.MeshBatchUvs}\n         * @private\n         */\n        this.batchUvs = null;\n    }\n\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get uvBuffer(): Buffer\n    {\n        return this.geometry.buffers[1];\n    }\n\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     * @member {PIXI.Buffer}\n     * @readonly\n     */\n    get verticesBuffer(): Buffer\n    {\n        return this.geometry.buffers[0];\n    }\n\n    /**\n     * Alias for {@link PIXI.Mesh#shader}.\n     * @member {PIXI.MeshMaterial}\n     */\n    set material(value: MeshMaterial)\n    {\n        this.shader = value;\n    }\n\n    get material(): MeshMaterial\n    {\n        return this.shader;\n    }\n\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL;\n     * @see PIXI.BLEND_MODES\n     */\n    set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this.shader.tint;\n    }\n\n    set tint(value: number)\n    {\n        this.shader.tint = value;\n    }\n\n    /**\n     * The texture that the Mesh uses.\n     *\n     * @member {PIXI.Texture}\n     */\n    get texture(): Texture\n    {\n        return this.shader.texture;\n    }\n\n    set texture(value: Texture)\n    {\n        this.shader.texture = value;\n    }\n\n    /**\n     * Standard renderer draw.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // set properties for batching..\n        // TODO could use a different way to grab verts?\n        const vertices = this.geometry.buffers[0].data;\n\n        // TODO benchmark check for attribute size..\n        if (\n            this.shader.batchable\n            && this.drawMode === DRAW_MODES.TRIANGLES\n            && vertices.length < Mesh.BATCHABLE_SIZE * 2\n        )\n        {\n            this._renderToBatch(renderer);\n        }\n        else\n        {\n            this._renderDefault(renderer);\n        }\n    }\n\n    /**\n     * Standard non-batching way of rendering.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    protected _renderDefault(renderer: Renderer): void\n    {\n        const shader = this.shader;\n\n        shader.alpha = this.worldAlpha;\n        if (shader.update)\n        {\n            shader.update();\n        }\n\n        renderer.batch.flush();\n\n        if (shader.program.uniformData.translationMatrix)\n        {\n            shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n        }\n\n        // bind and sync uniforms..\n        renderer.shader.bind(shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // bind the geometry...\n        renderer.geometry.bind(this.geometry, shader);\n\n        // then render it\n        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n    }\n\n    /**\n     * Rendering by using the Batch system.\n     * @protected\n     * @param {PIXI.Renderer} renderer - Instance to renderer.\n     */\n    protected _renderToBatch(renderer: Renderer): void\n    {\n        const geometry = this.geometry;\n\n        if (this.shader.uvMatrix)\n        {\n            this.shader.uvMatrix.update();\n            this.calculateUvs();\n        }\n\n        // set properties for batching..\n        this.calculateVertices();\n        this.indices = geometry.indexBuffer.data as Uint16Array;\n        this._tintRGB = this.shader._tintRGB;\n        this._texture = this.shader.texture;\n\n        const pluginName = this.material.pluginName;\n\n        renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n        renderer.plugins[pluginName].render(this);\n    }\n\n    /**\n     * Updates vertexData field based on transform and vertices\n     */\n    public calculateVertices(): void\n    {\n        const geometry = this.geometry;\n        const vertices = geometry.buffers[0].data;\n\n        if ((geometry as any).vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n\n        if (this.vertexData.length !== vertices.length)\n        {\n            this.vertexData = new Float32Array(vertices.length);\n        }\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const vertexData = this.vertexData;\n\n        for (let i = 0; i < vertexData.length / 2; i++)\n        {\n            const x = vertices[(i * 2)];\n            const y = vertices[(i * 2) + 1];\n\n            vertexData[(i * 2)] = (a * x) + (c * y) + tx;\n            vertexData[(i * 2) + 1] = (b * x) + (d * y) + ty;\n        }\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n\n        this.vertexDirty = (geometry as any).vertexDirtyId;\n    }\n\n    /**\n     * Updates uv field based on from geometry uv's or batchUvs\n     */\n    public calculateUvs(): void\n    {\n        const geomUvs = this.geometry.buffers[1];\n\n        if (!this.shader.uvMatrix.isSimple)\n        {\n            if (!this.batchUvs)\n            {\n                this.batchUvs = new MeshBatchUvs(geomUvs, this.shader.uvMatrix);\n            }\n            this.batchUvs.update();\n            this.uvs = this.batchUvs.data;\n        }\n        else\n        {\n            this.uvs = geomUvs.data as Float32Array;\n        }\n    }\n\n    /**\n     * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n     * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n     *\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        this.calculateVertices();\n\n        this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n    }\n\n    /**\n     * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n     *\n     * @param {PIXI.IPointData} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        if (!this.getBounds().contains(point.x, point.y))\n        {\n            return false;\n        }\n\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const vertices = this.geometry.getBuffer('aVertexPosition').data;\n\n        const points = tempPolygon.points;\n        const indices =  this.geometry.getIndex().data;\n        const len = indices.length;\n        const step = this.drawMode === 4 ? 3 : 1;\n\n        for (let i = 0; i + 2 < len; i += step)\n        {\n            const ind0 = indices[i] * 2;\n            const ind1 = indices[i + 1] * 2;\n            const ind2 = indices[i + 2] * 2;\n\n            points[0] = vertices[ind0];\n            points[1] = vertices[ind0 + 1];\n            points[2] = vertices[ind1];\n            points[3] = vertices[ind1 + 1];\n            points[4] = vertices[ind2];\n            points[5] = vertices[ind2 + 1];\n\n            if (tempPolygon.contains(tempPoint.x, tempPoint.y))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n    /**\n     * Destroys the Mesh object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     */\n    public destroy(options: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        this.geometry.refCount--;\n        if (this.geometry.refCount === 0)\n        {\n            this.geometry.dispose();\n        }\n\n        (this as any).geometry = null;\n        this.shader = null;\n        this.state = null;\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = null;\n    }\n\n    /**\n     * The maximum number of vertices to consider batchable. Generally, the complexity\n     * of the geometry.\n     * @memberof PIXI.Mesh\n     * @static\n     * @member {number} BATCHABLE_SIZE\n     */\n    public static BATCHABLE_SIZE = 100;\n}\n\n","import { Program, Shader, TextureMatrix } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\nimport { premultiplyTintToRgba } from '@pixi/utils';\nimport fragment from './shader/mesh.frag';\nimport vertex from './shader/mesh.vert';\n\nimport type { Texture } from '@pixi/core';\nimport type { Dict } from '@pixi/utils';\n\nexport interface IMeshMaterialOptions {\n    alpha?: number;\n    tint?: number;\n    pluginName?: string;\n    program?: Program;\n    uniforms?: Dict<unknown>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MeshMaterial extends GlobalMixins.MeshMaterial {}\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nexport class MeshMaterial extends Shader\n{\n    public readonly uvMatrix: TextureMatrix;\n\n    public batchable: boolean;\n    public pluginName: string;\n\n    // Internal-only properties\n    _tintRGB: number;\n\n    private _colorDirty: boolean;\n    private _alpha: number;\n    private _tint: number;\n\n    /**\n     * @param {PIXI.Texture} uSampler - Texture that material uses to render.\n     * @param {object} [options] - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {number} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    constructor(uSampler: Texture, options?: IMeshMaterialOptions)\n    {\n        const uniforms = {\n            uSampler,\n            alpha: 1,\n            uTextureMatrix: Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n\n        if (options.uniforms)\n        {\n            Object.assign(uniforms, options.uniforms);\n        }\n\n        super(options.program || Program.from(vertex, fragment), uniforms);\n\n        /**\n         * Only do update if tint or alpha changes.\n         * @member {boolean}\n         * @private\n         * @default false\n         */\n        this._colorDirty = false;\n\n        /**\n         * TextureMatrix instance for this Mesh, used to track Texture changes\n         *\n         * @member {PIXI.TextureMatrix}\n         * @readonly\n         */\n        this.uvMatrix = new TextureMatrix(uSampler);\n\n        /**\n         * `true` if shader can be batch with the renderer's batch system.\n         * @member {boolean}\n         * @default true\n         */\n        this.batchable = options.program === undefined;\n\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = options.pluginName;\n\n        this.tint = options.tint;\n        this.alpha = options.alpha;\n    }\n\n    /**\n     * Reference to the texture being rendered.\n     * @member {PIXI.Texture}\n     */\n    get texture(): Texture\n    {\n        return this.uniforms.uSampler;\n    }\n    set texture(value: Texture)\n    {\n        if (this.uniforms.uSampler !== value)\n        {\n            this.uniforms.uSampler = value;\n            this.uvMatrix.texture = value;\n        }\n    }\n\n    /**\n     * This gets automatically set by the object using this.\n     *\n     * @default 1\n     * @member {number}\n     */\n    set alpha(value: number)\n    {\n        if (value === this._alpha) return;\n\n        this._alpha = value;\n        this._colorDirty = true;\n    }\n    get alpha(): number\n    {\n        return this._alpha;\n    }\n\n    /**\n     * Multiply tint for the material.\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    set tint(value: number)\n    {\n        if (value === this._tint) return;\n\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n        this._colorDirty = true;\n    }\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    /**\n     * Gets called automatically by the Mesh. Intended to be overridden for custom\n     * MeshMaterial objects.\n     */\n    public update(): void\n    {\n        if (this._colorDirty)\n        {\n            this._colorDirty = false;\n            const baseTexture = this.texture.baseTexture;\n\n            premultiplyTintToRgba(\n                this._tint, this._alpha, this.uniforms.uColor, (baseTexture.alphaMode as unknown as boolean)\n            );\n        }\n        if (this.uvMatrix.update())\n        {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    }\n}\n","import { TYPES } from '@pixi/constants';\nimport { Buffer, Geometry } from '@pixi/core';\n\nimport type { IArrayBuffer } from '@pixi/core';\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n * @class\n * @memberof PIXI\n * @extends PIXI.Geometry\n */\nexport class MeshGeometry extends Geometry\n{\n    // Internal-only properties\n    _updateId: number;\n\n    /**\n     * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n     * @param {Float32Array|number[]} [uvs] - Texture UVs.\n     * @param {Uint16Array|number[]} [index] - IndexBuffer\n     */\n    constructor(vertices?: IArrayBuffer, uvs?: IArrayBuffer, index?: IArrayBuffer)\n    {\n        super();\n\n        const verticesBuffer = new Buffer(vertices);\n        const uvsBuffer = new Buffer(uvs, true);\n        const indexBuffer = new Buffer(index, true, true);\n\n        this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT)\n            .addIndex(indexBuffer);\n\n        /**\n         * Dirty flag to limit update calls on Mesh. For example,\n         * limiting updates on a single Mesh instance with a shared Geometry\n         * within the render loop.\n         * @private\n         * @member {number}\n         * @default -1\n         */\n        this._updateId = -1;\n    }\n\n    /**\n     * If the vertex position is updated.\n     * @member {number}\n     * @readonly\n     * @private\n     */\n    get vertexDirtyId(): number\n    {\n        return this.buffers[0]._updateID;\n    }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","uvBuffer","uvMatrix","data","_bufferUpdateId","_textureUpdateId","_updateID","MeshBatchUvs","forceUpdate","length","Float32Array","multiplyUvs","tempPoint","Point","tempPolygon","Polygon","geometry","shader","state","drawMode","DRAW_MODES","TRIANGLES","_super","_this","refCount","State","for2d","start","size","uvs","indices","vertexData","vertexDirty","_transformID","_roundPixels","settings","ROUND_PIXELS","batchUvs","Mesh","buffers","value","blendMode","tint","texture","renderer","vertices","batchable","BATCHABLE_SIZE","_renderToBatch","_renderDefault","alpha","worldAlpha","update","batch","flush","program","uniformData","translationMatrix","uniforms","transform","worldTransform","toArray","bind","set","draw","instanceCount","calculateUvs","calculateVertices","indexBuffer","_tintRGB","_texture","pluginName","material","setObjectRenderer","plugins","render","vertexDirtyId","_worldID","wt","a","c","tx","ty","i","x","y","resolution","RESOLUTION","Math","round","geomUvs","isSimple","_bounds","addVertexData","point","getBounds","contains","applyInverse","getBuffer","points","getIndex","len","step","ind0","ind1","ind2","options","destroy","dispose","Container","uSampler","uTextureMatrix","Matrix","IDENTITY","uColor","assign","Program","from","vertex","fragment","_colorDirty","TextureMatrix","undefined","MeshMaterial","_alpha","_tint","baseTexture","premultiplyTintToRgba","alphaMode","mapCoord","Shader","index","verticesBuffer","Buffer","uvsBuffer","addAttribute","TYPES","FLOAT","addIndex","_updateId","MeshGeometry","Geometry"],"mappings":";;;;;;;4EAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,oBCF/E,WAAYK,EAAkBC,GAM1BL,KAAKI,SAAWA,EAMhBJ,KAAKK,SAAWA,EAOhBL,KAAKM,KAAO,KAEZN,KAAKO,iBAAmB,EAExBP,KAAKQ,kBAAoB,EAEzBR,KAAKS,UAAY,EAgCzB,OAxBWC,mBAAP,SAAcC,GAEV,GAAKA,GACEX,KAAKO,kBAAoBP,KAAKI,SAASK,WACvCT,KAAKQ,mBAAqBR,KAAKK,SAASI,UAF/C,CAQAT,KAAKO,gBAAkBP,KAAKI,SAASK,UACrCT,KAAKQ,iBAAmBR,KAAKK,SAASI,UAEtC,IAAMH,EAAON,KAAKI,SAASE,KAEtBN,KAAKM,MAAQN,KAAKM,KAAKM,SAAWN,EAAKM,SAEvCZ,KAAKM,KAAe,IAAIO,aAAaP,EAAKM,SAG/CZ,KAAKK,SAASS,YAAYR,EAAMN,KAAKM,MAErCN,KAAKS,mBCnEPM,EAAY,IAAIC,QAChBC,EAAc,IAAIC,wBAmDpB,WAAYC,EAAoBC,EAAsBC,EAAeC,gBAAAA,EAAWC,aAAWC,WAA3F,MAEIC,0BASAC,EAAKP,SAAWA,EAEhBA,EAASQ,WAOTD,EAAKN,OAASA,EAOdM,EAAKL,MAAQA,GAASO,QAAMC,QAQ5BH,EAAKJ,SAAWA,EAOhBI,EAAKI,MAAQ,EAObJ,EAAKK,KAAO,EAOZL,EAAKM,IAAM,KAOXN,EAAKO,QAAU,KAOfP,EAAKQ,WAAa,IAAIrB,aAAa,GAQnCa,EAAKS,YAAc,EAEnBT,EAAKU,cAAgB,EAQrBV,EAAKW,aAAeC,WAASC,aAO7Bb,EAAKc,SAAW,OA2WxB,OAte0B1C,OAmItBN,sBAAIiD,4BAAJ,WAEI,OAAOzC,KAAKmB,SAASuB,QAAQ,oCASjClD,sBAAIiD,kCAAJ,WAEI,OAAOzC,KAAKmB,SAASuB,QAAQ,oCAOjClD,sBAAIiD,4BAKJ,WAEI,OAAOzC,KAAKoB,YAPhB,SAAauB,GAET3C,KAAKoB,OAASuB,mCAgBlBnD,sBAAIiD,6BAKJ,WAEI,OAAOzC,KAAKqB,MAAMuB,eAPtB,SAAcD,GAEV3C,KAAKqB,MAAMuB,UAAYD,mCAiB3BnD,sBAAIiD,+BASJ,WAEI,OAAOzC,KAAKqC,kBAXhB,SAAgBM,GAER3C,KAAKqC,eAAiBM,IAEtB3C,KAAKoC,cAAgB,GAEzBpC,KAAKqC,aAAeM,mCAexBnD,sBAAIiD,wBAAJ,WAEI,OAAOzC,KAAKoB,OAAOyB,UAGvB,SAASF,GAEL3C,KAAKoB,OAAOyB,KAAOF,mCAQvBnD,sBAAIiD,2BAAJ,WAEI,OAAOzC,KAAKoB,OAAO0B,aAGvB,SAAYH,GAER3C,KAAKoB,OAAO0B,QAAUH,mCAQhBF,oBAAV,SAAkBM,GAId,IAAMC,EAAWhD,KAAKmB,SAASuB,QAAQ,GAAGpC,KAItCN,KAAKoB,OAAO6B,WACTjD,KAAKsB,WAAaC,aAAWC,WAC7BwB,EAASpC,OAA+B,EAAtB6B,EAAKS,eAG1BlD,KAAKmD,eAAeJ,GAIpB/C,KAAKoD,eAAeL,IASlBN,2BAAV,SAAyBM,GAErB,IAAM3B,EAASpB,KAAKoB,OAEpBA,EAAOiC,MAAQrD,KAAKsD,WAChBlC,EAAOmC,QAEPnC,EAAOmC,SAGXR,EAASS,MAAMC,QAEXrC,EAAOsC,QAAQC,YAAYC,oBAE3BxC,EAAOyC,SAASD,kBAAoB5D,KAAK8D,UAAUC,eAAeC,SAAQ,IAI9EjB,EAAS3B,OAAO6C,KAAK7C,GAGrB2B,EAAS1B,MAAM6C,IAAIlE,KAAKqB,OAGxB0B,EAAS5B,SAAS8C,KAAKjE,KAAKmB,SAAUC,GAGtC2B,EAAS5B,SAASgD,KAAKnE,KAAKsB,SAAUtB,KAAK+B,KAAM/B,KAAK8B,MAAO9B,KAAKmB,SAASiD,gBAQrE3B,2BAAV,SAAyBM,GAErB,IAAM5B,EAAWnB,KAAKmB,SAElBnB,KAAKoB,OAAOf,WAEZL,KAAKoB,OAAOf,SAASkD,SACrBvD,KAAKqE,gBAITrE,KAAKsE,oBACLtE,KAAKiC,QAAUd,EAASoD,YAAYjE,KACpCN,KAAKwE,SAAWxE,KAAKoB,OAAOoD,SAC5BxE,KAAKyE,SAAWzE,KAAKoB,OAAO0B,QAE5B,IAAM4B,EAAa1E,KAAK2E,SAASD,WAEjC3B,EAASS,MAAMoB,kBAAkB7B,EAAS8B,QAAQH,IAClD3B,EAAS8B,QAAQH,GAAYI,OAAO9E,OAMjCyC,8BAAP,WAEI,IAAMtB,EAAWnB,KAAKmB,SAChB6B,EAAW7B,EAASuB,QAAQ,GAAGpC,KAErC,GAAKa,EAAiB4D,gBAAkB/E,KAAKmC,aAAenC,KAAKoC,eAAiBpC,KAAK8D,UAAUkB,SAAjG,CAKAhF,KAAKoC,aAAepC,KAAK8D,UAAUkB,SAE/BhF,KAAKkC,WAAWtB,SAAWoC,EAASpC,SAEpCZ,KAAKkC,WAAa,IAAIrB,aAAamC,EAASpC,SAahD,IAVA,IAAMqE,EAAKjF,KAAK8D,UAAUC,eACpBmB,EAAID,EAAGC,EACP3F,EAAI0F,EAAG1F,EACP4F,EAAIF,EAAGE,EACP7F,EAAI2F,EAAG3F,EACP8F,EAAKH,EAAGG,GACRC,EAAKJ,EAAGI,GAERnD,EAAalC,KAAKkC,WAEfoD,EAAI,EAAGA,EAAIpD,EAAWtB,OAAS,EAAG0E,IAC3C,CACI,IAAMC,EAAIvC,EAAc,EAAJsC,GACdE,EAAIxC,EAAc,EAAJsC,EAAS,GAE7BpD,EAAgB,EAAJoD,GAAWJ,EAAIK,EAAMJ,EAAIK,EAAKJ,EAC1ClD,EAAgB,EAAJoD,EAAS,GAAM/F,EAAIgG,EAAMjG,EAAIkG,EAAKH,EAGlD,GAAIrF,KAAKqC,aAEL,CAAA,IAAMoD,EAAanD,WAASoD,WAE5B,IAASJ,EAAI,EAAGA,EAAIpD,EAAWtB,SAAU0E,EAErCpD,EAAWoD,GAAKK,KAAKC,OAAO1D,EAAWoD,GAAKG,EAAa,GAAKA,GAItEzF,KAAKmC,YAAehB,EAAiB4D,gBAMlCtC,yBAAP,WAEI,IAAMoD,EAAU7F,KAAKmB,SAASuB,QAAQ,GAEjC1C,KAAKoB,OAAOf,SAASyF,SAWtB9F,KAAKgC,IAAM6D,EAAQvF,MATdN,KAAKwC,WAENxC,KAAKwC,SAAW,IAAI9B,EAAamF,EAAS7F,KAAKoB,OAAOf,WAE1DL,KAAKwC,SAASe,SACdvD,KAAKgC,IAAMhC,KAAKwC,SAASlC,OAcvBmC,6BAAV,WAEIzC,KAAKsE,oBAELtE,KAAK+F,QAAQC,cAAchG,KAAKkC,WAAY,EAAGlC,KAAKkC,WAAWtB,SAS5D6B,0BAAP,SAAqBwD,GAEjB,IAAKjG,KAAKkG,YAAYC,SAASF,EAAMV,EAAGU,EAAMT,GAE1C,OAAO,EAGXxF,KAAK+D,eAAeqC,aAAaH,EAAOlF,GASxC,IAPA,IAAMiC,EAAWhD,KAAKmB,SAASkF,UAAU,mBAAmB/F,KAEtDgG,EAASrF,EAAYqF,OACrBrE,EAAWjC,KAAKmB,SAASoF,WAAWjG,KACpCkG,EAAMvE,EAAQrB,OACd6F,EAAyB,IAAlBzG,KAAKsB,SAAiB,EAAI,EAE9BgE,EAAI,EAAGA,EAAI,EAAIkB,EAAKlB,GAAKmB,EAClC,CACI,IAAMC,EAAoB,EAAbzE,EAAQqD,GACfqB,EAAwB,EAAjB1E,EAAQqD,EAAI,GACnBsB,EAAwB,EAAjB3E,EAAQqD,EAAI,GASzB,GAPAgB,EAAO,GAAKtD,EAAS0D,GACrBJ,EAAO,GAAKtD,EAAS0D,EAAO,GAC5BJ,EAAO,GAAKtD,EAAS2D,GACrBL,EAAO,GAAKtD,EAAS2D,EAAO,GAC5BL,EAAO,GAAKtD,EAAS4D,GACrBN,EAAO,GAAKtD,EAAS4D,EAAO,GAExB3F,EAAYkF,SAASpF,EAAUwE,EAAGxE,EAAUyE,GAE5C,OAAO,EAIf,OAAO,GAUJ/C,oBAAP,SAAeoE,GAEXpF,YAAMqF,kBAAQD,GAEd7G,KAAKmB,SAASQ,WACiB,IAA3B3B,KAAKmB,SAASQ,UAEd3B,KAAKmB,SAAS4F,UAGjB/G,KAAamB,SAAW,KACzBnB,KAAKoB,OAAS,KACdpB,KAAKqB,MAAQ,KACbrB,KAAKgC,IAAM,KACXhC,KAAKiC,QAAU,KACfjC,KAAKkC,WAAa,MAURO,iBAAiB,OAreTuE,4lBCatB,WAAYC,EAAmBJ,GAA/B,WAEUhD,EAAW,CACboD,WACA5D,MAAO,EACP6D,eAAgBC,SAAOC,SACvBC,OAAQ,IAAIxG,aAAa,CAAC,EAAG,EAAG,EAAG,YAIvCgG,EAAUrH,OAAO8H,OAAO,CACpBzE,KAAM,SACNQ,MAAO,EACPqB,WAAY,SACbmC,IAEShD,UAERrE,OAAO8H,OAAOzD,EAAUgD,EAAQhD,WAGpCnC,EAAAD,YAAMoF,EAAQnD,SAAW6D,UAAQC,KAAKC,EAAQC,GAAW7D,UAQpD8D,aAAc,EAQnBjG,EAAKrB,SAAW,IAAIuH,gBAAcX,GAOlCvF,EAAKuB,eAAgC4E,IAApBhB,EAAQnD,QAQzBhC,EAAKgD,WAAamC,EAAQnC,WAE1BhD,EAAKmB,KAAOgE,EAAQhE,KACpBnB,EAAK2B,MAAQwD,EAAQxD,QA4E7B,OA1JkCvD,OAqF9BN,sBAAIsI,2BAAJ,WAEI,OAAO9H,KAAK6D,SAASoD,cAEzB,SAAYtE,GAEJ3C,KAAK6D,SAASoD,WAAatE,IAE3B3C,KAAK6D,SAASoD,SAAWtE,EACzB3C,KAAKK,SAASyC,QAAUH,oCAUhCnD,sBAAIsI,yBAOJ,WAEI,OAAO9H,KAAK+H,YAThB,SAAUpF,GAEFA,IAAU3C,KAAK+H,SAEnB/H,KAAK+H,OAASpF,EACd3C,KAAK2H,aAAc,oCAYvBnI,sBAAIsI,wBAQJ,WAEI,OAAO9H,KAAKgI,WAVhB,SAASrF,GAEDA,IAAU3C,KAAKgI,QAEnBhI,KAAKgI,MAAQrF,EACb3C,KAAKwE,UAAY7B,GAAS,KAAe,MAARA,KAA4B,IAARA,IAAiB,IACtE3C,KAAK2H,aAAc,oCAWhBG,mBAAP,WAEI,GAAI9H,KAAK2H,YACT,CACI3H,KAAK2H,aAAc,EACnB,IAAMM,EAAcjI,KAAK8C,QAAQmF,YAEjCC,wBACIlI,KAAKgI,MAAOhI,KAAK+H,OAAQ/H,KAAK6D,SAASwD,OAASY,EAAYE,WAGhEnI,KAAKK,SAASkD,WAEdvD,KAAK6D,SAASqD,eAAiBlH,KAAKK,SAAS+H,cAvJvBC,wBCM9B,WAAYrF,EAAyBhB,EAAoBsG,GAAzD,MAEI7G,mBAEM8G,EAAiB,IAAIC,SAAOxF,GAC5ByF,EAAY,IAAID,SAAOxG,GAAK,GAC5BuC,EAAc,IAAIiE,SAAOF,GAAO,GAAM,UAE5C5G,EAAKgH,aAAa,kBAAmBH,EAAgB,GAAG,EAAOI,QAAMC,OAChEF,aAAa,gBAAiBD,EAAW,GAAG,EAAOE,QAAMC,OACzDC,SAAStE,GAUd7C,EAAKoH,WAAa,IAa1B,OA3CkChJ,OAuC9BN,sBAAIuJ,iCAAJ,WAEI,OAAO/I,KAAK0C,QAAQ,GAAGjC,8CAzCGuI"}